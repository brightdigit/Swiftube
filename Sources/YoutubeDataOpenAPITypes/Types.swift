// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/abuseReports`.
    /// - Remark: Generated from `#/paths//youtube/v3/abuseReports/post(youtube.abuseReports.insert)`.
    func youtube_period_abuseReports_period_insert(_ input: Operations.youtube_period_abuseReports_period_insert.Input) async throws -> Operations.youtube_period_abuseReports_period_insert.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/activities`.
    /// - Remark: Generated from `#/paths//youtube/v3/activities/get(youtube.activities.list)`.
    func youtube_period_activities_period_list(_ input: Operations.youtube_period_activities_period_list.Input) async throws -> Operations.youtube_period_activities_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/get(youtube.captions.list)`.
    func youtube_period_captions_period_list(_ input: Operations.youtube_period_captions_period_list.Input) async throws -> Operations.youtube_period_captions_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/post(youtube.captions.insert)`.
    func youtube_period_captions_period_insert(_ input: Operations.youtube_period_captions_period_insert.Input) async throws -> Operations.youtube_period_captions_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/put(youtube.captions.update)`.
    func youtube_period_captions_period_update(_ input: Operations.youtube_period_captions_period_update.Input) async throws -> Operations.youtube_period_captions_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/delete(youtube.captions.delete)`.
    func youtube_period_captions_period_delete(_ input: Operations.youtube_period_captions_period_delete.Input) async throws -> Operations.youtube_period_captions_period_delete.Output
    /// Downloads a caption track.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions/{id}`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/{id}/get(youtube.captions.download)`.
    func youtube_period_captions_period_download(_ input: Operations.youtube_period_captions_period_download.Input) async throws -> Operations.youtube_period_captions_period_download.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelBanners/insert`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelBanners/insert/post(youtube.channelBanners.insert)`.
    func youtube_period_channelBanners_period_insert(_ input: Operations.youtube_period_channelBanners_period_insert.Input) async throws -> Operations.youtube_period_channelBanners_period_insert.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/get(youtube.channelSections.list)`.
    func youtube_period_channelSections_period_list(_ input: Operations.youtube_period_channelSections_period_list.Input) async throws -> Operations.youtube_period_channelSections_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/post(youtube.channelSections.insert)`.
    func youtube_period_channelSections_period_insert(_ input: Operations.youtube_period_channelSections_period_insert.Input) async throws -> Operations.youtube_period_channelSections_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/put(youtube.channelSections.update)`.
    func youtube_period_channelSections_period_update(_ input: Operations.youtube_period_channelSections_period_update.Input) async throws -> Operations.youtube_period_channelSections_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/delete(youtube.channelSections.delete)`.
    func youtube_period_channelSections_period_delete(_ input: Operations.youtube_period_channelSections_period_delete.Input) async throws -> Operations.youtube_period_channelSections_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/get(youtube.channels.list)`.
    func youtube_period_channels_period_list(_ input: Operations.youtube_period_channels_period_list.Input) async throws -> Operations.youtube_period_channels_period_list.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/put(youtube.channels.update)`.
    func youtube_period_channels_period_update(_ input: Operations.youtube_period_channels_period_update.Input) async throws -> Operations.youtube_period_channels_period_update.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/get(youtube.commentThreads.list)`.
    func youtube_period_commentThreads_period_list(_ input: Operations.youtube_period_commentThreads_period_list.Input) async throws -> Operations.youtube_period_commentThreads_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/post(youtube.commentThreads.insert)`.
    func youtube_period_commentThreads_period_insert(_ input: Operations.youtube_period_commentThreads_period_insert.Input) async throws -> Operations.youtube_period_commentThreads_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/put(youtube.youtube.v3.updateCommentThreads)`.
    func youtube_period_youtube_period_v3_period_updateCommentThreads(_ input: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input) async throws -> Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/get(youtube.comments.list)`.
    func youtube_period_comments_period_list(_ input: Operations.youtube_period_comments_period_list.Input) async throws -> Operations.youtube_period_comments_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/post(youtube.comments.insert)`.
    func youtube_period_comments_period_insert(_ input: Operations.youtube_period_comments_period_insert.Input) async throws -> Operations.youtube_period_comments_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/put(youtube.comments.update)`.
    func youtube_period_comments_period_update(_ input: Operations.youtube_period_comments_period_update.Input) async throws -> Operations.youtube_period_comments_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/delete(youtube.comments.delete)`.
    func youtube_period_comments_period_delete(_ input: Operations.youtube_period_comments_period_delete.Input) async throws -> Operations.youtube_period_comments_period_delete.Output
    /// Expresses the caller's opinion that one or more comments should be flagged as spam.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/markAsSpam`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/markAsSpam/post(youtube.comments.markAsSpam)`.
    func youtube_period_comments_period_markAsSpam(_ input: Operations.youtube_period_comments_period_markAsSpam.Input) async throws -> Operations.youtube_period_comments_period_markAsSpam.Output
    /// Sets the moderation status of one or more comments.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/setModerationStatus`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/setModerationStatus/post(youtube.comments.setModerationStatus)`.
    func youtube_period_comments_period_setModerationStatus(_ input: Operations.youtube_period_comments_period_setModerationStatus.Input) async throws -> Operations.youtube_period_comments_period_setModerationStatus.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nLanguages`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nLanguages/get(youtube.i18nLanguages.list)`.
    func youtube_period_i18nLanguages_period_list(_ input: Operations.youtube_period_i18nLanguages_period_list.Input) async throws -> Operations.youtube_period_i18nLanguages_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nRegions`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nRegions/get(youtube.i18nRegions.list)`.
    func youtube_period_i18nRegions_period_list(_ input: Operations.youtube_period_i18nRegions_period_list.Input) async throws -> Operations.youtube_period_i18nRegions_period_list.Output
    /// Retrieve the list of broadcasts associated with the given channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/get(youtube.liveBroadcasts.list)`.
    func youtube_period_liveBroadcasts_period_list(_ input: Operations.youtube_period_liveBroadcasts_period_list.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_list.Output
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/post(youtube.liveBroadcasts.insert)`.
    func youtube_period_liveBroadcasts_period_insert(_ input: Operations.youtube_period_liveBroadcasts_period_insert.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_insert.Output
    /// Updates an existing broadcast for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/put(youtube.liveBroadcasts.update)`.
    func youtube_period_liveBroadcasts_period_update(_ input: Operations.youtube_period_liveBroadcasts_period_update.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_update.Output
    /// Delete a given broadcast.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/delete(youtube.liveBroadcasts.delete)`.
    func youtube_period_liveBroadcasts_period_delete(_ input: Operations.youtube_period_liveBroadcasts_period_delete.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_delete.Output
    /// Bind a broadcast to a stream.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/bind`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/bind/post(youtube.liveBroadcasts.bind)`.
    func youtube_period_liveBroadcasts_period_bind(_ input: Operations.youtube_period_liveBroadcasts_period_bind.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_bind.Output
    /// Insert cuepoints in a broadcast
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/cuepoint`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/cuepoint/post(youtube.liveBroadcasts.insertCuepoint)`.
    func youtube_period_liveBroadcasts_period_insertCuepoint(_ input: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output
    /// Transition a broadcast to a given status.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/transition`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/transition/post(youtube.liveBroadcasts.transition)`.
    func youtube_period_liveBroadcasts_period_transition(_ input: Operations.youtube_period_liveBroadcasts_period_transition.Input) async throws -> Operations.youtube_period_liveBroadcasts_period_transition.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/post(youtube.liveChatBans.insert)`.
    func youtube_period_liveChatBans_period_insert(_ input: Operations.youtube_period_liveChatBans_period_insert.Input) async throws -> Operations.youtube_period_liveChatBans_period_insert.Output
    /// Deletes a chat ban.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/delete(youtube.liveChatBans.delete)`.
    func youtube_period_liveChatBans_period_delete(_ input: Operations.youtube_period_liveChatBans_period_delete.Input) async throws -> Operations.youtube_period_liveChatBans_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/get(youtube.liveChatMessages.list)`.
    func youtube_period_liveChatMessages_period_list(_ input: Operations.youtube_period_liveChatMessages_period_list.Input) async throws -> Operations.youtube_period_liveChatMessages_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/post(youtube.liveChatMessages.insert)`.
    func youtube_period_liveChatMessages_period_insert(_ input: Operations.youtube_period_liveChatMessages_period_insert.Input) async throws -> Operations.youtube_period_liveChatMessages_period_insert.Output
    /// Deletes a chat message.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/delete(youtube.liveChatMessages.delete)`.
    func youtube_period_liveChatMessages_period_delete(_ input: Operations.youtube_period_liveChatMessages_period_delete.Input) async throws -> Operations.youtube_period_liveChatMessages_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/get(youtube.liveChatModerators.list)`.
    func youtube_period_liveChatModerators_period_list(_ input: Operations.youtube_period_liveChatModerators_period_list.Input) async throws -> Operations.youtube_period_liveChatModerators_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/post(youtube.liveChatModerators.insert)`.
    func youtube_period_liveChatModerators_period_insert(_ input: Operations.youtube_period_liveChatModerators_period_insert.Input) async throws -> Operations.youtube_period_liveChatModerators_period_insert.Output
    /// Deletes a chat moderator.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/delete(youtube.liveChatModerators.delete)`.
    func youtube_period_liveChatModerators_period_delete(_ input: Operations.youtube_period_liveChatModerators_period_delete.Input) async throws -> Operations.youtube_period_liveChatModerators_period_delete.Output
    /// Retrieve the list of streams associated with the given channel. --
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/get(youtube.liveStreams.list)`.
    func youtube_period_liveStreams_period_list(_ input: Operations.youtube_period_liveStreams_period_list.Input) async throws -> Operations.youtube_period_liveStreams_period_list.Output
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/post(youtube.liveStreams.insert)`.
    func youtube_period_liveStreams_period_insert(_ input: Operations.youtube_period_liveStreams_period_insert.Input) async throws -> Operations.youtube_period_liveStreams_period_insert.Output
    /// Updates an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/put(youtube.liveStreams.update)`.
    func youtube_period_liveStreams_period_update(_ input: Operations.youtube_period_liveStreams_period_update.Input) async throws -> Operations.youtube_period_liveStreams_period_update.Output
    /// Deletes an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/delete(youtube.liveStreams.delete)`.
    func youtube_period_liveStreams_period_delete(_ input: Operations.youtube_period_liveStreams_period_delete.Input) async throws -> Operations.youtube_period_liveStreams_period_delete.Output
    /// Retrieves a list of members that match the request criteria for a channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/members`.
    /// - Remark: Generated from `#/paths//youtube/v3/members/get(youtube.members.list)`.
    func youtube_period_members_period_list(_ input: Operations.youtube_period_members_period_list.Input) async throws -> Operations.youtube_period_members_period_list.Output
    /// Retrieves a list of all pricing levels offered by a creator to the fans.
    ///
    /// - Remark: HTTP `GET /youtube/v3/membershipsLevels`.
    /// - Remark: Generated from `#/paths//youtube/v3/membershipsLevels/get(youtube.membershipsLevels.list)`.
    func youtube_period_membershipsLevels_period_list(_ input: Operations.youtube_period_membershipsLevels_period_list.Input) async throws -> Operations.youtube_period_membershipsLevels_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/get(youtube.playlistImages.list)`.
    func youtube_period_playlistImages_period_list(_ input: Operations.youtube_period_playlistImages_period_list.Input) async throws -> Operations.youtube_period_playlistImages_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/post(youtube.playlistImages.insert)`.
    func youtube_period_playlistImages_period_insert(_ input: Operations.youtube_period_playlistImages_period_insert.Input) async throws -> Operations.youtube_period_playlistImages_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/put(youtube.playlistImages.update)`.
    func youtube_period_playlistImages_period_update(_ input: Operations.youtube_period_playlistImages_period_update.Input) async throws -> Operations.youtube_period_playlistImages_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/delete(youtube.playlistImages.delete)`.
    func youtube_period_playlistImages_period_delete(_ input: Operations.youtube_period_playlistImages_period_delete.Input) async throws -> Operations.youtube_period_playlistImages_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/get(youtube.playlistItems.list)`.
    func youtube_period_playlistItems_period_list(_ input: Operations.youtube_period_playlistItems_period_list.Input) async throws -> Operations.youtube_period_playlistItems_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/post(youtube.playlistItems.insert)`.
    func youtube_period_playlistItems_period_insert(_ input: Operations.youtube_period_playlistItems_period_insert.Input) async throws -> Operations.youtube_period_playlistItems_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/put(youtube.playlistItems.update)`.
    func youtube_period_playlistItems_period_update(_ input: Operations.youtube_period_playlistItems_period_update.Input) async throws -> Operations.youtube_period_playlistItems_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/delete(youtube.playlistItems.delete)`.
    func youtube_period_playlistItems_period_delete(_ input: Operations.youtube_period_playlistItems_period_delete.Input) async throws -> Operations.youtube_period_playlistItems_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/get(youtube.playlists.list)`.
    func youtube_period_playlists_period_list(_ input: Operations.youtube_period_playlists_period_list.Input) async throws -> Operations.youtube_period_playlists_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/post(youtube.playlists.insert)`.
    func youtube_period_playlists_period_insert(_ input: Operations.youtube_period_playlists_period_insert.Input) async throws -> Operations.youtube_period_playlists_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/put(youtube.playlists.update)`.
    func youtube_period_playlists_period_update(_ input: Operations.youtube_period_playlists_period_update.Input) async throws -> Operations.youtube_period_playlists_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/delete(youtube.playlists.delete)`.
    func youtube_period_playlists_period_delete(_ input: Operations.youtube_period_playlists_period_delete.Input) async throws -> Operations.youtube_period_playlists_period_delete.Output
    /// Retrieves a list of search resources
    ///
    /// - Remark: HTTP `GET /youtube/v3/search`.
    /// - Remark: Generated from `#/paths//youtube/v3/search/get(youtube.search.list)`.
    func youtube_period_search_period_list(_ input: Operations.youtube_period_search_period_list.Input) async throws -> Operations.youtube_period_search_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/get(youtube.subscriptions.list)`.
    func youtube_period_subscriptions_period_list(_ input: Operations.youtube_period_subscriptions_period_list.Input) async throws -> Operations.youtube_period_subscriptions_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/post(youtube.subscriptions.insert)`.
    func youtube_period_subscriptions_period_insert(_ input: Operations.youtube_period_subscriptions_period_insert.Input) async throws -> Operations.youtube_period_subscriptions_period_insert.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/delete(youtube.subscriptions.delete)`.
    func youtube_period_subscriptions_period_delete(_ input: Operations.youtube_period_subscriptions_period_delete.Input) async throws -> Operations.youtube_period_subscriptions_period_delete.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/superChatEvents`.
    /// - Remark: Generated from `#/paths//youtube/v3/superChatEvents/get(youtube.superChatEvents.list)`.
    func youtube_period_superChatEvents_period_list(_ input: Operations.youtube_period_superChatEvents_period_list.Input) async throws -> Operations.youtube_period_superChatEvents_period_list.Output
    /// POST method.
    ///
    /// - Remark: HTTP `POST /youtube/v3/tests`.
    /// - Remark: Generated from `#/paths//youtube/v3/tests/post(youtube.tests.insert)`.
    func youtube_period_tests_period_insert(_ input: Operations.youtube_period_tests_period_insert.Input) async throws -> Operations.youtube_period_tests_period_insert.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/get(youtube.thirdPartyLinks.list)`.
    func youtube_period_thirdPartyLinks_period_list(_ input: Operations.youtube_period_thirdPartyLinks_period_list.Input) async throws -> Operations.youtube_period_thirdPartyLinks_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/post(youtube.thirdPartyLinks.insert)`.
    func youtube_period_thirdPartyLinks_period_insert(_ input: Operations.youtube_period_thirdPartyLinks_period_insert.Input) async throws -> Operations.youtube_period_thirdPartyLinks_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/put(youtube.thirdPartyLinks.update)`.
    func youtube_period_thirdPartyLinks_period_update(_ input: Operations.youtube_period_thirdPartyLinks_period_update.Input) async throws -> Operations.youtube_period_thirdPartyLinks_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/delete(youtube.thirdPartyLinks.delete)`.
    func youtube_period_thirdPartyLinks_period_delete(_ input: Operations.youtube_period_thirdPartyLinks_period_delete.Input) async throws -> Operations.youtube_period_thirdPartyLinks_period_delete.Output
    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thumbnails/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/thumbnails/set/post(youtube.thumbnails.set)`.
    func youtube_period_thumbnails_period_set(_ input: Operations.youtube_period_thumbnails_period_set.Input) async throws -> Operations.youtube_period_thumbnails_period_set.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoAbuseReportReasons`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoAbuseReportReasons/get(youtube.videoAbuseReportReasons.list)`.
    func youtube_period_videoAbuseReportReasons_period_list(_ input: Operations.youtube_period_videoAbuseReportReasons_period_list.Input) async throws -> Operations.youtube_period_videoAbuseReportReasons_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoCategories`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoCategories/get(youtube.videoCategories.list)`.
    func youtube_period_videoCategories_period_list(_ input: Operations.youtube_period_videoCategories_period_list.Input) async throws -> Operations.youtube_period_videoCategories_period_list.Output
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/get(youtube.videos.list)`.
    func youtube_period_videos_period_list(_ input: Operations.youtube_period_videos_period_list.Input) async throws -> Operations.youtube_period_videos_period_list.Output
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/post(youtube.videos.insert)`.
    func youtube_period_videos_period_insert(_ input: Operations.youtube_period_videos_period_insert.Input) async throws -> Operations.youtube_period_videos_period_insert.Output
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/put(youtube.videos.update)`.
    func youtube_period_videos_period_update(_ input: Operations.youtube_period_videos_period_update.Input) async throws -> Operations.youtube_period_videos_period_update.Output
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/delete(youtube.videos.delete)`.
    func youtube_period_videos_period_delete(_ input: Operations.youtube_period_videos_period_delete.Input) async throws -> Operations.youtube_period_videos_period_delete.Output
    /// Retrieves the ratings that the authorized user gave to a list of specified videos.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos/getRating`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/getRating/get(youtube.videos.getRating)`.
    func youtube_period_videos_period_getRating(_ input: Operations.youtube_period_videos_period_getRating.Input) async throws -> Operations.youtube_period_videos_period_getRating.Output
    /// Adds a like or dislike rating to a video or removes a rating from a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/rate`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/rate/post(youtube.videos.rate)`.
    func youtube_period_videos_period_rate(_ input: Operations.youtube_period_videos_period_rate.Input) async throws -> Operations.youtube_period_videos_period_rate.Output
    /// Report abuse for a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/reportAbuse`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/reportAbuse/post(youtube.videos.reportAbuse)`.
    func youtube_period_videos_period_reportAbuse(_ input: Operations.youtube_period_videos_period_reportAbuse.Input) async throws -> Operations.youtube_period_videos_period_reportAbuse.Output
    /// Allows upload of watermark image and setting it for a channel.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/set/post(youtube.watermarks.set)`.
    func youtube_period_watermarks_period_set(_ input: Operations.youtube_period_watermarks_period_set.Input) async throws -> Operations.youtube_period_watermarks_period_set.Output
    /// Allows removal of channel watermark.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/unset`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/unset/post(youtube.watermarks.unset)`.
    func youtube_period_watermarks_period_unset(_ input: Operations.youtube_period_watermarks_period_unset.Input) async throws -> Operations.youtube_period_watermarks_period_unset.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/abuseReports`.
    /// - Remark: Generated from `#/paths//youtube/v3/abuseReports/post(youtube.abuseReports.insert)`.
    public func youtube_period_abuseReports_period_insert(
        query: Operations.youtube_period_abuseReports_period_insert.Input.Query,
        headers: Operations.youtube_period_abuseReports_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_abuseReports_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_abuseReports_period_insert.Output {
        try await youtube_period_abuseReports_period_insert(Operations.youtube_period_abuseReports_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/activities`.
    /// - Remark: Generated from `#/paths//youtube/v3/activities/get(youtube.activities.list)`.
    public func youtube_period_activities_period_list(
        query: Operations.youtube_period_activities_period_list.Input.Query,
        headers: Operations.youtube_period_activities_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_activities_period_list.Output {
        try await youtube_period_activities_period_list(Operations.youtube_period_activities_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/get(youtube.captions.list)`.
    public func youtube_period_captions_period_list(
        query: Operations.youtube_period_captions_period_list.Input.Query,
        headers: Operations.youtube_period_captions_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_captions_period_list.Output {
        try await youtube_period_captions_period_list(Operations.youtube_period_captions_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/post(youtube.captions.insert)`.
    public func youtube_period_captions_period_insert(
        query: Operations.youtube_period_captions_period_insert.Input.Query,
        headers: Operations.youtube_period_captions_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_captions_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_captions_period_insert.Output {
        try await youtube_period_captions_period_insert(Operations.youtube_period_captions_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/put(youtube.captions.update)`.
    public func youtube_period_captions_period_update(
        query: Operations.youtube_period_captions_period_update.Input.Query,
        headers: Operations.youtube_period_captions_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_captions_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_captions_period_update.Output {
        try await youtube_period_captions_period_update(Operations.youtube_period_captions_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/delete(youtube.captions.delete)`.
    public func youtube_period_captions_period_delete(query: Operations.youtube_period_captions_period_delete.Input.Query) async throws -> Operations.youtube_period_captions_period_delete.Output {
        try await youtube_period_captions_period_delete(Operations.youtube_period_captions_period_delete.Input(query: query))
    }
    /// Downloads a caption track.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions/{id}`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/{id}/get(youtube.captions.download)`.
    public func youtube_period_captions_period_download(
        path: Operations.youtube_period_captions_period_download.Input.Path,
        query: Operations.youtube_period_captions_period_download.Input.Query = .init()
    ) async throws -> Operations.youtube_period_captions_period_download.Output {
        try await youtube_period_captions_period_download(Operations.youtube_period_captions_period_download.Input(
            path: path,
            query: query
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelBanners/insert`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelBanners/insert/post(youtube.channelBanners.insert)`.
    public func youtube_period_channelBanners_period_insert(
        query: Operations.youtube_period_channelBanners_period_insert.Input.Query = .init(),
        headers: Operations.youtube_period_channelBanners_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_channelBanners_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_channelBanners_period_insert.Output {
        try await youtube_period_channelBanners_period_insert(Operations.youtube_period_channelBanners_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/get(youtube.channelSections.list)`.
    public func youtube_period_channelSections_period_list(
        query: Operations.youtube_period_channelSections_period_list.Input.Query,
        headers: Operations.youtube_period_channelSections_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_channelSections_period_list.Output {
        try await youtube_period_channelSections_period_list(Operations.youtube_period_channelSections_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/post(youtube.channelSections.insert)`.
    public func youtube_period_channelSections_period_insert(
        query: Operations.youtube_period_channelSections_period_insert.Input.Query,
        headers: Operations.youtube_period_channelSections_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_channelSections_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_channelSections_period_insert.Output {
        try await youtube_period_channelSections_period_insert(Operations.youtube_period_channelSections_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/put(youtube.channelSections.update)`.
    public func youtube_period_channelSections_period_update(
        query: Operations.youtube_period_channelSections_period_update.Input.Query,
        headers: Operations.youtube_period_channelSections_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_channelSections_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_channelSections_period_update.Output {
        try await youtube_period_channelSections_period_update(Operations.youtube_period_channelSections_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/delete(youtube.channelSections.delete)`.
    public func youtube_period_channelSections_period_delete(query: Operations.youtube_period_channelSections_period_delete.Input.Query) async throws -> Operations.youtube_period_channelSections_period_delete.Output {
        try await youtube_period_channelSections_period_delete(Operations.youtube_period_channelSections_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/get(youtube.channels.list)`.
    public func youtube_period_channels_period_list(
        query: Operations.youtube_period_channels_period_list.Input.Query,
        headers: Operations.youtube_period_channels_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_channels_period_list.Output {
        try await youtube_period_channels_period_list(Operations.youtube_period_channels_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/put(youtube.channels.update)`.
    public func youtube_period_channels_period_update(
        query: Operations.youtube_period_channels_period_update.Input.Query,
        headers: Operations.youtube_period_channels_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_channels_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_channels_period_update.Output {
        try await youtube_period_channels_period_update(Operations.youtube_period_channels_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/get(youtube.commentThreads.list)`.
    public func youtube_period_commentThreads_period_list(
        query: Operations.youtube_period_commentThreads_period_list.Input.Query,
        headers: Operations.youtube_period_commentThreads_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_commentThreads_period_list.Output {
        try await youtube_period_commentThreads_period_list(Operations.youtube_period_commentThreads_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/post(youtube.commentThreads.insert)`.
    public func youtube_period_commentThreads_period_insert(
        query: Operations.youtube_period_commentThreads_period_insert.Input.Query,
        headers: Operations.youtube_period_commentThreads_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_commentThreads_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_commentThreads_period_insert.Output {
        try await youtube_period_commentThreads_period_insert(Operations.youtube_period_commentThreads_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/put(youtube.youtube.v3.updateCommentThreads)`.
    public func youtube_period_youtube_period_v3_period_updateCommentThreads(
        query: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Query = .init(),
        headers: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Headers = .init(),
        body: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Body? = nil
    ) async throws -> Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output {
        try await youtube_period_youtube_period_v3_period_updateCommentThreads(Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/get(youtube.comments.list)`.
    public func youtube_period_comments_period_list(
        query: Operations.youtube_period_comments_period_list.Input.Query,
        headers: Operations.youtube_period_comments_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_comments_period_list.Output {
        try await youtube_period_comments_period_list(Operations.youtube_period_comments_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/post(youtube.comments.insert)`.
    public func youtube_period_comments_period_insert(
        query: Operations.youtube_period_comments_period_insert.Input.Query,
        headers: Operations.youtube_period_comments_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_comments_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_comments_period_insert.Output {
        try await youtube_period_comments_period_insert(Operations.youtube_period_comments_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/put(youtube.comments.update)`.
    public func youtube_period_comments_period_update(
        query: Operations.youtube_period_comments_period_update.Input.Query,
        headers: Operations.youtube_period_comments_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_comments_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_comments_period_update.Output {
        try await youtube_period_comments_period_update(Operations.youtube_period_comments_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/delete(youtube.comments.delete)`.
    public func youtube_period_comments_period_delete(query: Operations.youtube_period_comments_period_delete.Input.Query) async throws -> Operations.youtube_period_comments_period_delete.Output {
        try await youtube_period_comments_period_delete(Operations.youtube_period_comments_period_delete.Input(query: query))
    }
    /// Expresses the caller's opinion that one or more comments should be flagged as spam.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/markAsSpam`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/markAsSpam/post(youtube.comments.markAsSpam)`.
    public func youtube_period_comments_period_markAsSpam(query: Operations.youtube_period_comments_period_markAsSpam.Input.Query) async throws -> Operations.youtube_period_comments_period_markAsSpam.Output {
        try await youtube_period_comments_period_markAsSpam(Operations.youtube_period_comments_period_markAsSpam.Input(query: query))
    }
    /// Sets the moderation status of one or more comments.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/setModerationStatus`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/setModerationStatus/post(youtube.comments.setModerationStatus)`.
    public func youtube_period_comments_period_setModerationStatus(query: Operations.youtube_period_comments_period_setModerationStatus.Input.Query) async throws -> Operations.youtube_period_comments_period_setModerationStatus.Output {
        try await youtube_period_comments_period_setModerationStatus(Operations.youtube_period_comments_period_setModerationStatus.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nLanguages`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nLanguages/get(youtube.i18nLanguages.list)`.
    public func youtube_period_i18nLanguages_period_list(
        query: Operations.youtube_period_i18nLanguages_period_list.Input.Query,
        headers: Operations.youtube_period_i18nLanguages_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_i18nLanguages_period_list.Output {
        try await youtube_period_i18nLanguages_period_list(Operations.youtube_period_i18nLanguages_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nRegions`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nRegions/get(youtube.i18nRegions.list)`.
    public func youtube_period_i18nRegions_period_list(
        query: Operations.youtube_period_i18nRegions_period_list.Input.Query,
        headers: Operations.youtube_period_i18nRegions_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_i18nRegions_period_list.Output {
        try await youtube_period_i18nRegions_period_list(Operations.youtube_period_i18nRegions_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieve the list of broadcasts associated with the given channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/get(youtube.liveBroadcasts.list)`.
    public func youtube_period_liveBroadcasts_period_list(
        query: Operations.youtube_period_liveBroadcasts_period_list.Input.Query,
        headers: Operations.youtube_period_liveBroadcasts_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_list.Output {
        try await youtube_period_liveBroadcasts_period_list(Operations.youtube_period_liveBroadcasts_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/post(youtube.liveBroadcasts.insert)`.
    public func youtube_period_liveBroadcasts_period_insert(
        query: Operations.youtube_period_liveBroadcasts_period_insert.Input.Query,
        headers: Operations.youtube_period_liveBroadcasts_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_liveBroadcasts_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_insert.Output {
        try await youtube_period_liveBroadcasts_period_insert(Operations.youtube_period_liveBroadcasts_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing broadcast for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/put(youtube.liveBroadcasts.update)`.
    public func youtube_period_liveBroadcasts_period_update(
        query: Operations.youtube_period_liveBroadcasts_period_update.Input.Query,
        headers: Operations.youtube_period_liveBroadcasts_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_liveBroadcasts_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_update.Output {
        try await youtube_period_liveBroadcasts_period_update(Operations.youtube_period_liveBroadcasts_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Delete a given broadcast.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/delete(youtube.liveBroadcasts.delete)`.
    public func youtube_period_liveBroadcasts_period_delete(query: Operations.youtube_period_liveBroadcasts_period_delete.Input.Query) async throws -> Operations.youtube_period_liveBroadcasts_period_delete.Output {
        try await youtube_period_liveBroadcasts_period_delete(Operations.youtube_period_liveBroadcasts_period_delete.Input(query: query))
    }
    /// Bind a broadcast to a stream.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/bind`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/bind/post(youtube.liveBroadcasts.bind)`.
    public func youtube_period_liveBroadcasts_period_bind(
        query: Operations.youtube_period_liveBroadcasts_period_bind.Input.Query,
        headers: Operations.youtube_period_liveBroadcasts_period_bind.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_bind.Output {
        try await youtube_period_liveBroadcasts_period_bind(Operations.youtube_period_liveBroadcasts_period_bind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Insert cuepoints in a broadcast
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/cuepoint`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/cuepoint/post(youtube.liveBroadcasts.insertCuepoint)`.
    public func youtube_period_liveBroadcasts_period_insertCuepoint(
        query: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Query = .init(),
        headers: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Headers = .init(),
        body: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output {
        try await youtube_period_liveBroadcasts_period_insertCuepoint(Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Transition a broadcast to a given status.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/transition`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/transition/post(youtube.liveBroadcasts.transition)`.
    public func youtube_period_liveBroadcasts_period_transition(
        query: Operations.youtube_period_liveBroadcasts_period_transition.Input.Query,
        headers: Operations.youtube_period_liveBroadcasts_period_transition.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveBroadcasts_period_transition.Output {
        try await youtube_period_liveBroadcasts_period_transition(Operations.youtube_period_liveBroadcasts_period_transition.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/post(youtube.liveChatBans.insert)`.
    public func youtube_period_liveChatBans_period_insert(
        query: Operations.youtube_period_liveChatBans_period_insert.Input.Query,
        headers: Operations.youtube_period_liveChatBans_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_liveChatBans_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveChatBans_period_insert.Output {
        try await youtube_period_liveChatBans_period_insert(Operations.youtube_period_liveChatBans_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a chat ban.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/delete(youtube.liveChatBans.delete)`.
    public func youtube_period_liveChatBans_period_delete(query: Operations.youtube_period_liveChatBans_period_delete.Input.Query) async throws -> Operations.youtube_period_liveChatBans_period_delete.Output {
        try await youtube_period_liveChatBans_period_delete(Operations.youtube_period_liveChatBans_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/get(youtube.liveChatMessages.list)`.
    public func youtube_period_liveChatMessages_period_list(
        query: Operations.youtube_period_liveChatMessages_period_list.Input.Query,
        headers: Operations.youtube_period_liveChatMessages_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveChatMessages_period_list.Output {
        try await youtube_period_liveChatMessages_period_list(Operations.youtube_period_liveChatMessages_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/post(youtube.liveChatMessages.insert)`.
    public func youtube_period_liveChatMessages_period_insert(
        query: Operations.youtube_period_liveChatMessages_period_insert.Input.Query,
        headers: Operations.youtube_period_liveChatMessages_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_liveChatMessages_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveChatMessages_period_insert.Output {
        try await youtube_period_liveChatMessages_period_insert(Operations.youtube_period_liveChatMessages_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a chat message.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/delete(youtube.liveChatMessages.delete)`.
    public func youtube_period_liveChatMessages_period_delete(query: Operations.youtube_period_liveChatMessages_period_delete.Input.Query) async throws -> Operations.youtube_period_liveChatMessages_period_delete.Output {
        try await youtube_period_liveChatMessages_period_delete(Operations.youtube_period_liveChatMessages_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/get(youtube.liveChatModerators.list)`.
    public func youtube_period_liveChatModerators_period_list(
        query: Operations.youtube_period_liveChatModerators_period_list.Input.Query,
        headers: Operations.youtube_period_liveChatModerators_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveChatModerators_period_list.Output {
        try await youtube_period_liveChatModerators_period_list(Operations.youtube_period_liveChatModerators_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/post(youtube.liveChatModerators.insert)`.
    public func youtube_period_liveChatModerators_period_insert(
        query: Operations.youtube_period_liveChatModerators_period_insert.Input.Query,
        headers: Operations.youtube_period_liveChatModerators_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_liveChatModerators_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveChatModerators_period_insert.Output {
        try await youtube_period_liveChatModerators_period_insert(Operations.youtube_period_liveChatModerators_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a chat moderator.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/delete(youtube.liveChatModerators.delete)`.
    public func youtube_period_liveChatModerators_period_delete(query: Operations.youtube_period_liveChatModerators_period_delete.Input.Query) async throws -> Operations.youtube_period_liveChatModerators_period_delete.Output {
        try await youtube_period_liveChatModerators_period_delete(Operations.youtube_period_liveChatModerators_period_delete.Input(query: query))
    }
    /// Retrieve the list of streams associated with the given channel. --
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/get(youtube.liveStreams.list)`.
    public func youtube_period_liveStreams_period_list(
        query: Operations.youtube_period_liveStreams_period_list.Input.Query,
        headers: Operations.youtube_period_liveStreams_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_liveStreams_period_list.Output {
        try await youtube_period_liveStreams_period_list(Operations.youtube_period_liveStreams_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/post(youtube.liveStreams.insert)`.
    public func youtube_period_liveStreams_period_insert(
        query: Operations.youtube_period_liveStreams_period_insert.Input.Query,
        headers: Operations.youtube_period_liveStreams_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_liveStreams_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveStreams_period_insert.Output {
        try await youtube_period_liveStreams_period_insert(Operations.youtube_period_liveStreams_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/put(youtube.liveStreams.update)`.
    public func youtube_period_liveStreams_period_update(
        query: Operations.youtube_period_liveStreams_period_update.Input.Query,
        headers: Operations.youtube_period_liveStreams_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_liveStreams_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_liveStreams_period_update.Output {
        try await youtube_period_liveStreams_period_update(Operations.youtube_period_liveStreams_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/delete(youtube.liveStreams.delete)`.
    public func youtube_period_liveStreams_period_delete(query: Operations.youtube_period_liveStreams_period_delete.Input.Query) async throws -> Operations.youtube_period_liveStreams_period_delete.Output {
        try await youtube_period_liveStreams_period_delete(Operations.youtube_period_liveStreams_period_delete.Input(query: query))
    }
    /// Retrieves a list of members that match the request criteria for a channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/members`.
    /// - Remark: Generated from `#/paths//youtube/v3/members/get(youtube.members.list)`.
    public func youtube_period_members_period_list(
        query: Operations.youtube_period_members_period_list.Input.Query,
        headers: Operations.youtube_period_members_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_members_period_list.Output {
        try await youtube_period_members_period_list(Operations.youtube_period_members_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of all pricing levels offered by a creator to the fans.
    ///
    /// - Remark: HTTP `GET /youtube/v3/membershipsLevels`.
    /// - Remark: Generated from `#/paths//youtube/v3/membershipsLevels/get(youtube.membershipsLevels.list)`.
    public func youtube_period_membershipsLevels_period_list(
        query: Operations.youtube_period_membershipsLevels_period_list.Input.Query,
        headers: Operations.youtube_period_membershipsLevels_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_membershipsLevels_period_list.Output {
        try await youtube_period_membershipsLevels_period_list(Operations.youtube_period_membershipsLevels_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/get(youtube.playlistImages.list)`.
    public func youtube_period_playlistImages_period_list(
        query: Operations.youtube_period_playlistImages_period_list.Input.Query = .init(),
        headers: Operations.youtube_period_playlistImages_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_playlistImages_period_list.Output {
        try await youtube_period_playlistImages_period_list(Operations.youtube_period_playlistImages_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/post(youtube.playlistImages.insert)`.
    public func youtube_period_playlistImages_period_insert(
        query: Operations.youtube_period_playlistImages_period_insert.Input.Query = .init(),
        headers: Operations.youtube_period_playlistImages_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_playlistImages_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlistImages_period_insert.Output {
        try await youtube_period_playlistImages_period_insert(Operations.youtube_period_playlistImages_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/put(youtube.playlistImages.update)`.
    public func youtube_period_playlistImages_period_update(
        query: Operations.youtube_period_playlistImages_period_update.Input.Query = .init(),
        headers: Operations.youtube_period_playlistImages_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_playlistImages_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlistImages_period_update.Output {
        try await youtube_period_playlistImages_period_update(Operations.youtube_period_playlistImages_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/delete(youtube.playlistImages.delete)`.
    public func youtube_period_playlistImages_period_delete(query: Operations.youtube_period_playlistImages_period_delete.Input.Query = .init()) async throws -> Operations.youtube_period_playlistImages_period_delete.Output {
        try await youtube_period_playlistImages_period_delete(Operations.youtube_period_playlistImages_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/get(youtube.playlistItems.list)`.
    public func youtube_period_playlistItems_period_list(
        query: Operations.youtube_period_playlistItems_period_list.Input.Query,
        headers: Operations.youtube_period_playlistItems_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_playlistItems_period_list.Output {
        try await youtube_period_playlistItems_period_list(Operations.youtube_period_playlistItems_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/post(youtube.playlistItems.insert)`.
    public func youtube_period_playlistItems_period_insert(
        query: Operations.youtube_period_playlistItems_period_insert.Input.Query,
        headers: Operations.youtube_period_playlistItems_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_playlistItems_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlistItems_period_insert.Output {
        try await youtube_period_playlistItems_period_insert(Operations.youtube_period_playlistItems_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/put(youtube.playlistItems.update)`.
    public func youtube_period_playlistItems_period_update(
        query: Operations.youtube_period_playlistItems_period_update.Input.Query,
        headers: Operations.youtube_period_playlistItems_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_playlistItems_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlistItems_period_update.Output {
        try await youtube_period_playlistItems_period_update(Operations.youtube_period_playlistItems_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/delete(youtube.playlistItems.delete)`.
    public func youtube_period_playlistItems_period_delete(query: Operations.youtube_period_playlistItems_period_delete.Input.Query) async throws -> Operations.youtube_period_playlistItems_period_delete.Output {
        try await youtube_period_playlistItems_period_delete(Operations.youtube_period_playlistItems_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/get(youtube.playlists.list)`.
    public func youtube_period_playlists_period_list(
        query: Operations.youtube_period_playlists_period_list.Input.Query,
        headers: Operations.youtube_period_playlists_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_playlists_period_list.Output {
        try await youtube_period_playlists_period_list(Operations.youtube_period_playlists_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/post(youtube.playlists.insert)`.
    public func youtube_period_playlists_period_insert(
        query: Operations.youtube_period_playlists_period_insert.Input.Query,
        headers: Operations.youtube_period_playlists_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_playlists_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlists_period_insert.Output {
        try await youtube_period_playlists_period_insert(Operations.youtube_period_playlists_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/put(youtube.playlists.update)`.
    public func youtube_period_playlists_period_update(
        query: Operations.youtube_period_playlists_period_update.Input.Query,
        headers: Operations.youtube_period_playlists_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_playlists_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_playlists_period_update.Output {
        try await youtube_period_playlists_period_update(Operations.youtube_period_playlists_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/delete(youtube.playlists.delete)`.
    public func youtube_period_playlists_period_delete(query: Operations.youtube_period_playlists_period_delete.Input.Query) async throws -> Operations.youtube_period_playlists_period_delete.Output {
        try await youtube_period_playlists_period_delete(Operations.youtube_period_playlists_period_delete.Input(query: query))
    }
    /// Retrieves a list of search resources
    ///
    /// - Remark: HTTP `GET /youtube/v3/search`.
    /// - Remark: Generated from `#/paths//youtube/v3/search/get(youtube.search.list)`.
    public func youtube_period_search_period_list(
        query: Operations.youtube_period_search_period_list.Input.Query,
        headers: Operations.youtube_period_search_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_search_period_list.Output {
        try await youtube_period_search_period_list(Operations.youtube_period_search_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/get(youtube.subscriptions.list)`.
    public func youtube_period_subscriptions_period_list(
        query: Operations.youtube_period_subscriptions_period_list.Input.Query,
        headers: Operations.youtube_period_subscriptions_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_subscriptions_period_list.Output {
        try await youtube_period_subscriptions_period_list(Operations.youtube_period_subscriptions_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/post(youtube.subscriptions.insert)`.
    public func youtube_period_subscriptions_period_insert(
        query: Operations.youtube_period_subscriptions_period_insert.Input.Query,
        headers: Operations.youtube_period_subscriptions_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_subscriptions_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_subscriptions_period_insert.Output {
        try await youtube_period_subscriptions_period_insert(Operations.youtube_period_subscriptions_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/delete(youtube.subscriptions.delete)`.
    public func youtube_period_subscriptions_period_delete(query: Operations.youtube_period_subscriptions_period_delete.Input.Query) async throws -> Operations.youtube_period_subscriptions_period_delete.Output {
        try await youtube_period_subscriptions_period_delete(Operations.youtube_period_subscriptions_period_delete.Input(query: query))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/superChatEvents`.
    /// - Remark: Generated from `#/paths//youtube/v3/superChatEvents/get(youtube.superChatEvents.list)`.
    public func youtube_period_superChatEvents_period_list(
        query: Operations.youtube_period_superChatEvents_period_list.Input.Query,
        headers: Operations.youtube_period_superChatEvents_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_superChatEvents_period_list.Output {
        try await youtube_period_superChatEvents_period_list(Operations.youtube_period_superChatEvents_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// POST method.
    ///
    /// - Remark: HTTP `POST /youtube/v3/tests`.
    /// - Remark: Generated from `#/paths//youtube/v3/tests/post(youtube.tests.insert)`.
    public func youtube_period_tests_period_insert(
        query: Operations.youtube_period_tests_period_insert.Input.Query,
        headers: Operations.youtube_period_tests_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_tests_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_tests_period_insert.Output {
        try await youtube_period_tests_period_insert(Operations.youtube_period_tests_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/get(youtube.thirdPartyLinks.list)`.
    public func youtube_period_thirdPartyLinks_period_list(
        query: Operations.youtube_period_thirdPartyLinks_period_list.Input.Query,
        headers: Operations.youtube_period_thirdPartyLinks_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_thirdPartyLinks_period_list.Output {
        try await youtube_period_thirdPartyLinks_period_list(Operations.youtube_period_thirdPartyLinks_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/post(youtube.thirdPartyLinks.insert)`.
    public func youtube_period_thirdPartyLinks_period_insert(
        query: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Query,
        headers: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_thirdPartyLinks_period_insert.Output {
        try await youtube_period_thirdPartyLinks_period_insert(Operations.youtube_period_thirdPartyLinks_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/put(youtube.thirdPartyLinks.update)`.
    public func youtube_period_thirdPartyLinks_period_update(
        query: Operations.youtube_period_thirdPartyLinks_period_update.Input.Query,
        headers: Operations.youtube_period_thirdPartyLinks_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_thirdPartyLinks_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_thirdPartyLinks_period_update.Output {
        try await youtube_period_thirdPartyLinks_period_update(Operations.youtube_period_thirdPartyLinks_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/delete(youtube.thirdPartyLinks.delete)`.
    public func youtube_period_thirdPartyLinks_period_delete(query: Operations.youtube_period_thirdPartyLinks_period_delete.Input.Query) async throws -> Operations.youtube_period_thirdPartyLinks_period_delete.Output {
        try await youtube_period_thirdPartyLinks_period_delete(Operations.youtube_period_thirdPartyLinks_period_delete.Input(query: query))
    }
    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thumbnails/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/thumbnails/set/post(youtube.thumbnails.set)`.
    public func youtube_period_thumbnails_period_set(
        query: Operations.youtube_period_thumbnails_period_set.Input.Query,
        headers: Operations.youtube_period_thumbnails_period_set.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_thumbnails_period_set.Output {
        try await youtube_period_thumbnails_period_set(Operations.youtube_period_thumbnails_period_set.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoAbuseReportReasons`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoAbuseReportReasons/get(youtube.videoAbuseReportReasons.list)`.
    public func youtube_period_videoAbuseReportReasons_period_list(
        query: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Query,
        headers: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_videoAbuseReportReasons_period_list.Output {
        try await youtube_period_videoAbuseReportReasons_period_list(Operations.youtube_period_videoAbuseReportReasons_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoCategories`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoCategories/get(youtube.videoCategories.list)`.
    public func youtube_period_videoCategories_period_list(
        query: Operations.youtube_period_videoCategories_period_list.Input.Query,
        headers: Operations.youtube_period_videoCategories_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_videoCategories_period_list.Output {
        try await youtube_period_videoCategories_period_list(Operations.youtube_period_videoCategories_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/get(youtube.videos.list)`.
    public func youtube_period_videos_period_list(
        query: Operations.youtube_period_videos_period_list.Input.Query,
        headers: Operations.youtube_period_videos_period_list.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_videos_period_list.Output {
        try await youtube_period_videos_period_list(Operations.youtube_period_videos_period_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/post(youtube.videos.insert)`.
    public func youtube_period_videos_period_insert(
        query: Operations.youtube_period_videos_period_insert.Input.Query,
        headers: Operations.youtube_period_videos_period_insert.Input.Headers = .init(),
        body: Operations.youtube_period_videos_period_insert.Input.Body? = nil
    ) async throws -> Operations.youtube_period_videos_period_insert.Output {
        try await youtube_period_videos_period_insert(Operations.youtube_period_videos_period_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/put(youtube.videos.update)`.
    public func youtube_period_videos_period_update(
        query: Operations.youtube_period_videos_period_update.Input.Query,
        headers: Operations.youtube_period_videos_period_update.Input.Headers = .init(),
        body: Operations.youtube_period_videos_period_update.Input.Body? = nil
    ) async throws -> Operations.youtube_period_videos_period_update.Output {
        try await youtube_period_videos_period_update(Operations.youtube_period_videos_period_update.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/delete(youtube.videos.delete)`.
    public func youtube_period_videos_period_delete(query: Operations.youtube_period_videos_period_delete.Input.Query) async throws -> Operations.youtube_period_videos_period_delete.Output {
        try await youtube_period_videos_period_delete(Operations.youtube_period_videos_period_delete.Input(query: query))
    }
    /// Retrieves the ratings that the authorized user gave to a list of specified videos.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos/getRating`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/getRating/get(youtube.videos.getRating)`.
    public func youtube_period_videos_period_getRating(
        query: Operations.youtube_period_videos_period_getRating.Input.Query,
        headers: Operations.youtube_period_videos_period_getRating.Input.Headers = .init()
    ) async throws -> Operations.youtube_period_videos_period_getRating.Output {
        try await youtube_period_videos_period_getRating(Operations.youtube_period_videos_period_getRating.Input(
            query: query,
            headers: headers
        ))
    }
    /// Adds a like or dislike rating to a video or removes a rating from a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/rate`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/rate/post(youtube.videos.rate)`.
    public func youtube_period_videos_period_rate(query: Operations.youtube_period_videos_period_rate.Input.Query) async throws -> Operations.youtube_period_videos_period_rate.Output {
        try await youtube_period_videos_period_rate(Operations.youtube_period_videos_period_rate.Input(query: query))
    }
    /// Report abuse for a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/reportAbuse`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/reportAbuse/post(youtube.videos.reportAbuse)`.
    public func youtube_period_videos_period_reportAbuse(
        query: Operations.youtube_period_videos_period_reportAbuse.Input.Query = .init(),
        body: Operations.youtube_period_videos_period_reportAbuse.Input.Body? = nil
    ) async throws -> Operations.youtube_period_videos_period_reportAbuse.Output {
        try await youtube_period_videos_period_reportAbuse(Operations.youtube_period_videos_period_reportAbuse.Input(
            query: query,
            body: body
        ))
    }
    /// Allows upload of watermark image and setting it for a channel.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/set/post(youtube.watermarks.set)`.
    public func youtube_period_watermarks_period_set(
        query: Operations.youtube_period_watermarks_period_set.Input.Query,
        body: Operations.youtube_period_watermarks_period_set.Input.Body? = nil
    ) async throws -> Operations.youtube_period_watermarks_period_set.Output {
        try await youtube_period_watermarks_period_set(Operations.youtube_period_watermarks_period_set.Input(
            query: query,
            body: body
        ))
    }
    /// Allows removal of channel watermark.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/unset`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/unset/post(youtube.watermarks.unset)`.
    public func youtube_period_watermarks_period_unset(query: Operations.youtube_period_watermarks_period_unset.Input.Query) async throws -> Operations.youtube_period_watermarks_period_unset.Output {
        try await youtube_period_watermarks_period_unset(Operations.youtube_period_watermarks_period_unset.Input(query: query))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://youtube.googleapis.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://youtube.googleapis.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AbuseReport`.
        public struct AbuseReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AbuseReport/abuseTypes`.
            public var abuseTypes: [Components.Schemas.AbuseType]?
            /// - Remark: Generated from `#/components/schemas/AbuseReport/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AbuseReport/relatedEntities`.
            public var relatedEntities: [Components.Schemas.RelatedEntity]?
            /// - Remark: Generated from `#/components/schemas/AbuseReport/subject`.
            public var subject: Components.Schemas.Entity?
            /// Creates a new `AbuseReport`.
            ///
            /// - Parameters:
            ///   - abuseTypes:
            ///   - description:
            ///   - relatedEntities:
            ///   - subject:
            public init(
                abuseTypes: [Components.Schemas.AbuseType]? = nil,
                description: Swift.String? = nil,
                relatedEntities: [Components.Schemas.RelatedEntity]? = nil,
                subject: Components.Schemas.Entity? = nil
            ) {
                self.abuseTypes = abuseTypes
                self.description = description
                self.relatedEntities = relatedEntities
                self.subject = subject
            }
            public enum CodingKeys: String, CodingKey {
                case abuseTypes
                case description
                case relatedEntities
                case subject
            }
        }
        /// - Remark: Generated from `#/components/schemas/AbuseType`.
        public struct AbuseType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AbuseType/id`.
            public var id: Swift.String?
            /// Creates a new `AbuseType`.
            ///
            /// - Parameters:
            ///   - id:
            public init(id: Swift.String? = nil) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// Rights management policy for YouTube resources.
        ///
        /// - Remark: Generated from `#/components/schemas/AccessPolicy`.
        public struct AccessPolicy: Codable, Hashable, Sendable {
            /// The value of allowed indicates whether the access to the policy is allowed or denied by default.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessPolicy/allowed`.
            public var allowed: Swift.Bool?
            /// A list of region codes that identify countries where the default policy do not apply.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessPolicy/exception`.
            public var exception: [Swift.String]?
            /// Creates a new `AccessPolicy`.
            ///
            /// - Parameters:
            ///   - allowed: The value of allowed indicates whether the access to the policy is allowed or denied by default.
            ///   - exception: A list of region codes that identify countries where the default policy do not apply.
            public init(
                allowed: Swift.Bool? = nil,
                exception: [Swift.String]? = nil
            ) {
                self.allowed = allowed
                self.exception = exception
            }
            public enum CodingKeys: String, CodingKey {
                case allowed
                case exception
            }
        }
        /// An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.
        ///
        /// - Remark: Generated from `#/components/schemas/Activity`.
        public struct Activity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Activity/contentDetails`.
            public var contentDetails: Components.Schemas.ActivityContentDetails?
            /// Etag of this resource
            ///
            /// - Remark: Generated from `#/components/schemas/Activity/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/Activity/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
            ///
            /// - Remark: Generated from `#/components/schemas/Activity/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Activity/snippet`.
            public var snippet: Components.Schemas.ActivitySnippet?
            /// Creates a new `Activity`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource
            ///   - id: The ID that YouTube uses to uniquely identify the activity.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
            ///   - snippet:
            public init(
                contentDetails: Components.Schemas.ActivityContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.ActivitySnippet? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetails`.
        public struct ActivityContentDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/bulletin`.
            public var bulletin: Components.Schemas.ActivityContentDetailsBulletin?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/channelItem`.
            public var channelItem: Components.Schemas.ActivityContentDetailsChannelItem?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/comment`.
            public var comment: Components.Schemas.ActivityContentDetailsComment?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/favorite`.
            public var favorite: Components.Schemas.ActivityContentDetailsFavorite?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/like`.
            public var like: Components.Schemas.ActivityContentDetailsLike?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/playlistItem`.
            public var playlistItem: Components.Schemas.ActivityContentDetailsPlaylistItem?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/promotedItem`.
            public var promotedItem: Components.Schemas.ActivityContentDetailsPromotedItem?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/recommendation`.
            public var recommendation: Components.Schemas.ActivityContentDetailsRecommendation?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/social`.
            public var social: Components.Schemas.ActivityContentDetailsSocial?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/subscription`.
            public var subscription: Components.Schemas.ActivityContentDetailsSubscription?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetails/upload`.
            public var upload: Components.Schemas.ActivityContentDetailsUpload?
            /// Creates a new `ActivityContentDetails`.
            ///
            /// - Parameters:
            ///   - bulletin:
            ///   - channelItem:
            ///   - comment:
            ///   - favorite:
            ///   - like:
            ///   - playlistItem:
            ///   - promotedItem:
            ///   - recommendation:
            ///   - social:
            ///   - subscription:
            ///   - upload:
            public init(
                bulletin: Components.Schemas.ActivityContentDetailsBulletin? = nil,
                channelItem: Components.Schemas.ActivityContentDetailsChannelItem? = nil,
                comment: Components.Schemas.ActivityContentDetailsComment? = nil,
                favorite: Components.Schemas.ActivityContentDetailsFavorite? = nil,
                like: Components.Schemas.ActivityContentDetailsLike? = nil,
                playlistItem: Components.Schemas.ActivityContentDetailsPlaylistItem? = nil,
                promotedItem: Components.Schemas.ActivityContentDetailsPromotedItem? = nil,
                recommendation: Components.Schemas.ActivityContentDetailsRecommendation? = nil,
                social: Components.Schemas.ActivityContentDetailsSocial? = nil,
                subscription: Components.Schemas.ActivityContentDetailsSubscription? = nil,
                upload: Components.Schemas.ActivityContentDetailsUpload? = nil
            ) {
                self.bulletin = bulletin
                self.channelItem = channelItem
                self.comment = comment
                self.favorite = favorite
                self.like = like
                self.playlistItem = playlistItem
                self.promotedItem = promotedItem
                self.recommendation = recommendation
                self.social = social
                self.subscription = subscription
                self.upload = upload
            }
            public enum CodingKeys: String, CodingKey {
                case bulletin
                case channelItem
                case comment
                case favorite
                case like
                case playlistItem
                case promotedItem
                case recommendation
                case social
                case subscription
                case upload
            }
        }
        /// Details about a channel bulletin post.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsBulletin`.
        public struct ActivityContentDetailsBulletin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsBulletin/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsBulletin`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Details about a resource which was added to a channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsChannelItem`.
        public struct ActivityContentDetailsChannelItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsChannelItem/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsChannelItem`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Information about a resource that received a comment.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsComment`.
        public struct ActivityContentDetailsComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsComment/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsComment`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Information about a video that was marked as a favorite video.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsFavorite`.
        public struct ActivityContentDetailsFavorite: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsFavorite/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsFavorite`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Information about a resource that received a positive (like) rating.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsLike`.
        public struct ActivityContentDetailsLike: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsLike/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsLike`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Information about a new playlist item.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPlaylistItem`.
        public struct ActivityContentDetailsPlaylistItem: Codable, Hashable, Sendable {
            /// The value that YouTube uses to uniquely identify the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPlaylistItem/playlistId`.
            public var playlistId: Swift.String?
            /// ID of the item within the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPlaylistItem/playlistItemId`.
            public var playlistItemId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPlaylistItem/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsPlaylistItem`.
            ///
            /// - Parameters:
            ///   - playlistId: The value that YouTube uses to uniquely identify the playlist.
            ///   - playlistItemId: ID of the item within the playlist.
            ///   - resourceId:
            public init(
                playlistId: Swift.String? = nil,
                playlistItemId: Swift.String? = nil,
                resourceId: Components.Schemas.ResourceId? = nil
            ) {
                self.playlistId = playlistId
                self.playlistItemId = playlistItemId
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case playlistId
                case playlistItemId
                case resourceId
            }
        }
        /// Details about a resource which is being promoted.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem`.
        public struct ActivityContentDetailsPromotedItem: Codable, Hashable, Sendable {
            /// The URL the client should fetch to request a promoted item.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/adTag`.
            public var adTag: Swift.String?
            /// The URL the client should ping to indicate that the user clicked through on this promoted item.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/clickTrackingUrl`.
            public var clickTrackingUrl: Swift.String?
            /// The URL the client should ping to indicate that the user was shown this promoted item.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/creativeViewUrl`.
            public var creativeViewUrl: Swift.String?
            /// The type of call-to-action, a message to the user indicating action that can be taken.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/ctaType`.
            @frozen public enum ctaTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ctaTypeUnspecified = "ctaTypeUnspecified"
                case visitAdvertiserSite = "visitAdvertiserSite"
            }
            /// The type of call-to-action, a message to the user indicating action that can be taken.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/ctaType`.
            public var ctaType: Components.Schemas.ActivityContentDetailsPromotedItem.ctaTypePayload?
            /// The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/customCtaButtonText`.
            public var customCtaButtonText: Swift.String?
            /// The text description to accompany the promoted item.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/descriptionText`.
            public var descriptionText: Swift.String?
            /// The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/destinationUrl`.
            public var destinationUrl: Swift.String?
            /// The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/forecastingUrl`.
            public var forecastingUrl: [Swift.String]?
            /// The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/impressionUrl`.
            public var impressionUrl: [Swift.String]?
            /// The ID that YouTube uses to uniquely identify the promoted video.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsPromotedItem/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `ActivityContentDetailsPromotedItem`.
            ///
            /// - Parameters:
            ///   - adTag: The URL the client should fetch to request a promoted item.
            ///   - clickTrackingUrl: The URL the client should ping to indicate that the user clicked through on this promoted item.
            ///   - creativeViewUrl: The URL the client should ping to indicate that the user was shown this promoted item.
            ///   - ctaType: The type of call-to-action, a message to the user indicating action that can be taken.
            ///   - customCtaButtonText: The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
            ///   - descriptionText: The text description to accompany the promoted item.
            ///   - destinationUrl: The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
            ///   - forecastingUrl: The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
            ///   - impressionUrl: The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
            ///   - videoId: The ID that YouTube uses to uniquely identify the promoted video.
            public init(
                adTag: Swift.String? = nil,
                clickTrackingUrl: Swift.String? = nil,
                creativeViewUrl: Swift.String? = nil,
                ctaType: Components.Schemas.ActivityContentDetailsPromotedItem.ctaTypePayload? = nil,
                customCtaButtonText: Swift.String? = nil,
                descriptionText: Swift.String? = nil,
                destinationUrl: Swift.String? = nil,
                forecastingUrl: [Swift.String]? = nil,
                impressionUrl: [Swift.String]? = nil,
                videoId: Swift.String? = nil
            ) {
                self.adTag = adTag
                self.clickTrackingUrl = clickTrackingUrl
                self.creativeViewUrl = creativeViewUrl
                self.ctaType = ctaType
                self.customCtaButtonText = customCtaButtonText
                self.descriptionText = descriptionText
                self.destinationUrl = destinationUrl
                self.forecastingUrl = forecastingUrl
                self.impressionUrl = impressionUrl
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case adTag
                case clickTrackingUrl
                case creativeViewUrl
                case ctaType
                case customCtaButtonText
                case descriptionText
                case destinationUrl
                case forecastingUrl
                case impressionUrl
                case videoId
            }
        }
        /// Information that identifies the recommended resource.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsRecommendation`.
        public struct ActivityContentDetailsRecommendation: Codable, Hashable, Sendable {
            /// The reason that the resource is recommended to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsRecommendation/reason`.
            @frozen public enum reasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case reasonUnspecified = "reasonUnspecified"
                case videoFavorited = "videoFavorited"
                case videoLiked = "videoLiked"
                case videoWatched = "videoWatched"
            }
            /// The reason that the resource is recommended to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsRecommendation/reason`.
            public var reason: Components.Schemas.ActivityContentDetailsRecommendation.reasonPayload?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsRecommendation/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsRecommendation/seedResourceId`.
            public var seedResourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsRecommendation`.
            ///
            /// - Parameters:
            ///   - reason: The reason that the resource is recommended to the user.
            ///   - resourceId:
            ///   - seedResourceId:
            public init(
                reason: Components.Schemas.ActivityContentDetailsRecommendation.reasonPayload? = nil,
                resourceId: Components.Schemas.ResourceId? = nil,
                seedResourceId: Components.Schemas.ResourceId? = nil
            ) {
                self.reason = reason
                self.resourceId = resourceId
                self.seedResourceId = seedResourceId
            }
            public enum CodingKeys: String, CodingKey {
                case reason
                case resourceId
                case seedResourceId
            }
        }
        /// Details about a social network post.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial`.
        public struct ActivityContentDetailsSocial: Codable, Hashable, Sendable {
            /// The author of the social network post.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/author`.
            public var author: Swift.String?
            /// An image of the post's author.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/imageUrl`.
            public var imageUrl: Swift.String?
            /// The URL of the social network post.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/referenceUrl`.
            public var referenceUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// The name of the social network.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unspecified = "unspecified"
                case googlePlus = "googlePlus"
                case facebook = "facebook"
                case twitter = "twitter"
            }
            /// The name of the social network.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSocial/type`.
            public var _type: Components.Schemas.ActivityContentDetailsSocial._typePayload?
            /// Creates a new `ActivityContentDetailsSocial`.
            ///
            /// - Parameters:
            ///   - author: The author of the social network post.
            ///   - imageUrl: An image of the post's author.
            ///   - referenceUrl: The URL of the social network post.
            ///   - resourceId:
            ///   - _type: The name of the social network.
            public init(
                author: Swift.String? = nil,
                imageUrl: Swift.String? = nil,
                referenceUrl: Swift.String? = nil,
                resourceId: Components.Schemas.ResourceId? = nil,
                _type: Components.Schemas.ActivityContentDetailsSocial._typePayload? = nil
            ) {
                self.author = author
                self.imageUrl = imageUrl
                self.referenceUrl = referenceUrl
                self.resourceId = resourceId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case imageUrl
                case referenceUrl
                case resourceId
                case _type = "type"
            }
        }
        /// Information about a channel that a user subscribed to.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSubscription`.
        public struct ActivityContentDetailsSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsSubscription/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// Creates a new `ActivityContentDetailsSubscription`.
            ///
            /// - Parameters:
            ///   - resourceId:
            public init(resourceId: Components.Schemas.ResourceId? = nil) {
                self.resourceId = resourceId
            }
            public enum CodingKeys: String, CodingKey {
                case resourceId
            }
        }
        /// Information about the uploaded video.
        ///
        /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsUpload`.
        public struct ActivityContentDetailsUpload: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the uploaded video.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityContentDetailsUpload/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `ActivityContentDetailsUpload`.
            ///
            /// - Parameters:
            ///   - videoId: The ID that YouTube uses to uniquely identify the uploaded video.
            public init(videoId: Swift.String? = nil) {
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case videoId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActivityListResponse`.
        public struct ActivityListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/items`.
            public var items: [Components.Schemas.Activity]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivityListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `ActivityListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Activity]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
        ///
        /// - Remark: Generated from `#/components/schemas/ActivitySnippet`.
        public struct ActivitySnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the channel associated with the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/channelId`.
            public var channelId: Swift.String?
            /// Channel title for the channel responsible for this activity
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/description`.
            public var description: Swift.String?
            /// The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/groupId`.
            public var groupId: Swift.String?
            /// The date and time that the video was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The title of the resource primarily associated with the activity.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/title`.
            public var title: Swift.String?
            /// The type of activity that the resource describes.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "typeUnspecified"
                case upload = "upload"
                case like = "like"
                case favorite = "favorite"
                case comment = "comment"
                case subscription = "subscription"
                case playlistItem = "playlistItem"
                case recommendation = "recommendation"
                case bulletin = "bulletin"
                case social = "social"
                case channelItem = "channelItem"
                case promotedItem = "promotedItem"
            }
            /// The type of activity that the resource describes.
            ///
            /// - Remark: Generated from `#/components/schemas/ActivitySnippet/type`.
            public var _type: Components.Schemas.ActivitySnippet._typePayload?
            /// Creates a new `ActivitySnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel associated with the activity.
            ///   - channelTitle: Channel title for the channel responsible for this activity
            ///   - description: The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
            ///   - groupId: The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
            ///   - publishedAt: The date and time that the video was uploaded.
            ///   - thumbnails:
            ///   - title: The title of the resource primarily associated with the activity.
            ///   - _type: The type of activity that the resource describes.
            public init(
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                description: Swift.String? = nil,
                groupId: Swift.String? = nil,
                publishedAt: Foundation.Date? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil,
                _type: Components.Schemas.ActivitySnippet._typePayload? = nil
            ) {
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.description = description
                self.groupId = groupId
                self.publishedAt = publishedAt
                self.thumbnails = thumbnails
                self.title = title
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelTitle
                case description
                case groupId
                case publishedAt
                case thumbnails
                case title
                case _type = "type"
            }
        }
        /// A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
        ///
        /// - Remark: Generated from `#/components/schemas/Caption`.
        public struct Caption: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Caption/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the caption track.
            ///
            /// - Remark: Generated from `#/components/schemas/Caption/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
            ///
            /// - Remark: Generated from `#/components/schemas/Caption/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Caption/snippet`.
            public var snippet: Components.Schemas.CaptionSnippet?
            /// Creates a new `Caption`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the caption track.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.CaptionSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/CaptionListResponse`.
        public struct CaptionListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of captions that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionListResponse/items`.
            public var items: [Components.Schemas.Caption]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionListResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `CaptionListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of captions that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Caption]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// Basic details about a caption track, such as its language and name.
        ///
        /// - Remark: Generated from `#/components/schemas/CaptionSnippet`.
        public struct CaptionSnippet: Codable, Hashable, Sendable {
            /// The type of audio track associated with the caption track.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/audioTrackType`.
            @frozen public enum audioTrackTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unknown = "unknown"
                case primary = "primary"
                case commentary = "commentary"
                case descriptive = "descriptive"
            }
            /// The type of audio track associated with the caption track.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/audioTrackType`.
            public var audioTrackType: Components.Schemas.CaptionSnippet.audioTrackTypePayload?
            /// The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unknownFormat = "unknownFormat"
                case unsupportedFormat = "unsupportedFormat"
                case processingFailed = "processingFailed"
            }
            /// The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/failureReason`.
            public var failureReason: Components.Schemas.CaptionSnippet.failureReasonPayload?
            /// Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/isAutoSynced`.
            public var isAutoSynced: Swift.Bool?
            /// Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/isCC`.
            public var isCC: Swift.Bool?
            /// Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/isDraft`.
            public var isDraft: Swift.Bool?
            /// Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/isEasyReader`.
            public var isEasyReader: Swift.Bool?
            /// Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/isLarge`.
            public var isLarge: Swift.Bool?
            /// The language of the caption track. The property value is a BCP-47 language tag.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/language`.
            public var language: Swift.String?
            /// The date and time when the caption track was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/lastUpdated`.
            public var lastUpdated: Foundation.Date?
            /// The name of the caption track. The name is intended to be visible to the user as an option during playback.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/name`.
            public var name: Swift.String?
            /// The caption track's status.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case serving = "serving"
                case syncing = "syncing"
                case failed = "failed"
            }
            /// The caption track's status.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/status`.
            public var status: Components.Schemas.CaptionSnippet.statusPayload?
            /// The caption track's type.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/trackKind`.
            @frozen public enum trackKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case standard = "standard"
                case ASR = "ASR"
                case forced = "forced"
            }
            /// The caption track's type.
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/trackKind`.
            public var trackKind: Components.Schemas.CaptionSnippet.trackKindPayload?
            /// The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
            ///
            /// - Remark: Generated from `#/components/schemas/CaptionSnippet/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `CaptionSnippet`.
            ///
            /// - Parameters:
            ///   - audioTrackType: The type of audio track associated with the caption track.
            ///   - failureReason: The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
            ///   - isAutoSynced: Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
            ///   - isCC: Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
            ///   - isDraft: Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
            ///   - isEasyReader: Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
            ///   - isLarge: Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
            ///   - language: The language of the caption track. The property value is a BCP-47 language tag.
            ///   - lastUpdated: The date and time when the caption track was last updated.
            ///   - name: The name of the caption track. The name is intended to be visible to the user as an option during playback.
            ///   - status: The caption track's status.
            ///   - trackKind: The caption track's type.
            ///   - videoId: The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
            public init(
                audioTrackType: Components.Schemas.CaptionSnippet.audioTrackTypePayload? = nil,
                failureReason: Components.Schemas.CaptionSnippet.failureReasonPayload? = nil,
                isAutoSynced: Swift.Bool? = nil,
                isCC: Swift.Bool? = nil,
                isDraft: Swift.Bool? = nil,
                isEasyReader: Swift.Bool? = nil,
                isLarge: Swift.Bool? = nil,
                language: Swift.String? = nil,
                lastUpdated: Foundation.Date? = nil,
                name: Swift.String? = nil,
                status: Components.Schemas.CaptionSnippet.statusPayload? = nil,
                trackKind: Components.Schemas.CaptionSnippet.trackKindPayload? = nil,
                videoId: Swift.String? = nil
            ) {
                self.audioTrackType = audioTrackType
                self.failureReason = failureReason
                self.isAutoSynced = isAutoSynced
                self.isCC = isCC
                self.isDraft = isDraft
                self.isEasyReader = isEasyReader
                self.isLarge = isLarge
                self.language = language
                self.lastUpdated = lastUpdated
                self.name = name
                self.status = status
                self.trackKind = trackKind
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case audioTrackType
                case failureReason
                case isAutoSynced
                case isCC
                case isDraft
                case isEasyReader
                case isLarge
                case language
                case lastUpdated
                case name
                case status
                case trackKind
                case videoId
            }
        }
        /// Brief description of the live stream cdn settings.
        ///
        /// - Remark: Generated from `#/components/schemas/CdnSettings`.
        public struct CdnSettings: Codable, Hashable, Sendable {
            /// The format of the video stream that you are sending to Youtube. 
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/format`.
            @available(*, deprecated)
            public var format: Swift.String?
            /// The frame rate of the inbound video data.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/frameRate`.
            @frozen public enum frameRatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _30fps = "30fps"
                case _60fps = "60fps"
                case variable = "variable"
            }
            /// The frame rate of the inbound video data.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/frameRate`.
            public var frameRate: Components.Schemas.CdnSettings.frameRatePayload?
            /// - Remark: Generated from `#/components/schemas/CdnSettings/ingestionInfo`.
            public var ingestionInfo: Components.Schemas.IngestionInfo?
            ///  The method or protocol used to transmit the video stream.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/ingestionType`.
            @frozen public enum ingestionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rtmp = "rtmp"
                case dash = "dash"
                case webrtc = "webrtc"
                case hls = "hls"
            }
            ///  The method or protocol used to transmit the video stream.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/ingestionType`.
            public var ingestionType: Components.Schemas.CdnSettings.ingestionTypePayload?
            /// The resolution of the inbound video data.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/resolution`.
            @frozen public enum resolutionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _240p = "240p"
                case _360p = "360p"
                case _480p = "480p"
                case _720p = "720p"
                case _1080p = "1080p"
                case _1440p = "1440p"
                case _2160p = "2160p"
                case variable = "variable"
            }
            /// The resolution of the inbound video data.
            ///
            /// - Remark: Generated from `#/components/schemas/CdnSettings/resolution`.
            public var resolution: Components.Schemas.CdnSettings.resolutionPayload?
            /// Creates a new `CdnSettings`.
            ///
            /// - Parameters:
            ///   - format: The format of the video stream that you are sending to Youtube. 
            ///   - frameRate: The frame rate of the inbound video data.
            ///   - ingestionInfo:
            ///   - ingestionType:  The method or protocol used to transmit the video stream.
            ///   - resolution: The resolution of the inbound video data.
            public init(
                format: Swift.String? = nil,
                frameRate: Components.Schemas.CdnSettings.frameRatePayload? = nil,
                ingestionInfo: Components.Schemas.IngestionInfo? = nil,
                ingestionType: Components.Schemas.CdnSettings.ingestionTypePayload? = nil,
                resolution: Components.Schemas.CdnSettings.resolutionPayload? = nil
            ) {
                self.format = format
                self.frameRate = frameRate
                self.ingestionInfo = ingestionInfo
                self.ingestionType = ingestionType
                self.resolution = resolution
            }
            public enum CodingKeys: String, CodingKey {
                case format
                case frameRate
                case ingestionInfo
                case ingestionType
                case resolution
            }
        }
        /// A *channel* resource contains information about a YouTube channel.
        ///
        /// - Remark: Generated from `#/components/schemas/Channel`.
        public struct Channel: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Channel/auditDetails`.
            public var auditDetails: Components.Schemas.ChannelAuditDetails?
            /// - Remark: Generated from `#/components/schemas/Channel/brandingSettings`.
            public var brandingSettings: Components.Schemas.ChannelBrandingSettings?
            /// - Remark: Generated from `#/components/schemas/Channel/contentDetails`.
            public var contentDetails: Components.Schemas.ChannelContentDetails?
            /// - Remark: Generated from `#/components/schemas/Channel/contentOwnerDetails`.
            public var contentOwnerDetails: Components.Schemas.ChannelContentOwnerDetails?
            /// - Remark: Generated from `#/components/schemas/Channel/conversionPings`.
            public var conversionPings: Components.Schemas.ChannelConversionPings?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/kind`.
            public var kind: Swift.String?
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/localizations`.
            public struct localizationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ChannelLocalization]
                /// Creates a new `localizationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ChannelLocalization] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/localizations`.
            public var localizations: Components.Schemas.Channel.localizationsPayload?
            /// - Remark: Generated from `#/components/schemas/Channel/snippet`.
            public var snippet: Components.Schemas.ChannelSnippet?
            /// - Remark: Generated from `#/components/schemas/Channel/statistics`.
            public var statistics: Components.Schemas.ChannelStatistics?
            /// - Remark: Generated from `#/components/schemas/Channel/status`.
            public var status: Components.Schemas.ChannelStatus?
            /// - Remark: Generated from `#/components/schemas/Channel/topicDetails`.
            public var topicDetails: Components.Schemas.ChannelTopicDetails?
            /// Creates a new `Channel`.
            ///
            /// - Parameters:
            ///   - auditDetails:
            ///   - brandingSettings:
            ///   - contentDetails:
            ///   - contentOwnerDetails:
            ///   - conversionPings:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the channel.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
            ///   - localizations: Localizations for different languages
            ///   - snippet:
            ///   - statistics:
            ///   - status:
            ///   - topicDetails:
            public init(
                auditDetails: Components.Schemas.ChannelAuditDetails? = nil,
                brandingSettings: Components.Schemas.ChannelBrandingSettings? = nil,
                contentDetails: Components.Schemas.ChannelContentDetails? = nil,
                contentOwnerDetails: Components.Schemas.ChannelContentOwnerDetails? = nil,
                conversionPings: Components.Schemas.ChannelConversionPings? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                localizations: Components.Schemas.Channel.localizationsPayload? = nil,
                snippet: Components.Schemas.ChannelSnippet? = nil,
                statistics: Components.Schemas.ChannelStatistics? = nil,
                status: Components.Schemas.ChannelStatus? = nil,
                topicDetails: Components.Schemas.ChannelTopicDetails? = nil
            ) {
                self.auditDetails = auditDetails
                self.brandingSettings = brandingSettings
                self.contentDetails = contentDetails
                self.contentOwnerDetails = contentOwnerDetails
                self.conversionPings = conversionPings
                self.etag = etag
                self.id = id
                self.kind = kind
                self.localizations = localizations
                self.snippet = snippet
                self.statistics = statistics
                self.status = status
                self.topicDetails = topicDetails
            }
            public enum CodingKeys: String, CodingKey {
                case auditDetails
                case brandingSettings
                case contentDetails
                case contentOwnerDetails
                case conversionPings
                case etag
                case id
                case kind
                case localizations
                case snippet
                case statistics
                case status
                case topicDetails
            }
        }
        /// The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelAuditDetails`.
        public struct ChannelAuditDetails: Codable, Hashable, Sendable {
            /// Whether or not the channel respects the community guidelines.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelAuditDetails/communityGuidelinesGoodStanding`.
            public var communityGuidelinesGoodStanding: Swift.Bool?
            /// Whether or not the channel has any unresolved claims.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelAuditDetails/contentIdClaimsGoodStanding`.
            public var contentIdClaimsGoodStanding: Swift.Bool?
            /// Whether or not the channel has any copyright strikes.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelAuditDetails/copyrightStrikesGoodStanding`.
            public var copyrightStrikesGoodStanding: Swift.Bool?
            /// Creates a new `ChannelAuditDetails`.
            ///
            /// - Parameters:
            ///   - communityGuidelinesGoodStanding: Whether or not the channel respects the community guidelines.
            ///   - contentIdClaimsGoodStanding: Whether or not the channel has any unresolved claims.
            ///   - copyrightStrikesGoodStanding: Whether or not the channel has any copyright strikes.
            public init(
                communityGuidelinesGoodStanding: Swift.Bool? = nil,
                contentIdClaimsGoodStanding: Swift.Bool? = nil,
                copyrightStrikesGoodStanding: Swift.Bool? = nil
            ) {
                self.communityGuidelinesGoodStanding = communityGuidelinesGoodStanding
                self.contentIdClaimsGoodStanding = contentIdClaimsGoodStanding
                self.copyrightStrikesGoodStanding = copyrightStrikesGoodStanding
            }
            public enum CodingKeys: String, CodingKey {
                case communityGuidelinesGoodStanding
                case contentIdClaimsGoodStanding
                case copyrightStrikesGoodStanding
            }
        }
        /// A channel banner returned as the response to a channel_banner.insert call.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelBannerResource`.
        public struct ChannelBannerResource: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelBannerResource/etag`.
            public var etag: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelBannerResource/kind`.
            public var kind: Swift.String?
            /// The URL of this banner image.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelBannerResource/url`.
            public var url: Swift.String?
            /// Creates a new `ChannelBannerResource`.
            ///
            /// - Parameters:
            ///   - etag:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
            ///   - url: The URL of this banner image.
            public init(
                etag: Swift.String? = nil,
                kind: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.etag = etag
                self.kind = kind
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case kind
                case url
            }
        }
        /// Branding properties of a YouTube channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelBrandingSettings`.
        public struct ChannelBrandingSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelBrandingSettings/channel`.
            public var channel: Components.Schemas.ChannelSettings?
            /// Additional experimental branding properties.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelBrandingSettings/hints`.
            @available(*, deprecated)
            public var hints: [Components.Schemas.PropertyValue]?
            /// - Remark: Generated from `#/components/schemas/ChannelBrandingSettings/image`.
            public var image: Components.Schemas.ImageSettings?
            /// - Remark: Generated from `#/components/schemas/ChannelBrandingSettings/watch`.
            public var watch: Components.Schemas.WatchSettings?
            /// Creates a new `ChannelBrandingSettings`.
            ///
            /// - Parameters:
            ///   - channel:
            ///   - hints: Additional experimental branding properties.
            ///   - image:
            ///   - watch:
            public init(
                channel: Components.Schemas.ChannelSettings? = nil,
                hints: [Components.Schemas.PropertyValue]? = nil,
                image: Components.Schemas.ImageSettings? = nil,
                watch: Components.Schemas.WatchSettings? = nil
            ) {
                self.channel = channel
                self.hints = hints
                self.image = image
                self.watch = watch
            }
            public enum CodingKeys: String, CodingKey {
                case channel
                case hints
                case image
                case watch
            }
        }
        /// Details about the content of a channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelContentDetails`.
        public struct ChannelContentDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists`.
            public struct relatedPlaylistsPayload: Codable, Hashable, Sendable {
                /// The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///
                /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists/favorites`.
                @available(*, deprecated)
                public var favorites: Swift.String?
                /// The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///
                /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists/likes`.
                public var likes: Swift.String?
                /// The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
                ///
                /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists/uploads`.
                public var uploads: Swift.String?
                /// The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///
                /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists/watchHistory`.
                @available(*, deprecated)
                public var watchHistory: Swift.String?
                /// The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///
                /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists/watchLater`.
                @available(*, deprecated)
                public var watchLater: Swift.String?
                /// Creates a new `relatedPlaylistsPayload`.
                ///
                /// - Parameters:
                ///   - favorites: The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///   - likes: The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///   - uploads: The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
                ///   - watchHistory: The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                ///   - watchLater: The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
                public init(
                    favorites: Swift.String? = nil,
                    likes: Swift.String? = nil,
                    uploads: Swift.String? = nil,
                    watchHistory: Swift.String? = nil,
                    watchLater: Swift.String? = nil
                ) {
                    self.favorites = favorites
                    self.likes = likes
                    self.uploads = uploads
                    self.watchHistory = watchHistory
                    self.watchLater = watchLater
                }
                public enum CodingKeys: String, CodingKey {
                    case favorites
                    case likes
                    case uploads
                    case watchHistory
                    case watchLater
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChannelContentDetails/relatedPlaylists`.
            public var relatedPlaylists: Components.Schemas.ChannelContentDetails.relatedPlaylistsPayload?
            /// Creates a new `ChannelContentDetails`.
            ///
            /// - Parameters:
            ///   - relatedPlaylists:
            public init(relatedPlaylists: Components.Schemas.ChannelContentDetails.relatedPlaylistsPayload? = nil) {
                self.relatedPlaylists = relatedPlaylists
            }
            public enum CodingKeys: String, CodingKey {
                case relatedPlaylists
            }
        }
        /// The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelContentOwnerDetails`.
        public struct ChannelContentOwnerDetails: Codable, Hashable, Sendable {
            /// The ID of the content owner linked to the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelContentOwnerDetails/contentOwner`.
            public var contentOwner: Swift.String?
            /// The date and time when the channel was linked to the content owner.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelContentOwnerDetails/timeLinked`.
            public var timeLinked: Foundation.Date?
            /// Creates a new `ChannelContentOwnerDetails`.
            ///
            /// - Parameters:
            ///   - contentOwner: The ID of the content owner linked to the channel.
            ///   - timeLinked: The date and time when the channel was linked to the content owner.
            public init(
                contentOwner: Swift.String? = nil,
                timeLinked: Foundation.Date? = nil
            ) {
                self.contentOwner = contentOwner
                self.timeLinked = timeLinked
            }
            public enum CodingKeys: String, CodingKey {
                case contentOwner
                case timeLinked
            }
        }
        /// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelConversionPing`.
        public struct ChannelConversionPing: Codable, Hashable, Sendable {
            /// Defines the context of the ping.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelConversionPing/context`.
            @frozen public enum contextPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case subscribe = "subscribe"
                case unsubscribe = "unsubscribe"
                case cview = "cview"
            }
            /// Defines the context of the ping.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelConversionPing/context`.
            public var context: Components.Schemas.ChannelConversionPing.contextPayload?
            /// The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelConversionPing/conversionUrl`.
            public var conversionUrl: Swift.String?
            /// Creates a new `ChannelConversionPing`.
            ///
            /// - Parameters:
            ///   - context: Defines the context of the ping.
            ///   - conversionUrl: The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
            public init(
                context: Components.Schemas.ChannelConversionPing.contextPayload? = nil,
                conversionUrl: Swift.String? = nil
            ) {
                self.context = context
                self.conversionUrl = conversionUrl
            }
            public enum CodingKeys: String, CodingKey {
                case context
                case conversionUrl
            }
        }
        /// The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelConversionPings`.
        public struct ChannelConversionPings: Codable, Hashable, Sendable {
            /// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelConversionPings/pings`.
            public var pings: [Components.Schemas.ChannelConversionPing]?
            /// Creates a new `ChannelConversionPings`.
            ///
            /// - Parameters:
            ///   - pings: Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
            public init(pings: [Components.Schemas.ChannelConversionPing]? = nil) {
                self.pings = pings
            }
            public enum CodingKeys: String, CodingKey {
                case pings
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelListResponse`.
        public struct ChannelListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/items`.
            public var items: [Components.Schemas.Channel]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `ChannelListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Channel]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Channel localization setting
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelLocalization`.
        public struct ChannelLocalization: Codable, Hashable, Sendable {
            /// The localized strings for channel's description.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelLocalization/description`.
            public var description: Swift.String?
            /// The localized strings for channel's title.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelLocalization/title`.
            public var title: Swift.String?
            /// Creates a new `ChannelLocalization`.
            ///
            /// - Parameters:
            ///   - description: The localized strings for channel's description.
            ///   - title: The localized strings for channel's title.
            public init(
                description: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.description = description
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelProfileDetails`.
        public struct ChannelProfileDetails: Codable, Hashable, Sendable {
            /// The YouTube channel ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelProfileDetails/channelId`.
            public var channelId: Swift.String?
            /// The channel's URL.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelProfileDetails/channelUrl`.
            public var channelUrl: Swift.String?
            /// The channel's display name.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelProfileDetails/displayName`.
            public var displayName: Swift.String?
            /// The channels's avatar URL.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelProfileDetails/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// Creates a new `ChannelProfileDetails`.
            ///
            /// - Parameters:
            ///   - channelId: The YouTube channel ID.
            ///   - channelUrl: The channel's URL.
            ///   - displayName: The channel's display name.
            ///   - profileImageUrl: The channels's avatar URL.
            public init(
                channelId: Swift.String? = nil,
                channelUrl: Swift.String? = nil,
                displayName: Swift.String? = nil,
                profileImageUrl: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelUrl = channelUrl
                self.displayName = displayName
                self.profileImageUrl = profileImageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelUrl
                case displayName
                case profileImageUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelSection`.
        public struct ChannelSection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelSection/contentDetails`.
            public var contentDetails: Components.Schemas.ChannelSectionContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSection/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSection/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSection/kind`.
            public var kind: Swift.String?
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSection/localizations`.
            @available(*, deprecated)
            public struct localizationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ChannelSectionLocalization]
                /// Creates a new `localizationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ChannelSectionLocalization] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSection/localizations`.
            @available(*, deprecated)
            public var localizations: Components.Schemas.ChannelSection.localizationsPayload?
            /// - Remark: Generated from `#/components/schemas/ChannelSection/snippet`.
            public var snippet: Components.Schemas.ChannelSectionSnippet?
            /// - Remark: Generated from `#/components/schemas/ChannelSection/targeting`.
            public var targeting: Components.Schemas.ChannelSectionTargeting?
            /// Creates a new `ChannelSection`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the channel section.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
            ///   - localizations: Localizations for different languages
            ///   - snippet:
            ///   - targeting:
            public init(
                contentDetails: Components.Schemas.ChannelSectionContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                localizations: Components.Schemas.ChannelSection.localizationsPayload? = nil,
                snippet: Components.Schemas.ChannelSectionSnippet? = nil,
                targeting: Components.Schemas.ChannelSectionTargeting? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.localizations = localizations
                self.snippet = snippet
                self.targeting = targeting
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case localizations
                case snippet
                case targeting
            }
        }
        /// Details about a channelsection, including playlists and channels.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSectionContentDetails`.
        public struct ChannelSectionContentDetails: Codable, Hashable, Sendable {
            /// The channel ids for type multiple_channels.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionContentDetails/channels`.
            public var channels: [Swift.String]?
            /// The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionContentDetails/playlists`.
            public var playlists: [Swift.String]?
            /// Creates a new `ChannelSectionContentDetails`.
            ///
            /// - Parameters:
            ///   - channels: The channel ids for type multiple_channels.
            ///   - playlists: The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
            public init(
                channels: [Swift.String]? = nil,
                playlists: [Swift.String]? = nil
            ) {
                self.channels = channels
                self.playlists = playlists
            }
            public enum CodingKeys: String, CodingKey {
                case channels
                case playlists
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse`.
        public struct ChannelSectionListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of ChannelSections that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse/items`.
            public var items: [Components.Schemas.ChannelSection]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `ChannelSectionListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of ChannelSections that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.ChannelSection]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// ChannelSection localization setting
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSectionLocalization`.
        public struct ChannelSectionLocalization: Codable, Hashable, Sendable {
            /// The localized strings for channel section's title.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionLocalization/title`.
            @available(*, deprecated)
            public var title: Swift.String?
            /// Creates a new `ChannelSectionLocalization`.
            ///
            /// - Parameters:
            ///   - title: The localized strings for channel section's title.
            public init(title: Swift.String? = nil) {
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case title
            }
        }
        /// Basic details about a channel section, including title, style and position.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet`.
        public struct ChannelSectionSnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the channel that published the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/channelId`.
            public var channelId: Swift.String?
            /// The language of the channel section's default title and description.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/defaultLanguage`.
            @available(*, deprecated)
            public var defaultLanguage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/localized`.
            public var localized: Components.Schemas.ChannelSectionLocalization?
            /// The position of the channel section in the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/position`.
            public var position: Swift.Int?
            /// The style of the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/style`.
            @frozen public enum stylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case channelsectionStyleUnspecified = "channelsectionStyleUnspecified"
                case horizontalRow = "horizontalRow"
                case verticalList = "verticalList"
            }
            /// The style of the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/style`.
            @available(*, deprecated)
            public var style: Components.Schemas.ChannelSectionSnippet.stylePayload?
            /// The channel section's title for multiple_playlists and multiple_channels.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/title`.
            public var title: Swift.String?
            /// The type of the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case channelsectionTypeUndefined = "channelsectionTypeUndefined"
                case singlePlaylist = "singlePlaylist"
                case multiplePlaylists = "multiplePlaylists"
                case popularUploads = "popularUploads"
                case recentUploads = "recentUploads"
                case likes = "likes"
                case allPlaylists = "allPlaylists"
                case likedPlaylists = "likedPlaylists"
                case recentPosts = "recentPosts"
                case recentActivity = "recentActivity"
                case liveEvents = "liveEvents"
                case upcomingEvents = "upcomingEvents"
                case completedEvents = "completedEvents"
                case multipleChannels = "multipleChannels"
                case postedVideos = "postedVideos"
                case postedPlaylists = "postedPlaylists"
                case subscriptions = "subscriptions"
            }
            /// The type of the channel section.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionSnippet/type`.
            public var _type: Components.Schemas.ChannelSectionSnippet._typePayload?
            /// Creates a new `ChannelSectionSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel that published the channel section.
            ///   - defaultLanguage: The language of the channel section's default title and description.
            ///   - localized:
            ///   - position: The position of the channel section in the channel.
            ///   - style: The style of the channel section.
            ///   - title: The channel section's title for multiple_playlists and multiple_channels.
            ///   - _type: The type of the channel section.
            public init(
                channelId: Swift.String? = nil,
                defaultLanguage: Swift.String? = nil,
                localized: Components.Schemas.ChannelSectionLocalization? = nil,
                position: Swift.Int? = nil,
                style: Components.Schemas.ChannelSectionSnippet.stylePayload? = nil,
                title: Swift.String? = nil,
                _type: Components.Schemas.ChannelSectionSnippet._typePayload? = nil
            ) {
                self.channelId = channelId
                self.defaultLanguage = defaultLanguage
                self.localized = localized
                self.position = position
                self.style = style
                self.title = title
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case defaultLanguage
                case localized
                case position
                case style
                case title
                case _type = "type"
            }
        }
        /// ChannelSection targeting setting.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSectionTargeting`.
        public struct ChannelSectionTargeting: Codable, Hashable, Sendable {
            /// The country the channel section is targeting.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionTargeting/countries`.
            @available(*, deprecated)
            public var countries: [Swift.String]?
            /// The language the channel section is targeting.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionTargeting/languages`.
            @available(*, deprecated)
            public var languages: [Swift.String]?
            /// The region the channel section is targeting.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSectionTargeting/regions`.
            @available(*, deprecated)
            public var regions: [Swift.String]?
            /// Creates a new `ChannelSectionTargeting`.
            ///
            /// - Parameters:
            ///   - countries: The country the channel section is targeting.
            ///   - languages: The language the channel section is targeting.
            ///   - regions: The region the channel section is targeting.
            public init(
                countries: [Swift.String]? = nil,
                languages: [Swift.String]? = nil,
                regions: [Swift.String]? = nil
            ) {
                self.countries = countries
                self.languages = languages
                self.regions = regions
            }
            public enum CodingKeys: String, CodingKey {
                case countries
                case languages
                case regions
            }
        }
        /// Branding properties for the channel view.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSettings`.
        public struct ChannelSettings: Codable, Hashable, Sendable {
            /// The country of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/country`.
            public var country: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/defaultLanguage`.
            public var defaultLanguage: Swift.String?
            /// Which content tab users should see when viewing the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/defaultTab`.
            @available(*, deprecated)
            public var defaultTab: Swift.String?
            /// Specifies the channel description.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/description`.
            public var description: Swift.String?
            /// Title for the featured channels tab.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/featuredChannelsTitle`.
            @available(*, deprecated)
            public var featuredChannelsTitle: Swift.String?
            /// The list of featured channels.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/featuredChannelsUrls`.
            @available(*, deprecated)
            public var featuredChannelsUrls: [Swift.String]?
            /// Lists keywords associated with the channel, comma-separated.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/keywords`.
            public var keywords: Swift.String?
            /// Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/moderateComments`.
            public var moderateComments: Swift.Bool?
            /// A prominent color that can be rendered on this channel page.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/profileColor`.
            @available(*, deprecated)
            public var profileColor: Swift.String?
            /// Whether the tab to browse the videos should be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/showBrowseView`.
            @available(*, deprecated)
            public var showBrowseView: Swift.Bool?
            /// Whether related channels should be proposed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/showRelatedChannels`.
            @available(*, deprecated)
            public var showRelatedChannels: Swift.Bool?
            /// Specifies the channel title.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/title`.
            public var title: Swift.String?
            /// The ID for a Google Analytics account to track and measure traffic to the channels.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/trackingAnalyticsAccountId`.
            public var trackingAnalyticsAccountId: Swift.String?
            /// The trailer of the channel, for users that are not subscribers.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSettings/unsubscribedTrailer`.
            public var unsubscribedTrailer: Swift.String?
            /// Creates a new `ChannelSettings`.
            ///
            /// - Parameters:
            ///   - country: The country of the channel.
            ///   - defaultLanguage:
            ///   - defaultTab: Which content tab users should see when viewing the channel.
            ///   - description: Specifies the channel description.
            ///   - featuredChannelsTitle: Title for the featured channels tab.
            ///   - featuredChannelsUrls: The list of featured channels.
            ///   - keywords: Lists keywords associated with the channel, comma-separated.
            ///   - moderateComments: Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
            ///   - profileColor: A prominent color that can be rendered on this channel page.
            ///   - showBrowseView: Whether the tab to browse the videos should be displayed.
            ///   - showRelatedChannels: Whether related channels should be proposed.
            ///   - title: Specifies the channel title.
            ///   - trackingAnalyticsAccountId: The ID for a Google Analytics account to track and measure traffic to the channels.
            ///   - unsubscribedTrailer: The trailer of the channel, for users that are not subscribers.
            public init(
                country: Swift.String? = nil,
                defaultLanguage: Swift.String? = nil,
                defaultTab: Swift.String? = nil,
                description: Swift.String? = nil,
                featuredChannelsTitle: Swift.String? = nil,
                featuredChannelsUrls: [Swift.String]? = nil,
                keywords: Swift.String? = nil,
                moderateComments: Swift.Bool? = nil,
                profileColor: Swift.String? = nil,
                showBrowseView: Swift.Bool? = nil,
                showRelatedChannels: Swift.Bool? = nil,
                title: Swift.String? = nil,
                trackingAnalyticsAccountId: Swift.String? = nil,
                unsubscribedTrailer: Swift.String? = nil
            ) {
                self.country = country
                self.defaultLanguage = defaultLanguage
                self.defaultTab = defaultTab
                self.description = description
                self.featuredChannelsTitle = featuredChannelsTitle
                self.featuredChannelsUrls = featuredChannelsUrls
                self.keywords = keywords
                self.moderateComments = moderateComments
                self.profileColor = profileColor
                self.showBrowseView = showBrowseView
                self.showRelatedChannels = showRelatedChannels
                self.title = title
                self.trackingAnalyticsAccountId = trackingAnalyticsAccountId
                self.unsubscribedTrailer = unsubscribedTrailer
            }
            public enum CodingKeys: String, CodingKey {
                case country
                case defaultLanguage
                case defaultTab
                case description
                case featuredChannelsTitle
                case featuredChannelsUrls
                case keywords
                case moderateComments
                case profileColor
                case showBrowseView
                case showRelatedChannels
                case title
                case trackingAnalyticsAccountId
                case unsubscribedTrailer
            }
        }
        /// Basic details about a channel, including title, description and thumbnails.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelSnippet`.
        public struct ChannelSnippet: Codable, Hashable, Sendable {
            /// The country of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/country`.
            public var country: Swift.String?
            /// The custom url of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/customUrl`.
            public var customUrl: Swift.String?
            /// The language of the channel's default title and description.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/defaultLanguage`.
            public var defaultLanguage: Swift.String?
            /// The description of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/localized`.
            public var localized: Components.Schemas.ChannelLocalization?
            /// The date and time that the channel was created.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The channel's title.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `ChannelSnippet`.
            ///
            /// - Parameters:
            ///   - country: The country of the channel.
            ///   - customUrl: The custom url of the channel.
            ///   - defaultLanguage: The language of the channel's default title and description.
            ///   - description: The description of the channel.
            ///   - localized:
            ///   - publishedAt: The date and time that the channel was created.
            ///   - thumbnails:
            ///   - title: The channel's title.
            public init(
                country: Swift.String? = nil,
                customUrl: Swift.String? = nil,
                defaultLanguage: Swift.String? = nil,
                description: Swift.String? = nil,
                localized: Components.Schemas.ChannelLocalization? = nil,
                publishedAt: Foundation.Date? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.country = country
                self.customUrl = customUrl
                self.defaultLanguage = defaultLanguage
                self.description = description
                self.localized = localized
                self.publishedAt = publishedAt
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case country
                case customUrl
                case defaultLanguage
                case description
                case localized
                case publishedAt
                case thumbnails
                case title
            }
        }
        /// Statistics about a channel: number of subscribers, number of videos in the channel, etc.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelStatistics`.
        public struct ChannelStatistics: Codable, Hashable, Sendable {
            /// The number of comments for the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatistics/commentCount`.
            public var commentCount: Swift.String?
            /// Whether or not the number of subscribers is shown for this user.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatistics/hiddenSubscriberCount`.
            public var hiddenSubscriberCount: Swift.Bool?
            /// The number of subscribers that the channel has.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatistics/subscriberCount`.
            public var subscriberCount: Swift.String?
            /// The number of videos uploaded to the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatistics/videoCount`.
            public var videoCount: Swift.String?
            /// The number of times the channel has been viewed.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatistics/viewCount`.
            public var viewCount: Swift.String?
            /// Creates a new `ChannelStatistics`.
            ///
            /// - Parameters:
            ///   - commentCount: The number of comments for the channel.
            ///   - hiddenSubscriberCount: Whether or not the number of subscribers is shown for this user.
            ///   - subscriberCount: The number of subscribers that the channel has.
            ///   - videoCount: The number of videos uploaded to the channel.
            ///   - viewCount: The number of times the channel has been viewed.
            public init(
                commentCount: Swift.String? = nil,
                hiddenSubscriberCount: Swift.Bool? = nil,
                subscriberCount: Swift.String? = nil,
                videoCount: Swift.String? = nil,
                viewCount: Swift.String? = nil
            ) {
                self.commentCount = commentCount
                self.hiddenSubscriberCount = hiddenSubscriberCount
                self.subscriberCount = subscriberCount
                self.videoCount = videoCount
                self.viewCount = viewCount
            }
            public enum CodingKeys: String, CodingKey {
                case commentCount
                case hiddenSubscriberCount
                case subscriberCount
                case videoCount
                case viewCount
            }
        }
        /// JSON template for the status part of a channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelStatus`.
        public struct ChannelStatus: Codable, Hashable, Sendable {
            /// If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/isLinked`.
            public var isLinked: Swift.Bool?
            /// The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/longUploadsStatus`.
            @frozen public enum longUploadsStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case longUploadsUnspecified = "longUploadsUnspecified"
                case allowed = "allowed"
                case eligible = "eligible"
                case disallowed = "disallowed"
            }
            /// The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/longUploadsStatus`.
            public var longUploadsStatus: Components.Schemas.ChannelStatus.longUploadsStatusPayload?
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/madeForKids`.
            public var madeForKids: Swift.Bool?
            /// Privacy status of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/privacyStatus`.
            @frozen public enum privacyStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// Privacy status of the channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/privacyStatus`.
            public var privacyStatus: Components.Schemas.ChannelStatus.privacyStatusPayload?
            /// - Remark: Generated from `#/components/schemas/ChannelStatus/selfDeclaredMadeForKids`.
            public var selfDeclaredMadeForKids: Swift.Bool?
            /// Creates a new `ChannelStatus`.
            ///
            /// - Parameters:
            ///   - isLinked: If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
            ///   - longUploadsStatus: The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
            ///   - madeForKids:
            ///   - privacyStatus: Privacy status of the channel.
            ///   - selfDeclaredMadeForKids:
            public init(
                isLinked: Swift.Bool? = nil,
                longUploadsStatus: Components.Schemas.ChannelStatus.longUploadsStatusPayload? = nil,
                madeForKids: Swift.Bool? = nil,
                privacyStatus: Components.Schemas.ChannelStatus.privacyStatusPayload? = nil,
                selfDeclaredMadeForKids: Swift.Bool? = nil
            ) {
                self.isLinked = isLinked
                self.longUploadsStatus = longUploadsStatus
                self.madeForKids = madeForKids
                self.privacyStatus = privacyStatus
                self.selfDeclaredMadeForKids = selfDeclaredMadeForKids
            }
            public enum CodingKeys: String, CodingKey {
                case isLinked
                case longUploadsStatus
                case madeForKids
                case privacyStatus
                case selfDeclaredMadeForKids
            }
        }
        /// Information specific to a store on a merchandising platform linked to a YouTube channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetails`.
        public struct ChannelToStoreLinkDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetails/billingDetails`.
            public var billingDetails: Components.Schemas.ChannelToStoreLinkDetailsBillingDetails?
            /// Google Merchant Center id of the store.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetails/merchantId`.
            public var merchantId: Swift.String?
            /// Name of the store.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetails/storeName`.
            public var storeName: Swift.String?
            /// Landing page of the store.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetails/storeUrl`.
            public var storeUrl: Swift.String?
            /// Creates a new `ChannelToStoreLinkDetails`.
            ///
            /// - Parameters:
            ///   - billingDetails:
            ///   - merchantId: Google Merchant Center id of the store.
            ///   - storeName: Name of the store.
            ///   - storeUrl: Landing page of the store.
            public init(
                billingDetails: Components.Schemas.ChannelToStoreLinkDetailsBillingDetails? = nil,
                merchantId: Swift.String? = nil,
                storeName: Swift.String? = nil,
                storeUrl: Swift.String? = nil
            ) {
                self.billingDetails = billingDetails
                self.merchantId = merchantId
                self.storeName = storeName
                self.storeUrl = storeUrl
            }
            public enum CodingKeys: String, CodingKey {
                case billingDetails
                case merchantId
                case storeName
                case storeUrl
            }
        }
        /// Information specific to billing.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetailsBillingDetails`.
        public struct ChannelToStoreLinkDetailsBillingDetails: Codable, Hashable, Sendable {
            /// The current billing profile status.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetailsBillingDetails/billingStatus`.
            @frozen public enum billingStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case billingStatusUnspecified = "billingStatusUnspecified"
                case billingStatusPending = "billingStatusPending"
                case billingStatusActive = "billingStatusActive"
                case billingStatusInactive = "billingStatusInactive"
            }
            /// The current billing profile status.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelToStoreLinkDetailsBillingDetails/billingStatus`.
            public var billingStatus: Components.Schemas.ChannelToStoreLinkDetailsBillingDetails.billingStatusPayload?
            /// Creates a new `ChannelToStoreLinkDetailsBillingDetails`.
            ///
            /// - Parameters:
            ///   - billingStatus: The current billing profile status.
            public init(billingStatus: Components.Schemas.ChannelToStoreLinkDetailsBillingDetails.billingStatusPayload? = nil) {
                self.billingStatus = billingStatus
            }
            public enum CodingKeys: String, CodingKey {
                case billingStatus
            }
        }
        /// Freebase topic information related to the channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ChannelTopicDetails`.
        public struct ChannelTopicDetails: Codable, Hashable, Sendable {
            /// A list of Wikipedia URLs that describe the channel's content.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelTopicDetails/topicCategories`.
            public var topicCategories: [Swift.String]?
            /// A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
            ///
            /// - Remark: Generated from `#/components/schemas/ChannelTopicDetails/topicIds`.
            @available(*, deprecated)
            public var topicIds: [Swift.String]?
            /// Creates a new `ChannelTopicDetails`.
            ///
            /// - Parameters:
            ///   - topicCategories: A list of Wikipedia URLs that describe the channel's content.
            ///   - topicIds: A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
            public init(
                topicCategories: [Swift.String]? = nil,
                topicIds: [Swift.String]? = nil
            ) {
                self.topicCategories = topicCategories
                self.topicIds = topicIds
            }
            public enum CodingKeys: String, CodingKey {
                case topicCategories
                case topicIds
            }
        }
        /// A *comment* represents a single YouTube comment.
        ///
        /// - Remark: Generated from `#/components/schemas/Comment`.
        public struct Comment: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
            ///
            /// - Remark: Generated from `#/components/schemas/Comment/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Comment/snippet`.
            public var snippet: Components.Schemas.CommentSnippet?
            /// Creates a new `Comment`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the comment.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.CommentSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommentListResponse`.
        public struct CommentListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of comments that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/items`.
            public var items: [Components.Schemas.Comment]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `CommentListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of comments that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Comment]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case tokenPagination
                case visitorId
            }
        }
        /// Basic details about a comment, such as its author and text.
        ///
        /// - Remark: Generated from `#/components/schemas/CommentSnippet`.
        public struct CommentSnippet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/authorChannelId`.
            public var authorChannelId: Components.Schemas.CommentSnippetAuthorChannelId?
            /// Link to the author's YouTube channel, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/authorChannelUrl`.
            public var authorChannelUrl: Swift.String?
            /// The name of the user who posted the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/authorDisplayName`.
            public var authorDisplayName: Swift.String?
            /// The URL for the avatar of the user who posted the comment.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/authorProfileImageUrl`.
            public var authorProfileImageUrl: Swift.String?
            /// Whether the current viewer can rate this comment.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/canRate`.
            public var canRate: Swift.Bool?
            /// The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/channelId`.
            public var channelId: Swift.String?
            /// The total number of likes this comment has received.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/likeCount`.
            public var likeCount: Swift.Int?
            /// The comment's moderation status. Will not be set if the comments were requested through the id filter.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/moderationStatus`.
            @frozen public enum moderationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case published = "published"
                case heldForReview = "heldForReview"
                case likelySpam = "likelySpam"
                case rejected = "rejected"
            }
            /// The comment's moderation status. Will not be set if the comments were requested through the id filter.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/moderationStatus`.
            public var moderationStatus: Components.Schemas.CommentSnippet.moderationStatusPayload?
            /// The unique id of the parent comment, only set for replies.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/parentId`.
            public var parentId: Swift.String?
            /// The date and time when the comment was originally published.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/textDisplay`.
            public var textDisplay: Swift.String?
            /// The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/textOriginal`.
            public var textOriginal: Swift.String?
            /// The date and time when the comment was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/updatedAt`.
            public var updatedAt: Foundation.Date?
            /// The ID of the video the comment refers to, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/videoId`.
            public var videoId: Swift.String?
            /// The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/viewerRating`.
            @frozen public enum viewerRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case like = "like"
                case dislike = "dislike"
            }
            /// The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentSnippet/viewerRating`.
            public var viewerRating: Components.Schemas.CommentSnippet.viewerRatingPayload?
            /// Creates a new `CommentSnippet`.
            ///
            /// - Parameters:
            ///   - authorChannelId:
            ///   - authorChannelUrl: Link to the author's YouTube channel, if any.
            ///   - authorDisplayName: The name of the user who posted the comment.
            ///   - authorProfileImageUrl: The URL for the avatar of the user who posted the comment.
            ///   - canRate: Whether the current viewer can rate this comment.
            ///   - channelId: The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
            ///   - likeCount: The total number of likes this comment has received.
            ///   - moderationStatus: The comment's moderation status. Will not be set if the comments were requested through the id filter.
            ///   - parentId: The unique id of the parent comment, only set for replies.
            ///   - publishedAt: The date and time when the comment was originally published.
            ///   - textDisplay: The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
            ///   - textOriginal: The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
            ///   - updatedAt: The date and time when the comment was last updated.
            ///   - videoId: The ID of the video the comment refers to, if any.
            ///   - viewerRating: The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
            public init(
                authorChannelId: Components.Schemas.CommentSnippetAuthorChannelId? = nil,
                authorChannelUrl: Swift.String? = nil,
                authorDisplayName: Swift.String? = nil,
                authorProfileImageUrl: Swift.String? = nil,
                canRate: Swift.Bool? = nil,
                channelId: Swift.String? = nil,
                likeCount: Swift.Int? = nil,
                moderationStatus: Components.Schemas.CommentSnippet.moderationStatusPayload? = nil,
                parentId: Swift.String? = nil,
                publishedAt: Foundation.Date? = nil,
                textDisplay: Swift.String? = nil,
                textOriginal: Swift.String? = nil,
                updatedAt: Foundation.Date? = nil,
                videoId: Swift.String? = nil,
                viewerRating: Components.Schemas.CommentSnippet.viewerRatingPayload? = nil
            ) {
                self.authorChannelId = authorChannelId
                self.authorChannelUrl = authorChannelUrl
                self.authorDisplayName = authorDisplayName
                self.authorProfileImageUrl = authorProfileImageUrl
                self.canRate = canRate
                self.channelId = channelId
                self.likeCount = likeCount
                self.moderationStatus = moderationStatus
                self.parentId = parentId
                self.publishedAt = publishedAt
                self.textDisplay = textDisplay
                self.textOriginal = textOriginal
                self.updatedAt = updatedAt
                self.videoId = videoId
                self.viewerRating = viewerRating
            }
            public enum CodingKeys: String, CodingKey {
                case authorChannelId
                case authorChannelUrl
                case authorDisplayName
                case authorProfileImageUrl
                case canRate
                case channelId
                case likeCount
                case moderationStatus
                case parentId
                case publishedAt
                case textDisplay
                case textOriginal
                case updatedAt
                case videoId
                case viewerRating
            }
        }
        /// The id of the author's YouTube channel, if any.
        ///
        /// - Remark: Generated from `#/components/schemas/CommentSnippetAuthorChannelId`.
        public struct CommentSnippetAuthorChannelId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CommentSnippetAuthorChannelId/value`.
            public var value: Swift.String?
            /// Creates a new `CommentSnippetAuthorChannelId`.
            ///
            /// - Parameters:
            ///   - value:
            public init(value: Swift.String? = nil) {
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
        ///
        /// - Remark: Generated from `#/components/schemas/CommentThread`.
        public struct CommentThread: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThread/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the comment thread.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThread/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThread/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommentThread/replies`.
            public var replies: Components.Schemas.CommentThreadReplies?
            /// - Remark: Generated from `#/components/schemas/CommentThread/snippet`.
            public var snippet: Components.Schemas.CommentThreadSnippet?
            /// Creates a new `CommentThread`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the comment thread.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
            ///   - replies:
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                replies: Components.Schemas.CommentThreadReplies? = nil,
                snippet: Components.Schemas.CommentThreadSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.replies = replies
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case replies
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse`.
        public struct CommentThreadListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of comment threads that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/items`.
            public var items: [Components.Schemas.CommentThread]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `CommentThreadListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of comment threads that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.CommentThread]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case tokenPagination
                case visitorId
            }
        }
        /// Comments written in (direct or indirect) reply to the top level comment.
        ///
        /// - Remark: Generated from `#/components/schemas/CommentThreadReplies`.
        public struct CommentThreadReplies: Codable, Hashable, Sendable {
            /// A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadReplies/comments`.
            public var comments: [Components.Schemas.Comment]?
            /// Creates a new `CommentThreadReplies`.
            ///
            /// - Parameters:
            ///   - comments: A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
            public init(comments: [Components.Schemas.Comment]? = nil) {
                self.comments = comments
            }
            public enum CodingKeys: String, CodingKey {
                case comments
            }
        }
        /// Basic details about a comment thread.
        ///
        /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet`.
        public struct CommentThreadSnippet: Codable, Hashable, Sendable {
            /// Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/canReply`.
            public var canReply: Swift.Bool?
            /// The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/channelId`.
            public var channelId: Swift.String?
            /// Whether the thread (and therefore all its comments) is visible to all YouTube users.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/isPublic`.
            public var isPublic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/topLevelComment`.
            public var topLevelComment: Components.Schemas.Comment?
            /// The total number of replies (not including the top level comment).
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/totalReplyCount`.
            public var totalReplyCount: Swift.Int?
            /// The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
            ///
            /// - Remark: Generated from `#/components/schemas/CommentThreadSnippet/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `CommentThreadSnippet`.
            ///
            /// - Parameters:
            ///   - canReply: Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
            ///   - channelId: The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
            ///   - isPublic: Whether the thread (and therefore all its comments) is visible to all YouTube users.
            ///   - topLevelComment:
            ///   - totalReplyCount: The total number of replies (not including the top level comment).
            ///   - videoId: The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
            public init(
                canReply: Swift.Bool? = nil,
                channelId: Swift.String? = nil,
                isPublic: Swift.Bool? = nil,
                topLevelComment: Components.Schemas.Comment? = nil,
                totalReplyCount: Swift.Int? = nil,
                videoId: Swift.String? = nil
            ) {
                self.canReply = canReply
                self.channelId = channelId
                self.isPublic = isPublic
                self.topLevelComment = topLevelComment
                self.totalReplyCount = totalReplyCount
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case canReply
                case channelId
                case isPublic
                case topLevelComment
                case totalReplyCount
                case videoId
            }
        }
        /// Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
        ///
        /// - Remark: Generated from `#/components/schemas/ContentRating`.
        public struct ContentRating: Codable, Hashable, Sendable {
            /// The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/acbRating`.
            @frozen public enum acbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case acbUnspecified = "acbUnspecified"
                case acbE = "acbE"
                case acbP = "acbP"
                case acbC = "acbC"
                case acbG = "acbG"
                case acbPg = "acbPg"
                case acbM = "acbM"
                case acbMa15plus = "acbMa15plus"
                case acbR18plus = "acbR18plus"
                case acbUnrated = "acbUnrated"
            }
            /// The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/acbRating`.
            public var acbRating: Components.Schemas.ContentRating.acbRatingPayload?
            /// The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/agcomRating`.
            @frozen public enum agcomRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case agcomUnspecified = "agcomUnspecified"
                case agcomT = "agcomT"
                case agcomVm14 = "agcomVm14"
                case agcomVm18 = "agcomVm18"
                case agcomUnrated = "agcomUnrated"
            }
            /// The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/agcomRating`.
            public var agcomRating: Components.Schemas.ContentRating.agcomRatingPayload?
            /// The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/anatelRating`.
            @frozen public enum anatelRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case anatelUnspecified = "anatelUnspecified"
                case anatelF = "anatelF"
                case anatelI = "anatelI"
                case anatelI7 = "anatelI7"
                case anatelI10 = "anatelI10"
                case anatelI12 = "anatelI12"
                case anatelR = "anatelR"
                case anatelA = "anatelA"
                case anatelUnrated = "anatelUnrated"
            }
            /// The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/anatelRating`.
            public var anatelRating: Components.Schemas.ContentRating.anatelRatingPayload?
            /// The video's British Board of Film Classification (BBFC) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bbfcRating`.
            @frozen public enum bbfcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bbfcUnspecified = "bbfcUnspecified"
                case bbfcU = "bbfcU"
                case bbfcPg = "bbfcPg"
                case bbfc12a = "bbfc12a"
                case bbfc12 = "bbfc12"
                case bbfc15 = "bbfc15"
                case bbfc18 = "bbfc18"
                case bbfcR18 = "bbfcR18"
                case bbfcUnrated = "bbfcUnrated"
            }
            /// The video's British Board of Film Classification (BBFC) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bbfcRating`.
            public var bbfcRating: Components.Schemas.ContentRating.bbfcRatingPayload?
            /// The video's rating from Thailand's Board of Film and Video Censors.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bfvcRating`.
            @frozen public enum bfvcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bfvcUnspecified = "bfvcUnspecified"
                case bfvcG = "bfvcG"
                case bfvcE = "bfvcE"
                case bfvc13 = "bfvc13"
                case bfvc15 = "bfvc15"
                case bfvc18 = "bfvc18"
                case bfvc20 = "bfvc20"
                case bfvcB = "bfvcB"
                case bfvcUnrated = "bfvcUnrated"
            }
            /// The video's rating from Thailand's Board of Film and Video Censors.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bfvcRating`.
            public var bfvcRating: Components.Schemas.ContentRating.bfvcRatingPayload?
            /// The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bmukkRating`.
            @frozen public enum bmukkRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bmukkUnspecified = "bmukkUnspecified"
                case bmukkAa = "bmukkAa"
                case bmukk6 = "bmukk6"
                case bmukk8 = "bmukk8"
                case bmukk10 = "bmukk10"
                case bmukk12 = "bmukk12"
                case bmukk14 = "bmukk14"
                case bmukk16 = "bmukk16"
                case bmukkUnrated = "bmukkUnrated"
            }
            /// The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/bmukkRating`.
            public var bmukkRating: Components.Schemas.ContentRating.bmukkRatingPayload?
            /// Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/catvRating`.
            @frozen public enum catvRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case catvUnspecified = "catvUnspecified"
                case catvC = "catvC"
                case catvC8 = "catvC8"
                case catvG = "catvG"
                case catvPg = "catvPg"
                case catv14plus = "catv14plus"
                case catv18plus = "catv18plus"
                case catvUnrated = "catvUnrated"
                case catvE = "catvE"
            }
            /// Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/catvRating`.
            public var catvRating: Components.Schemas.ContentRating.catvRatingPayload?
            /// The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/catvfrRating`.
            @frozen public enum catvfrRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case catvfrUnspecified = "catvfrUnspecified"
                case catvfrG = "catvfrG"
                case catvfr8plus = "catvfr8plus"
                case catvfr13plus = "catvfr13plus"
                case catvfr16plus = "catvfr16plus"
                case catvfr18plus = "catvfr18plus"
                case catvfrUnrated = "catvfrUnrated"
                case catvfrE = "catvfrE"
            }
            /// The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/catvfrRating`.
            public var catvfrRating: Components.Schemas.ContentRating.catvfrRatingPayload?
            /// The video's Central Board of Film Certification (CBFC - India) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cbfcRating`.
            @frozen public enum cbfcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cbfcUnspecified = "cbfcUnspecified"
                case cbfcU = "cbfcU"
                case cbfcUA = "cbfcUA"
                case cbfcUA7plus = "cbfcUA7plus"
                case cbfcUA13plus = "cbfcUA13plus"
                case cbfcUA16plus = "cbfcUA16plus"
                case cbfcA = "cbfcA"
                case cbfcS = "cbfcS"
                case cbfcUnrated = "cbfcUnrated"
            }
            /// The video's Central Board of Film Certification (CBFC - India) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cbfcRating`.
            public var cbfcRating: Components.Schemas.ContentRating.cbfcRatingPayload?
            /// The video's Consejo de Calificación Cinematográfica (Chile) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cccRating`.
            @frozen public enum cccRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cccUnspecified = "cccUnspecified"
                case cccTe = "cccTe"
                case ccc6 = "ccc6"
                case ccc14 = "ccc14"
                case ccc18 = "ccc18"
                case ccc18v = "ccc18v"
                case ccc18s = "ccc18s"
                case cccUnrated = "cccUnrated"
            }
            /// The video's Consejo de Calificación Cinematográfica (Chile) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cccRating`.
            public var cccRating: Components.Schemas.ContentRating.cccRatingPayload?
            /// The video's rating from Portugal's Comissão de Classificação de Espect´culos.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cceRating`.
            @frozen public enum cceRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cceUnspecified = "cceUnspecified"
                case cceM4 = "cceM4"
                case cceM6 = "cceM6"
                case cceM12 = "cceM12"
                case cceM16 = "cceM16"
                case cceM18 = "cceM18"
                case cceUnrated = "cceUnrated"
                case cceM14 = "cceM14"
            }
            /// The video's rating from Portugal's Comissão de Classificação de Espect´culos.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cceRating`.
            public var cceRating: Components.Schemas.ContentRating.cceRatingPayload?
            /// The video's rating in Switzerland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/chfilmRating`.
            @frozen public enum chfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chfilmUnspecified = "chfilmUnspecified"
                case chfilm0 = "chfilm0"
                case chfilm6 = "chfilm6"
                case chfilm12 = "chfilm12"
                case chfilm16 = "chfilm16"
                case chfilm18 = "chfilm18"
                case chfilmUnrated = "chfilmUnrated"
            }
            /// The video's rating in Switzerland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/chfilmRating`.
            public var chfilmRating: Components.Schemas.ContentRating.chfilmRatingPayload?
            /// The video's Canadian Home Video Rating System (CHVRS) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/chvrsRating`.
            @frozen public enum chvrsRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chvrsUnspecified = "chvrsUnspecified"
                case chvrsG = "chvrsG"
                case chvrsPg = "chvrsPg"
                case chvrs14a = "chvrs14a"
                case chvrs18a = "chvrs18a"
                case chvrsR = "chvrsR"
                case chvrsE = "chvrsE"
                case chvrsUnrated = "chvrsUnrated"
            }
            /// The video's Canadian Home Video Rating System (CHVRS) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/chvrsRating`.
            public var chvrsRating: Components.Schemas.ContentRating.chvrsRatingPayload?
            /// The video's rating from the Commission de Contrôle des Films (Belgium).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cicfRating`.
            @frozen public enum cicfRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cicfUnspecified = "cicfUnspecified"
                case cicfE = "cicfE"
                case cicfKtEa = "cicfKtEa"
                case cicfKntEna = "cicfKntEna"
                case cicfUnrated = "cicfUnrated"
            }
            /// The video's rating from the Commission de Contrôle des Films (Belgium).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cicfRating`.
            public var cicfRating: Components.Schemas.ContentRating.cicfRatingPayload?
            /// The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cnaRating`.
            @frozen public enum cnaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cnaUnspecified = "cnaUnspecified"
                case cnaAp = "cnaAp"
                case cna12 = "cna12"
                case cna15 = "cna15"
                case cna18 = "cna18"
                case cna18plus = "cna18plus"
                case cnaUnrated = "cnaUnrated"
            }
            /// The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cnaRating`.
            public var cnaRating: Components.Schemas.ContentRating.cnaRatingPayload?
            /// Rating system in France - Commission de classification cinematographique
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cncRating`.
            @frozen public enum cncRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cncUnspecified = "cncUnspecified"
                case cncT = "cncT"
                case cnc10 = "cnc10"
                case cnc12 = "cnc12"
                case cnc16 = "cnc16"
                case cnc18 = "cnc18"
                case cncE = "cncE"
                case cncInterdiction = "cncInterdiction"
                case cncUnrated = "cncUnrated"
            }
            /// Rating system in France - Commission de classification cinematographique
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cncRating`.
            public var cncRating: Components.Schemas.ContentRating.cncRatingPayload?
            /// The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/csaRating`.
            @frozen public enum csaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case csaUnspecified = "csaUnspecified"
                case csaT = "csaT"
                case csa10 = "csa10"
                case csa12 = "csa12"
                case csa16 = "csa16"
                case csa18 = "csa18"
                case csaInterdiction = "csaInterdiction"
                case csaUnrated = "csaUnrated"
            }
            /// The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/csaRating`.
            public var csaRating: Components.Schemas.ContentRating.csaRatingPayload?
            /// The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cscfRating`.
            @frozen public enum cscfRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cscfUnspecified = "cscfUnspecified"
                case cscfAl = "cscfAl"
                case cscfA = "cscfA"
                case cscf6 = "cscf6"
                case cscf9 = "cscf9"
                case cscf12 = "cscf12"
                case cscf16 = "cscf16"
                case cscf18 = "cscf18"
                case cscfUnrated = "cscfUnrated"
            }
            /// The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/cscfRating`.
            public var cscfRating: Components.Schemas.ContentRating.cscfRatingPayload?
            /// The video's rating in the Czech Republic.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/czfilmRating`.
            @frozen public enum czfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case czfilmUnspecified = "czfilmUnspecified"
                case czfilmU = "czfilmU"
                case czfilm12 = "czfilm12"
                case czfilm14 = "czfilm14"
                case czfilm18 = "czfilm18"
                case czfilmUnrated = "czfilmUnrated"
            }
            /// The video's rating in the Czech Republic.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/czfilmRating`.
            public var czfilmRating: Components.Schemas.ContentRating.czfilmRatingPayload?
            /// The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/djctqRating`.
            @frozen public enum djctqRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case djctqUnspecified = "djctqUnspecified"
                case djctqL = "djctqL"
                case djctq10 = "djctq10"
                case djctq12 = "djctq12"
                case djctq14 = "djctq14"
                case djctq16 = "djctq16"
                case djctq18 = "djctq18"
                case djctqEr = "djctqEr"
                case djctqL10 = "djctqL10"
                case djctqL12 = "djctqL12"
                case djctqL14 = "djctqL14"
                case djctqL16 = "djctqL16"
                case djctqL18 = "djctqL18"
                case djctq1012 = "djctq1012"
                case djctq1014 = "djctq1014"
                case djctq1016 = "djctq1016"
                case djctq1018 = "djctq1018"
                case djctq1214 = "djctq1214"
                case djctq1216 = "djctq1216"
                case djctq1218 = "djctq1218"
                case djctq1416 = "djctq1416"
                case djctq1418 = "djctq1418"
                case djctq1618 = "djctq1618"
                case djctqUnrated = "djctqUnrated"
            }
            /// The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/djctqRating`.
            public var djctqRating: Components.Schemas.ContentRating.djctqRatingPayload?
            /// - Remark: Generated from `#/components/schemas/ContentRating/djctqRatingReasonsPayload`.
            @frozen public enum djctqRatingReasonsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case djctqRatingReasonUnspecified = "djctqRatingReasonUnspecified"
                case djctqViolence = "djctqViolence"
                case djctqExtremeViolence = "djctqExtremeViolence"
                case djctqSexualContent = "djctqSexualContent"
                case djctqNudity = "djctqNudity"
                case djctqSex = "djctqSex"
                case djctqExplicitSex = "djctqExplicitSex"
                case djctqDrugs = "djctqDrugs"
                case djctqLegalDrugs = "djctqLegalDrugs"
                case djctqIllegalDrugs = "djctqIllegalDrugs"
                case djctqInappropriateLanguage = "djctqInappropriateLanguage"
                case djctqCriminalActs = "djctqCriminalActs"
                case djctqImpactingContent = "djctqImpactingContent"
            }
            /// Reasons that explain why the video received its DJCQT (Brazil) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/djctqRatingReasons`.
            public typealias djctqRatingReasonsPayload = [Components.Schemas.ContentRating.djctqRatingReasonsPayloadPayload]
            /// Reasons that explain why the video received its DJCQT (Brazil) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/djctqRatingReasons`.
            public var djctqRatingReasons: Components.Schemas.ContentRating.djctqRatingReasonsPayload?
            /// Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ecbmctRating`.
            @frozen public enum ecbmctRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ecbmctUnspecified = "ecbmctUnspecified"
                case ecbmctG = "ecbmctG"
                case ecbmct7a = "ecbmct7a"
                case ecbmct7plus = "ecbmct7plus"
                case ecbmct13a = "ecbmct13a"
                case ecbmct13plus = "ecbmct13plus"
                case ecbmct15a = "ecbmct15a"
                case ecbmct15plus = "ecbmct15plus"
                case ecbmct18plus = "ecbmct18plus"
                case ecbmctUnrated = "ecbmctUnrated"
            }
            /// Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ecbmctRating`.
            public var ecbmctRating: Components.Schemas.ContentRating.ecbmctRatingPayload?
            /// The video's rating in Estonia.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/eefilmRating`.
            @frozen public enum eefilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case eefilmUnspecified = "eefilmUnspecified"
                case eefilmPere = "eefilmPere"
                case eefilmL = "eefilmL"
                case eefilmMs6 = "eefilmMs6"
                case eefilmK6 = "eefilmK6"
                case eefilmMs12 = "eefilmMs12"
                case eefilmK12 = "eefilmK12"
                case eefilmK14 = "eefilmK14"
                case eefilmK16 = "eefilmK16"
                case eefilmUnrated = "eefilmUnrated"
            }
            /// The video's rating in Estonia.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/eefilmRating`.
            public var eefilmRating: Components.Schemas.ContentRating.eefilmRatingPayload?
            /// The video's rating in Egypt.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/egfilmRating`.
            @frozen public enum egfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case egfilmUnspecified = "egfilmUnspecified"
                case egfilmGn = "egfilmGn"
                case egfilm18 = "egfilm18"
                case egfilmBn = "egfilmBn"
                case egfilmUnrated = "egfilmUnrated"
            }
            /// The video's rating in Egypt.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/egfilmRating`.
            public var egfilmRating: Components.Schemas.ContentRating.egfilmRatingPayload?
            /// The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/eirinRating`.
            @frozen public enum eirinRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case eirinUnspecified = "eirinUnspecified"
                case eirinG = "eirinG"
                case eirinPg12 = "eirinPg12"
                case eirinR15plus = "eirinR15plus"
                case eirinR18plus = "eirinR18plus"
                case eirinUnrated = "eirinUnrated"
            }
            /// The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/eirinRating`.
            public var eirinRating: Components.Schemas.ContentRating.eirinRatingPayload?
            /// The video's rating from Malaysia's Film Censorship Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fcbmRating`.
            @frozen public enum fcbmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fcbmUnspecified = "fcbmUnspecified"
                case fcbmU = "fcbmU"
                case fcbmPg13 = "fcbmPg13"
                case fcbmP13 = "fcbmP13"
                case fcbm18 = "fcbm18"
                case fcbm18sx = "fcbm18sx"
                case fcbm18pa = "fcbm18pa"
                case fcbm18sg = "fcbm18sg"
                case fcbm18pl = "fcbm18pl"
                case fcbmUnrated = "fcbmUnrated"
            }
            /// The video's rating from Malaysia's Film Censorship Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fcbmRating`.
            public var fcbmRating: Components.Schemas.ContentRating.fcbmRatingPayload?
            /// The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fcoRating`.
            @frozen public enum fcoRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fcoUnspecified = "fcoUnspecified"
                case fcoI = "fcoI"
                case fcoIia = "fcoIia"
                case fcoIib = "fcoIib"
                case fcoIi = "fcoIi"
                case fcoIii = "fcoIii"
                case fcoUnrated = "fcoUnrated"
            }
            /// The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fcoRating`.
            public var fcoRating: Components.Schemas.ContentRating.fcoRatingPayload?
            /// This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fmocRating`.
            @frozen public enum fmocRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fmocUnspecified = "fmocUnspecified"
                case fmocU = "fmocU"
                case fmoc10 = "fmoc10"
                case fmoc12 = "fmoc12"
                case fmoc16 = "fmoc16"
                case fmoc18 = "fmoc18"
                case fmocE = "fmocE"
                case fmocUnrated = "fmocUnrated"
            }
            /// This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fmocRating`.
            @available(*, deprecated)
            public var fmocRating: Components.Schemas.ContentRating.fmocRatingPayload?
            /// The video's rating from South Africa's Film and Publication Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fpbRating`.
            @frozen public enum fpbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fpbUnspecified = "fpbUnspecified"
                case fpbA = "fpbA"
                case fpbPg = "fpbPg"
                case fpb79Pg = "fpb79Pg"
                case fpb1012Pg = "fpb1012Pg"
                case fpb13 = "fpb13"
                case fpb16 = "fpb16"
                case fpb18 = "fpb18"
                case fpbX18 = "fpbX18"
                case fpbXx = "fpbXx"
                case fpbUnrated = "fpbUnrated"
                case fpb10 = "fpb10"
            }
            /// The video's rating from South Africa's Film and Publication Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fpbRating`.
            public var fpbRating: Components.Schemas.ContentRating.fpbRatingPayload?
            /// - Remark: Generated from `#/components/schemas/ContentRating/fpbRatingReasonsPayload`.
            @frozen public enum fpbRatingReasonsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fpbRatingReasonUnspecified = "fpbRatingReasonUnspecified"
                case fpbBlasphemy = "fpbBlasphemy"
                case fpbLanguage = "fpbLanguage"
                case fpbNudity = "fpbNudity"
                case fpbPrejudice = "fpbPrejudice"
                case fpbSex = "fpbSex"
                case fpbViolence = "fpbViolence"
                case fpbDrugs = "fpbDrugs"
                case fpbSexualViolence = "fpbSexualViolence"
                case fpbHorror = "fpbHorror"
                case fpbCriminalTechniques = "fpbCriminalTechniques"
                case fpbImitativeActsTechniques = "fpbImitativeActsTechniques"
            }
            /// Reasons that explain why the video received its FPB (South Africa) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fpbRatingReasons`.
            public typealias fpbRatingReasonsPayload = [Components.Schemas.ContentRating.fpbRatingReasonsPayloadPayload]
            /// Reasons that explain why the video received its FPB (South Africa) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fpbRatingReasons`.
            public var fpbRatingReasons: Components.Schemas.ContentRating.fpbRatingReasonsPayload?
            /// The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fskRating`.
            @frozen public enum fskRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case fskUnspecified = "fskUnspecified"
                case fsk0 = "fsk0"
                case fsk6 = "fsk6"
                case fsk12 = "fsk12"
                case fsk16 = "fsk16"
                case fsk18 = "fsk18"
                case fskUnrated = "fskUnrated"
            }
            /// The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/fskRating`.
            public var fskRating: Components.Schemas.ContentRating.fskRatingPayload?
            /// The video's rating in Greece.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/grfilmRating`.
            @frozen public enum grfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case grfilmUnspecified = "grfilmUnspecified"
                case grfilmK = "grfilmK"
                case grfilmE = "grfilmE"
                case grfilmK12 = "grfilmK12"
                case grfilmK13 = "grfilmK13"
                case grfilmK15 = "grfilmK15"
                case grfilmK17 = "grfilmK17"
                case grfilmK18 = "grfilmK18"
                case grfilmUnrated = "grfilmUnrated"
            }
            /// The video's rating in Greece.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/grfilmRating`.
            public var grfilmRating: Components.Schemas.ContentRating.grfilmRatingPayload?
            /// The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/icaaRating`.
            @frozen public enum icaaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case icaaUnspecified = "icaaUnspecified"
                case icaaApta = "icaaApta"
                case icaa7 = "icaa7"
                case icaa12 = "icaa12"
                case icaa13 = "icaa13"
                case icaa16 = "icaa16"
                case icaa18 = "icaa18"
                case icaaX = "icaaX"
                case icaaUnrated = "icaaUnrated"
            }
            /// The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/icaaRating`.
            public var icaaRating: Components.Schemas.ContentRating.icaaRatingPayload?
            /// The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ifcoRating`.
            @frozen public enum ifcoRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ifcoUnspecified = "ifcoUnspecified"
                case ifcoG = "ifcoG"
                case ifcoPg = "ifcoPg"
                case ifco12 = "ifco12"
                case ifco12a = "ifco12a"
                case ifco15 = "ifco15"
                case ifco15a = "ifco15a"
                case ifco16 = "ifco16"
                case ifco18 = "ifco18"
                case ifcoUnrated = "ifcoUnrated"
            }
            /// The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ifcoRating`.
            public var ifcoRating: Components.Schemas.ContentRating.ifcoRatingPayload?
            /// The video's rating in Israel.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ilfilmRating`.
            @frozen public enum ilfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ilfilmUnspecified = "ilfilmUnspecified"
                case ilfilmAa = "ilfilmAa"
                case ilfilm12 = "ilfilm12"
                case ilfilm14 = "ilfilm14"
                case ilfilm16 = "ilfilm16"
                case ilfilm18 = "ilfilm18"
                case ilfilmUnrated = "ilfilmUnrated"
            }
            /// The video's rating in Israel.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ilfilmRating`.
            public var ilfilmRating: Components.Schemas.ContentRating.ilfilmRatingPayload?
            /// The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/incaaRating`.
            @frozen public enum incaaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case incaaUnspecified = "incaaUnspecified"
                case incaaAtp = "incaaAtp"
                case incaaSam13 = "incaaSam13"
                case incaaSam16 = "incaaSam16"
                case incaaSam18 = "incaaSam18"
                case incaaC = "incaaC"
                case incaaUnrated = "incaaUnrated"
            }
            /// The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/incaaRating`.
            public var incaaRating: Components.Schemas.ContentRating.incaaRatingPayload?
            /// The video's rating from the Kenya Film Classification Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kfcbRating`.
            @frozen public enum kfcbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case kfcbUnspecified = "kfcbUnspecified"
                case kfcbG = "kfcbG"
                case kfcbPg = "kfcbPg"
                case kfcb16plus = "kfcb16plus"
                case kfcbR = "kfcbR"
                case kfcbUnrated = "kfcbUnrated"
            }
            /// The video's rating from the Kenya Film Classification Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kfcbRating`.
            public var kfcbRating: Components.Schemas.ContentRating.kfcbRatingPayload?
            /// The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kijkwijzerRating`.
            @frozen public enum kijkwijzerRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case kijkwijzerUnspecified = "kijkwijzerUnspecified"
                case kijkwijzerAl = "kijkwijzerAl"
                case kijkwijzer6 = "kijkwijzer6"
                case kijkwijzer9 = "kijkwijzer9"
                case kijkwijzer12 = "kijkwijzer12"
                case kijkwijzer16 = "kijkwijzer16"
                case kijkwijzer18 = "kijkwijzer18"
                case kijkwijzerUnrated = "kijkwijzerUnrated"
            }
            /// The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kijkwijzerRating`.
            public var kijkwijzerRating: Components.Schemas.ContentRating.kijkwijzerRatingPayload?
            /// The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kmrbRating`.
            @frozen public enum kmrbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case kmrbUnspecified = "kmrbUnspecified"
                case kmrbAll = "kmrbAll"
                case kmrb12plus = "kmrb12plus"
                case kmrb15plus = "kmrb15plus"
                case kmrbTeenr = "kmrbTeenr"
                case kmrbR = "kmrbR"
                case kmrbUnrated = "kmrbUnrated"
            }
            /// The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/kmrbRating`.
            public var kmrbRating: Components.Schemas.ContentRating.kmrbRatingPayload?
            /// The video's rating from Indonesia's Lembaga Sensor Film.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/lsfRating`.
            @frozen public enum lsfRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lsfUnspecified = "lsfUnspecified"
                case lsfSu = "lsfSu"
                case lsfA = "lsfA"
                case lsfBo = "lsfBo"
                case lsf13 = "lsf13"
                case lsfR = "lsfR"
                case lsf17 = "lsf17"
                case lsfD = "lsfD"
                case lsf21 = "lsf21"
                case lsfUnrated = "lsfUnrated"
            }
            /// The video's rating from Indonesia's Lembaga Sensor Film.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/lsfRating`.
            public var lsfRating: Components.Schemas.ContentRating.lsfRatingPayload?
            /// The video's rating from Malta's Film Age-Classification Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mccaaRating`.
            @frozen public enum mccaaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mccaaUnspecified = "mccaaUnspecified"
                case mccaaU = "mccaaU"
                case mccaaPg = "mccaaPg"
                case mccaa12a = "mccaa12a"
                case mccaa12 = "mccaa12"
                case mccaa14 = "mccaa14"
                case mccaa15 = "mccaa15"
                case mccaa16 = "mccaa16"
                case mccaa18 = "mccaa18"
                case mccaaUnrated = "mccaaUnrated"
            }
            /// The video's rating from Malta's Film Age-Classification Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mccaaRating`.
            public var mccaaRating: Components.Schemas.ContentRating.mccaaRatingPayload?
            /// The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mccypRating`.
            @frozen public enum mccypRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mccypUnspecified = "mccypUnspecified"
                case mccypA = "mccypA"
                case mccyp7 = "mccyp7"
                case mccyp11 = "mccyp11"
                case mccyp15 = "mccyp15"
                case mccypUnrated = "mccypUnrated"
            }
            /// The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mccypRating`.
            public var mccypRating: Components.Schemas.ContentRating.mccypRatingPayload?
            /// The video's rating system for Vietnam - MCST
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mcstRating`.
            @frozen public enum mcstRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mcstUnspecified = "mcstUnspecified"
                case mcstP = "mcstP"
                case mcst0 = "mcst0"
                case mcstC13 = "mcstC13"
                case mcstC16 = "mcstC16"
                case mcst16plus = "mcst16plus"
                case mcstC18 = "mcstC18"
                case mcstGPg = "mcstGPg"
                case mcstUnrated = "mcstUnrated"
            }
            /// The video's rating system for Vietnam - MCST
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mcstRating`.
            public var mcstRating: Components.Schemas.ContentRating.mcstRatingPayload?
            /// The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mdaRating`.
            @frozen public enum mdaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mdaUnspecified = "mdaUnspecified"
                case mdaG = "mdaG"
                case mdaPg = "mdaPg"
                case mdaPg13 = "mdaPg13"
                case mdaNc16 = "mdaNc16"
                case mdaM18 = "mdaM18"
                case mdaR21 = "mdaR21"
                case mdaUnrated = "mdaUnrated"
            }
            /// The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mdaRating`.
            public var mdaRating: Components.Schemas.ContentRating.mdaRatingPayload?
            /// The video's rating from Medietilsynet, the Norwegian Media Authority.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/medietilsynetRating`.
            @frozen public enum medietilsynetRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case medietilsynetUnspecified = "medietilsynetUnspecified"
                case medietilsynetA = "medietilsynetA"
                case medietilsynet6 = "medietilsynet6"
                case medietilsynet7 = "medietilsynet7"
                case medietilsynet9 = "medietilsynet9"
                case medietilsynet11 = "medietilsynet11"
                case medietilsynet12 = "medietilsynet12"
                case medietilsynet15 = "medietilsynet15"
                case medietilsynet18 = "medietilsynet18"
                case medietilsynetUnrated = "medietilsynetUnrated"
            }
            /// The video's rating from Medietilsynet, the Norwegian Media Authority.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/medietilsynetRating`.
            public var medietilsynetRating: Components.Schemas.ContentRating.medietilsynetRatingPayload?
            /// The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mekuRating`.
            @frozen public enum mekuRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mekuUnspecified = "mekuUnspecified"
                case mekuS = "mekuS"
                case meku7 = "meku7"
                case meku12 = "meku12"
                case meku16 = "meku16"
                case meku18 = "meku18"
                case mekuUnrated = "mekuUnrated"
            }
            /// The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mekuRating`.
            public var mekuRating: Components.Schemas.ContentRating.mekuRatingPayload?
            /// The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/menaMpaaRating`.
            @frozen public enum menaMpaaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case menaMpaaUnspecified = "menaMpaaUnspecified"
                case menaMpaaG = "menaMpaaG"
                case menaMpaaPg = "menaMpaaPg"
                case menaMpaaPg13 = "menaMpaaPg13"
                case menaMpaaR = "menaMpaaR"
                case menaMpaaUnrated = "menaMpaaUnrated"
            }
            /// The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/menaMpaaRating`.
            public var menaMpaaRating: Components.Schemas.ContentRating.menaMpaaRatingPayload?
            /// The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mibacRating`.
            @frozen public enum mibacRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mibacUnspecified = "mibacUnspecified"
                case mibacT = "mibacT"
                case mibacVap = "mibacVap"
                case mibacVm6 = "mibacVm6"
                case mibacVm12 = "mibacVm12"
                case mibacVm14 = "mibacVm14"
                case mibacVm16 = "mibacVm16"
                case mibacVm18 = "mibacVm18"
                case mibacUnrated = "mibacUnrated"
            }
            /// The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mibacRating`.
            public var mibacRating: Components.Schemas.ContentRating.mibacRatingPayload?
            /// The video's Ministerio de Cultura (Colombia) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mocRating`.
            @frozen public enum mocRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mocUnspecified = "mocUnspecified"
                case mocE = "mocE"
                case mocT = "mocT"
                case moc7 = "moc7"
                case moc12 = "moc12"
                case moc15 = "moc15"
                case moc18 = "moc18"
                case mocX = "mocX"
                case mocBanned = "mocBanned"
                case mocUnrated = "mocUnrated"
            }
            /// The video's Ministerio de Cultura (Colombia) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mocRating`.
            public var mocRating: Components.Schemas.ContentRating.mocRatingPayload?
            /// The video's rating from Taiwan's Ministry of Culture (文化部).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/moctwRating`.
            @frozen public enum moctwRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case moctwUnspecified = "moctwUnspecified"
                case moctwG = "moctwG"
                case moctwP = "moctwP"
                case moctwPg = "moctwPg"
                case moctwR = "moctwR"
                case moctwUnrated = "moctwUnrated"
                case moctwR12 = "moctwR12"
                case moctwR15 = "moctwR15"
            }
            /// The video's rating from Taiwan's Ministry of Culture (文化部).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/moctwRating`.
            public var moctwRating: Components.Schemas.ContentRating.moctwRatingPayload?
            /// The video's Motion Picture Association of America (MPAA) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mpaaRating`.
            @frozen public enum mpaaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mpaaUnspecified = "mpaaUnspecified"
                case mpaaG = "mpaaG"
                case mpaaPg = "mpaaPg"
                case mpaaPg13 = "mpaaPg13"
                case mpaaR = "mpaaR"
                case mpaaNc17 = "mpaaNc17"
                case mpaaX = "mpaaX"
                case mpaaUnrated = "mpaaUnrated"
            }
            /// The video's Motion Picture Association of America (MPAA) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mpaaRating`.
            public var mpaaRating: Components.Schemas.ContentRating.mpaaRatingPayload?
            /// The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mpaatRating`.
            @frozen public enum mpaatRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mpaatUnspecified = "mpaatUnspecified"
                case mpaatGb = "mpaatGb"
                case mpaatRb = "mpaatRb"
            }
            /// The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mpaatRating`.
            public var mpaatRating: Components.Schemas.ContentRating.mpaatRatingPayload?
            /// The video's rating from the Movie and Television Review and Classification Board (Philippines).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mtrcbRating`.
            @frozen public enum mtrcbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mtrcbUnspecified = "mtrcbUnspecified"
                case mtrcbG = "mtrcbG"
                case mtrcbPg = "mtrcbPg"
                case mtrcbR13 = "mtrcbR13"
                case mtrcbR16 = "mtrcbR16"
                case mtrcbR18 = "mtrcbR18"
                case mtrcbX = "mtrcbX"
                case mtrcbUnrated = "mtrcbUnrated"
            }
            /// The video's rating from the Movie and Television Review and Classification Board (Philippines).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/mtrcbRating`.
            public var mtrcbRating: Components.Schemas.ContentRating.mtrcbRatingPayload?
            /// The video's rating from the Maldives National Bureau of Classification.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nbcRating`.
            @frozen public enum nbcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nbcUnspecified = "nbcUnspecified"
                case nbcG = "nbcG"
                case nbcPg = "nbcPg"
                case nbc12plus = "nbc12plus"
                case nbc15plus = "nbc15plus"
                case nbc18plus = "nbc18plus"
                case nbc18plusr = "nbc18plusr"
                case nbcPu = "nbcPu"
                case nbcUnrated = "nbcUnrated"
            }
            /// The video's rating from the Maldives National Bureau of Classification.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nbcRating`.
            public var nbcRating: Components.Schemas.ContentRating.nbcRatingPayload?
            /// The video's rating in Poland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nbcplRating`.
            @frozen public enum nbcplRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nbcplUnspecified = "nbcplUnspecified"
                case nbcplI = "nbcplI"
                case nbcplIi = "nbcplIi"
                case nbcplIii = "nbcplIii"
                case nbcplIv = "nbcplIv"
                case nbcpl18plus = "nbcpl18plus"
                case nbcplUnrated = "nbcplUnrated"
            }
            /// The video's rating in Poland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nbcplRating`.
            public var nbcplRating: Components.Schemas.ContentRating.nbcplRatingPayload?
            /// The video's rating from the Bulgarian National Film Center.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nfrcRating`.
            @frozen public enum nfrcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nfrcUnspecified = "nfrcUnspecified"
                case nfrcA = "nfrcA"
                case nfrcB = "nfrcB"
                case nfrcC = "nfrcC"
                case nfrcD = "nfrcD"
                case nfrcX = "nfrcX"
                case nfrcUnrated = "nfrcUnrated"
            }
            /// The video's rating from the Bulgarian National Film Center.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nfrcRating`.
            public var nfrcRating: Components.Schemas.ContentRating.nfrcRatingPayload?
            /// The video's rating from Nigeria's National Film and Video Censors Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nfvcbRating`.
            @frozen public enum nfvcbRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nfvcbUnspecified = "nfvcbUnspecified"
                case nfvcbG = "nfvcbG"
                case nfvcbPg = "nfvcbPg"
                case nfvcb12 = "nfvcb12"
                case nfvcb12a = "nfvcb12a"
                case nfvcb15 = "nfvcb15"
                case nfvcb18 = "nfvcb18"
                case nfvcbRe = "nfvcbRe"
                case nfvcbUnrated = "nfvcbUnrated"
            }
            /// The video's rating from Nigeria's National Film and Video Censors Board.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nfvcbRating`.
            public var nfvcbRating: Components.Schemas.ContentRating.nfvcbRatingPayload?
            /// The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nkclvRating`.
            @frozen public enum nkclvRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nkclvUnspecified = "nkclvUnspecified"
                case nkclvU = "nkclvU"
                case nkclv7plus = "nkclv7plus"
                case nkclv12plus = "nkclv12plus"
                case nkclv16plus = "nkclv16plus"
                case nkclv18plus = "nkclv18plus"
                case nkclvUnrated = "nkclvUnrated"
            }
            /// The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nkclvRating`.
            public var nkclvRating: Components.Schemas.ContentRating.nkclvRatingPayload?
            /// The National Media Council ratings system for United Arab Emirates.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nmcRating`.
            @frozen public enum nmcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nmcUnspecified = "nmcUnspecified"
                case nmcG = "nmcG"
                case nmcPg = "nmcPg"
                case nmcPg13 = "nmcPg13"
                case nmcPg15 = "nmcPg15"
                case nmc15plus = "nmc15plus"
                case nmc18plus = "nmc18plus"
                case nmc18tc = "nmc18tc"
                case nmcUnrated = "nmcUnrated"
            }
            /// The National Media Council ratings system for United Arab Emirates.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/nmcRating`.
            public var nmcRating: Components.Schemas.ContentRating.nmcRatingPayload?
            /// The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/oflcRating`.
            @frozen public enum oflcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case oflcUnspecified = "oflcUnspecified"
                case oflcG = "oflcG"
                case oflcPg = "oflcPg"
                case oflcM = "oflcM"
                case oflcR13 = "oflcR13"
                case oflcR15 = "oflcR15"
                case oflcR16 = "oflcR16"
                case oflcR18 = "oflcR18"
                case oflcUnrated = "oflcUnrated"
                case oflcRp13 = "oflcRp13"
                case oflcRp16 = "oflcRp16"
                case oflcRp18 = "oflcRp18"
            }
            /// The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/oflcRating`.
            public var oflcRating: Components.Schemas.ContentRating.oflcRatingPayload?
            /// The video's rating in Peru.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/pefilmRating`.
            @frozen public enum pefilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pefilmUnspecified = "pefilmUnspecified"
                case pefilmPt = "pefilmPt"
                case pefilmPg = "pefilmPg"
                case pefilm14 = "pefilm14"
                case pefilm18 = "pefilm18"
                case pefilmUnrated = "pefilmUnrated"
            }
            /// The video's rating in Peru.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/pefilmRating`.
            public var pefilmRating: Components.Schemas.ContentRating.pefilmRatingPayload?
            /// The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rcnofRating`.
            @frozen public enum rcnofRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rcnofUnspecified = "rcnofUnspecified"
                case rcnofI = "rcnofI"
                case rcnofIi = "rcnofIi"
                case rcnofIii = "rcnofIii"
                case rcnofIv = "rcnofIv"
                case rcnofV = "rcnofV"
                case rcnofVi = "rcnofVi"
                case rcnofUnrated = "rcnofUnrated"
            }
            /// The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rcnofRating`.
            public var rcnofRating: Components.Schemas.ContentRating.rcnofRatingPayload?
            /// The video's rating in Venezuela.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/resorteviolenciaRating`.
            @frozen public enum resorteviolenciaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case resorteviolenciaUnspecified = "resorteviolenciaUnspecified"
                case resorteviolenciaA = "resorteviolenciaA"
                case resorteviolenciaB = "resorteviolenciaB"
                case resorteviolenciaC = "resorteviolenciaC"
                case resorteviolenciaD = "resorteviolenciaD"
                case resorteviolenciaE = "resorteviolenciaE"
                case resorteviolenciaUnrated = "resorteviolenciaUnrated"
            }
            /// The video's rating in Venezuela.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/resorteviolenciaRating`.
            public var resorteviolenciaRating: Components.Schemas.ContentRating.resorteviolenciaRatingPayload?
            /// The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rtcRating`.
            @frozen public enum rtcRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rtcUnspecified = "rtcUnspecified"
                case rtcAa = "rtcAa"
                case rtcA = "rtcA"
                case rtcB = "rtcB"
                case rtcB15 = "rtcB15"
                case rtcC = "rtcC"
                case rtcD = "rtcD"
                case rtcUnrated = "rtcUnrated"
            }
            /// The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rtcRating`.
            public var rtcRating: Components.Schemas.ContentRating.rtcRatingPayload?
            /// The video's rating from Ireland's Raidió Teilifís Éireann.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rteRating`.
            @frozen public enum rteRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rteUnspecified = "rteUnspecified"
                case rteGa = "rteGa"
                case rteCh = "rteCh"
                case rtePs = "rtePs"
                case rteMa = "rteMa"
                case rteUnrated = "rteUnrated"
            }
            /// The video's rating from Ireland's Raidió Teilifís Éireann.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/rteRating`.
            public var rteRating: Components.Schemas.ContentRating.rteRatingPayload?
            /// The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/russiaRating`.
            @frozen public enum russiaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case russiaUnspecified = "russiaUnspecified"
                case russia0 = "russia0"
                case russia6 = "russia6"
                case russia12 = "russia12"
                case russia16 = "russia16"
                case russia18 = "russia18"
                case russiaUnrated = "russiaUnrated"
            }
            /// The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/russiaRating`.
            public var russiaRating: Components.Schemas.ContentRating.russiaRatingPayload?
            /// The video's rating in Slovakia.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/skfilmRating`.
            @frozen public enum skfilmRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case skfilmUnspecified = "skfilmUnspecified"
                case skfilmG = "skfilmG"
                case skfilmP2 = "skfilmP2"
                case skfilmP5 = "skfilmP5"
                case skfilmP8 = "skfilmP8"
                case skfilmUnrated = "skfilmUnrated"
            }
            /// The video's rating in Slovakia.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/skfilmRating`.
            public var skfilmRating: Components.Schemas.ContentRating.skfilmRatingPayload?
            /// The video's rating in Iceland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/smaisRating`.
            @frozen public enum smaisRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case smaisUnspecified = "smaisUnspecified"
                case smaisL = "smaisL"
                case smais7 = "smais7"
                case smais12 = "smais12"
                case smais14 = "smais14"
                case smais16 = "smais16"
                case smais18 = "smais18"
                case smaisUnrated = "smaisUnrated"
            }
            /// The video's rating in Iceland.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/smaisRating`.
            public var smaisRating: Components.Schemas.ContentRating.smaisRatingPayload?
            /// The video's rating from Statens medieråd (Sweden's National Media Council).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/smsaRating`.
            @frozen public enum smsaRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case smsaUnspecified = "smsaUnspecified"
                case smsaA = "smsaA"
                case smsa7 = "smsa7"
                case smsa11 = "smsa11"
                case smsa15 = "smsa15"
                case smsaUnrated = "smsaUnrated"
            }
            /// The video's rating from Statens medieråd (Sweden's National Media Council).
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/smsaRating`.
            public var smsaRating: Components.Schemas.ContentRating.smsaRatingPayload?
            /// The video's TV Parental Guidelines (TVPG) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/tvpgRating`.
            @frozen public enum tvpgRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case tvpgUnspecified = "tvpgUnspecified"
                case tvpgY = "tvpgY"
                case tvpgY7 = "tvpgY7"
                case tvpgY7Fv = "tvpgY7Fv"
                case tvpgG = "tvpgG"
                case tvpgPg = "tvpgPg"
                case pg14 = "pg14"
                case tvpgMa = "tvpgMa"
                case tvpgUnrated = "tvpgUnrated"
            }
            /// The video's TV Parental Guidelines (TVPG) rating.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/tvpgRating`.
            public var tvpgRating: Components.Schemas.ContentRating.tvpgRatingPayload?
            /// A rating that YouTube uses to identify age-restricted content.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ytRating`.
            @frozen public enum ytRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ytUnspecified = "ytUnspecified"
                case ytAgeRestricted = "ytAgeRestricted"
            }
            /// A rating that YouTube uses to identify age-restricted content.
            ///
            /// - Remark: Generated from `#/components/schemas/ContentRating/ytRating`.
            public var ytRating: Components.Schemas.ContentRating.ytRatingPayload?
            /// Creates a new `ContentRating`.
            ///
            /// - Parameters:
            ///   - acbRating: The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
            ///   - agcomRating: The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
            ///   - anatelRating: The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
            ///   - bbfcRating: The video's British Board of Film Classification (BBFC) rating.
            ///   - bfvcRating: The video's rating from Thailand's Board of Film and Video Censors.
            ///   - bmukkRating: The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
            ///   - catvRating: Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///   - catvfrRating: The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
            ///   - cbfcRating: The video's Central Board of Film Certification (CBFC - India) rating.
            ///   - cccRating: The video's Consejo de Calificación Cinematográfica (Chile) rating.
            ///   - cceRating: The video's rating from Portugal's Comissão de Classificação de Espect´culos.
            ///   - chfilmRating: The video's rating in Switzerland.
            ///   - chvrsRating: The video's Canadian Home Video Rating System (CHVRS) rating.
            ///   - cicfRating: The video's rating from the Commission de Contrôle des Films (Belgium).
            ///   - cnaRating: The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
            ///   - cncRating: Rating system in France - Commission de classification cinematographique
            ///   - csaRating: The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
            ///   - cscfRating: The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
            ///   - czfilmRating: The video's rating in the Czech Republic.
            ///   - djctqRating: The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
            ///   - djctqRatingReasons: Reasons that explain why the video received its DJCQT (Brazil) rating.
            ///   - ecbmctRating: Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
            ///   - eefilmRating: The video's rating in Estonia.
            ///   - egfilmRating: The video's rating in Egypt.
            ///   - eirinRating: The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
            ///   - fcbmRating: The video's rating from Malaysia's Film Censorship Board.
            ///   - fcoRating: The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
            ///   - fmocRating: This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
            ///   - fpbRating: The video's rating from South Africa's Film and Publication Board.
            ///   - fpbRatingReasons: Reasons that explain why the video received its FPB (South Africa) rating.
            ///   - fskRating: The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
            ///   - grfilmRating: The video's rating in Greece.
            ///   - icaaRating: The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
            ///   - ifcoRating: The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
            ///   - ilfilmRating: The video's rating in Israel.
            ///   - incaaRating: The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
            ///   - kfcbRating: The video's rating from the Kenya Film Classification Board.
            ///   - kijkwijzerRating: The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
            ///   - kmrbRating: The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
            ///   - lsfRating: The video's rating from Indonesia's Lembaga Sensor Film.
            ///   - mccaaRating: The video's rating from Malta's Film Age-Classification Board.
            ///   - mccypRating: The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
            ///   - mcstRating: The video's rating system for Vietnam - MCST
            ///   - mdaRating: The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
            ///   - medietilsynetRating: The video's rating from Medietilsynet, the Norwegian Media Authority.
            ///   - mekuRating: The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
            ///   - menaMpaaRating: The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
            ///   - mibacRating: The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
            ///   - mocRating: The video's Ministerio de Cultura (Colombia) rating.
            ///   - moctwRating: The video's rating from Taiwan's Ministry of Culture (文化部).
            ///   - mpaaRating: The video's Motion Picture Association of America (MPAA) rating.
            ///   - mpaatRating: The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
            ///   - mtrcbRating: The video's rating from the Movie and Television Review and Classification Board (Philippines).
            ///   - nbcRating: The video's rating from the Maldives National Bureau of Classification.
            ///   - nbcplRating: The video's rating in Poland.
            ///   - nfrcRating: The video's rating from the Bulgarian National Film Center.
            ///   - nfvcbRating: The video's rating from Nigeria's National Film and Video Censors Board.
            ///   - nkclvRating: The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
            ///   - nmcRating: The National Media Council ratings system for United Arab Emirates.
            ///   - oflcRating: The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
            ///   - pefilmRating: The video's rating in Peru.
            ///   - rcnofRating: The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
            ///   - resorteviolenciaRating: The video's rating in Venezuela.
            ///   - rtcRating: The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
            ///   - rteRating: The video's rating from Ireland's Raidió Teilifís Éireann.
            ///   - russiaRating: The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
            ///   - skfilmRating: The video's rating in Slovakia.
            ///   - smaisRating: The video's rating in Iceland.
            ///   - smsaRating: The video's rating from Statens medieråd (Sweden's National Media Council).
            ///   - tvpgRating: The video's TV Parental Guidelines (TVPG) rating.
            ///   - ytRating: A rating that YouTube uses to identify age-restricted content.
            public init(
                acbRating: Components.Schemas.ContentRating.acbRatingPayload? = nil,
                agcomRating: Components.Schemas.ContentRating.agcomRatingPayload? = nil,
                anatelRating: Components.Schemas.ContentRating.anatelRatingPayload? = nil,
                bbfcRating: Components.Schemas.ContentRating.bbfcRatingPayload? = nil,
                bfvcRating: Components.Schemas.ContentRating.bfvcRatingPayload? = nil,
                bmukkRating: Components.Schemas.ContentRating.bmukkRatingPayload? = nil,
                catvRating: Components.Schemas.ContentRating.catvRatingPayload? = nil,
                catvfrRating: Components.Schemas.ContentRating.catvfrRatingPayload? = nil,
                cbfcRating: Components.Schemas.ContentRating.cbfcRatingPayload? = nil,
                cccRating: Components.Schemas.ContentRating.cccRatingPayload? = nil,
                cceRating: Components.Schemas.ContentRating.cceRatingPayload? = nil,
                chfilmRating: Components.Schemas.ContentRating.chfilmRatingPayload? = nil,
                chvrsRating: Components.Schemas.ContentRating.chvrsRatingPayload? = nil,
                cicfRating: Components.Schemas.ContentRating.cicfRatingPayload? = nil,
                cnaRating: Components.Schemas.ContentRating.cnaRatingPayload? = nil,
                cncRating: Components.Schemas.ContentRating.cncRatingPayload? = nil,
                csaRating: Components.Schemas.ContentRating.csaRatingPayload? = nil,
                cscfRating: Components.Schemas.ContentRating.cscfRatingPayload? = nil,
                czfilmRating: Components.Schemas.ContentRating.czfilmRatingPayload? = nil,
                djctqRating: Components.Schemas.ContentRating.djctqRatingPayload? = nil,
                djctqRatingReasons: Components.Schemas.ContentRating.djctqRatingReasonsPayload? = nil,
                ecbmctRating: Components.Schemas.ContentRating.ecbmctRatingPayload? = nil,
                eefilmRating: Components.Schemas.ContentRating.eefilmRatingPayload? = nil,
                egfilmRating: Components.Schemas.ContentRating.egfilmRatingPayload? = nil,
                eirinRating: Components.Schemas.ContentRating.eirinRatingPayload? = nil,
                fcbmRating: Components.Schemas.ContentRating.fcbmRatingPayload? = nil,
                fcoRating: Components.Schemas.ContentRating.fcoRatingPayload? = nil,
                fmocRating: Components.Schemas.ContentRating.fmocRatingPayload? = nil,
                fpbRating: Components.Schemas.ContentRating.fpbRatingPayload? = nil,
                fpbRatingReasons: Components.Schemas.ContentRating.fpbRatingReasonsPayload? = nil,
                fskRating: Components.Schemas.ContentRating.fskRatingPayload? = nil,
                grfilmRating: Components.Schemas.ContentRating.grfilmRatingPayload? = nil,
                icaaRating: Components.Schemas.ContentRating.icaaRatingPayload? = nil,
                ifcoRating: Components.Schemas.ContentRating.ifcoRatingPayload? = nil,
                ilfilmRating: Components.Schemas.ContentRating.ilfilmRatingPayload? = nil,
                incaaRating: Components.Schemas.ContentRating.incaaRatingPayload? = nil,
                kfcbRating: Components.Schemas.ContentRating.kfcbRatingPayload? = nil,
                kijkwijzerRating: Components.Schemas.ContentRating.kijkwijzerRatingPayload? = nil,
                kmrbRating: Components.Schemas.ContentRating.kmrbRatingPayload? = nil,
                lsfRating: Components.Schemas.ContentRating.lsfRatingPayload? = nil,
                mccaaRating: Components.Schemas.ContentRating.mccaaRatingPayload? = nil,
                mccypRating: Components.Schemas.ContentRating.mccypRatingPayload? = nil,
                mcstRating: Components.Schemas.ContentRating.mcstRatingPayload? = nil,
                mdaRating: Components.Schemas.ContentRating.mdaRatingPayload? = nil,
                medietilsynetRating: Components.Schemas.ContentRating.medietilsynetRatingPayload? = nil,
                mekuRating: Components.Schemas.ContentRating.mekuRatingPayload? = nil,
                menaMpaaRating: Components.Schemas.ContentRating.menaMpaaRatingPayload? = nil,
                mibacRating: Components.Schemas.ContentRating.mibacRatingPayload? = nil,
                mocRating: Components.Schemas.ContentRating.mocRatingPayload? = nil,
                moctwRating: Components.Schemas.ContentRating.moctwRatingPayload? = nil,
                mpaaRating: Components.Schemas.ContentRating.mpaaRatingPayload? = nil,
                mpaatRating: Components.Schemas.ContentRating.mpaatRatingPayload? = nil,
                mtrcbRating: Components.Schemas.ContentRating.mtrcbRatingPayload? = nil,
                nbcRating: Components.Schemas.ContentRating.nbcRatingPayload? = nil,
                nbcplRating: Components.Schemas.ContentRating.nbcplRatingPayload? = nil,
                nfrcRating: Components.Schemas.ContentRating.nfrcRatingPayload? = nil,
                nfvcbRating: Components.Schemas.ContentRating.nfvcbRatingPayload? = nil,
                nkclvRating: Components.Schemas.ContentRating.nkclvRatingPayload? = nil,
                nmcRating: Components.Schemas.ContentRating.nmcRatingPayload? = nil,
                oflcRating: Components.Schemas.ContentRating.oflcRatingPayload? = nil,
                pefilmRating: Components.Schemas.ContentRating.pefilmRatingPayload? = nil,
                rcnofRating: Components.Schemas.ContentRating.rcnofRatingPayload? = nil,
                resorteviolenciaRating: Components.Schemas.ContentRating.resorteviolenciaRatingPayload? = nil,
                rtcRating: Components.Schemas.ContentRating.rtcRatingPayload? = nil,
                rteRating: Components.Schemas.ContentRating.rteRatingPayload? = nil,
                russiaRating: Components.Schemas.ContentRating.russiaRatingPayload? = nil,
                skfilmRating: Components.Schemas.ContentRating.skfilmRatingPayload? = nil,
                smaisRating: Components.Schemas.ContentRating.smaisRatingPayload? = nil,
                smsaRating: Components.Schemas.ContentRating.smsaRatingPayload? = nil,
                tvpgRating: Components.Schemas.ContentRating.tvpgRatingPayload? = nil,
                ytRating: Components.Schemas.ContentRating.ytRatingPayload? = nil
            ) {
                self.acbRating = acbRating
                self.agcomRating = agcomRating
                self.anatelRating = anatelRating
                self.bbfcRating = bbfcRating
                self.bfvcRating = bfvcRating
                self.bmukkRating = bmukkRating
                self.catvRating = catvRating
                self.catvfrRating = catvfrRating
                self.cbfcRating = cbfcRating
                self.cccRating = cccRating
                self.cceRating = cceRating
                self.chfilmRating = chfilmRating
                self.chvrsRating = chvrsRating
                self.cicfRating = cicfRating
                self.cnaRating = cnaRating
                self.cncRating = cncRating
                self.csaRating = csaRating
                self.cscfRating = cscfRating
                self.czfilmRating = czfilmRating
                self.djctqRating = djctqRating
                self.djctqRatingReasons = djctqRatingReasons
                self.ecbmctRating = ecbmctRating
                self.eefilmRating = eefilmRating
                self.egfilmRating = egfilmRating
                self.eirinRating = eirinRating
                self.fcbmRating = fcbmRating
                self.fcoRating = fcoRating
                self.fmocRating = fmocRating
                self.fpbRating = fpbRating
                self.fpbRatingReasons = fpbRatingReasons
                self.fskRating = fskRating
                self.grfilmRating = grfilmRating
                self.icaaRating = icaaRating
                self.ifcoRating = ifcoRating
                self.ilfilmRating = ilfilmRating
                self.incaaRating = incaaRating
                self.kfcbRating = kfcbRating
                self.kijkwijzerRating = kijkwijzerRating
                self.kmrbRating = kmrbRating
                self.lsfRating = lsfRating
                self.mccaaRating = mccaaRating
                self.mccypRating = mccypRating
                self.mcstRating = mcstRating
                self.mdaRating = mdaRating
                self.medietilsynetRating = medietilsynetRating
                self.mekuRating = mekuRating
                self.menaMpaaRating = menaMpaaRating
                self.mibacRating = mibacRating
                self.mocRating = mocRating
                self.moctwRating = moctwRating
                self.mpaaRating = mpaaRating
                self.mpaatRating = mpaatRating
                self.mtrcbRating = mtrcbRating
                self.nbcRating = nbcRating
                self.nbcplRating = nbcplRating
                self.nfrcRating = nfrcRating
                self.nfvcbRating = nfvcbRating
                self.nkclvRating = nkclvRating
                self.nmcRating = nmcRating
                self.oflcRating = oflcRating
                self.pefilmRating = pefilmRating
                self.rcnofRating = rcnofRating
                self.resorteviolenciaRating = resorteviolenciaRating
                self.rtcRating = rtcRating
                self.rteRating = rteRating
                self.russiaRating = russiaRating
                self.skfilmRating = skfilmRating
                self.smaisRating = smaisRating
                self.smsaRating = smsaRating
                self.tvpgRating = tvpgRating
                self.ytRating = ytRating
            }
            public enum CodingKeys: String, CodingKey {
                case acbRating
                case agcomRating
                case anatelRating
                case bbfcRating
                case bfvcRating
                case bmukkRating
                case catvRating
                case catvfrRating
                case cbfcRating
                case cccRating
                case cceRating
                case chfilmRating
                case chvrsRating
                case cicfRating
                case cnaRating
                case cncRating
                case csaRating
                case cscfRating
                case czfilmRating
                case djctqRating
                case djctqRatingReasons
                case ecbmctRating
                case eefilmRating
                case egfilmRating
                case eirinRating
                case fcbmRating
                case fcoRating
                case fmocRating
                case fpbRating
                case fpbRatingReasons
                case fskRating
                case grfilmRating
                case icaaRating
                case ifcoRating
                case ilfilmRating
                case incaaRating
                case kfcbRating
                case kijkwijzerRating
                case kmrbRating
                case lsfRating
                case mccaaRating
                case mccypRating
                case mcstRating
                case mdaRating
                case medietilsynetRating
                case mekuRating
                case menaMpaaRating
                case mibacRating
                case mocRating
                case moctwRating
                case mpaaRating
                case mpaatRating
                case mtrcbRating
                case nbcRating
                case nbcplRating
                case nfrcRating
                case nfvcbRating
                case nkclvRating
                case nmcRating
                case oflcRating
                case pefilmRating
                case rcnofRating
                case resorteviolenciaRating
                case rtcRating
                case rteRating
                case russiaRating
                case skfilmRating
                case smaisRating
                case smsaRating
                case tvpgRating
                case ytRating
            }
        }
        /// Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
        ///
        /// - Remark: Generated from `#/components/schemas/Cuepoint`.
        public struct Cuepoint: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Cuepoint/cueType`.
            @frozen public enum cueTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cueTypeUnspecified = "cueTypeUnspecified"
                case cueTypeAd = "cueTypeAd"
            }
            /// - Remark: Generated from `#/components/schemas/Cuepoint/cueType`.
            public var cueType: Components.Schemas.Cuepoint.cueTypePayload?
            /// The duration of this cuepoint.
            ///
            /// - Remark: Generated from `#/components/schemas/Cuepoint/durationSecs`.
            public var durationSecs: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Cuepoint/etag`.
            public var etag: Swift.String?
            /// The identifier for cuepoint resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Cuepoint/id`.
            public var id: Swift.String?
            /// The time when the cuepoint should be inserted by offset to the broadcast actual start time.
            ///
            /// - Remark: Generated from `#/components/schemas/Cuepoint/insertionOffsetTimeMs`.
            public var insertionOffsetTimeMs: Swift.String?
            /// The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
            ///
            /// - Remark: Generated from `#/components/schemas/Cuepoint/walltimeMs`.
            public var walltimeMs: Swift.String?
            /// Creates a new `Cuepoint`.
            ///
            /// - Parameters:
            ///   - cueType:
            ///   - durationSecs: The duration of this cuepoint.
            ///   - etag:
            ///   - id: The identifier for cuepoint resource.
            ///   - insertionOffsetTimeMs: The time when the cuepoint should be inserted by offset to the broadcast actual start time.
            ///   - walltimeMs: The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
            public init(
                cueType: Components.Schemas.Cuepoint.cueTypePayload? = nil,
                durationSecs: Swift.Int? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                insertionOffsetTimeMs: Swift.String? = nil,
                walltimeMs: Swift.String? = nil
            ) {
                self.cueType = cueType
                self.durationSecs = durationSecs
                self.etag = etag
                self.id = id
                self.insertionOffsetTimeMs = insertionOffsetTimeMs
                self.walltimeMs = walltimeMs
            }
            public enum CodingKeys: String, CodingKey {
                case cueType
                case durationSecs
                case etag
                case id
                case insertionOffsetTimeMs
                case walltimeMs
            }
        }
        /// Schedule to insert cuepoints into a broadcast by ads automator.
        ///
        /// - Remark: Generated from `#/components/schemas/CuepointSchedule`.
        public struct CuepointSchedule: Codable, Hashable, Sendable {
            /// This field is semantically required. If it is set false or not set, other fields in this message will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/CuepointSchedule/enabled`.
            public var enabled: Swift.Bool?
            /// If set, automatic cuepoint insertion is paused until this timestamp ("No Ad Zone"). The value is specified in ISO 8601 format.
            ///
            /// - Remark: Generated from `#/components/schemas/CuepointSchedule/pauseAdsUntil`.
            public var pauseAdsUntil: Swift.String?
            /// Interval frequency in seconds that api uses to insert cuepoints automatically.
            ///
            /// - Remark: Generated from `#/components/schemas/CuepointSchedule/repeatIntervalSecs`.
            public var repeatIntervalSecs: Swift.Int32?
            /// The strategy to use when scheduling cuepoints.
            ///
            /// - Remark: Generated from `#/components/schemas/CuepointSchedule/scheduleStrategy`.
            @frozen public enum scheduleStrategyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case scheduleStrategyUnspecified = "scheduleStrategyUnspecified"
                case concurrent = "concurrent"
                case nonConcurrent = "nonConcurrent"
            }
            /// The strategy to use when scheduling cuepoints.
            ///
            /// - Remark: Generated from `#/components/schemas/CuepointSchedule/scheduleStrategy`.
            public var scheduleStrategy: Components.Schemas.CuepointSchedule.scheduleStrategyPayload?
            /// Creates a new `CuepointSchedule`.
            ///
            /// - Parameters:
            ///   - enabled: This field is semantically required. If it is set false or not set, other fields in this message will be ignored.
            ///   - pauseAdsUntil: If set, automatic cuepoint insertion is paused until this timestamp ("No Ad Zone"). The value is specified in ISO 8601 format.
            ///   - repeatIntervalSecs: Interval frequency in seconds that api uses to insert cuepoints automatically.
            ///   - scheduleStrategy: The strategy to use when scheduling cuepoints.
            public init(
                enabled: Swift.Bool? = nil,
                pauseAdsUntil: Swift.String? = nil,
                repeatIntervalSecs: Swift.Int32? = nil,
                scheduleStrategy: Components.Schemas.CuepointSchedule.scheduleStrategyPayload? = nil
            ) {
                self.enabled = enabled
                self.pauseAdsUntil = pauseAdsUntil
                self.repeatIntervalSecs = repeatIntervalSecs
                self.scheduleStrategy = scheduleStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
                case pauseAdsUntil
                case repeatIntervalSecs
                case scheduleStrategy
            }
        }
        /// - Remark: Generated from `#/components/schemas/Entity`.
        public struct Entity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Entity/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Entity/typeId`.
            public var typeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Entity/url`.
            public var url: Swift.String?
            /// Creates a new `Entity`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - typeId:
            ///   - url:
            public init(
                id: Swift.String? = nil,
                typeId: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.id = id
                self.typeId = typeId
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case typeId
                case url
            }
        }
        /// Geographical coordinates of a point, in WGS84.
        ///
        /// - Remark: Generated from `#/components/schemas/GeoPoint`.
        public struct GeoPoint: Codable, Hashable, Sendable {
            /// Altitude above the reference ellipsoid, in meters.
            ///
            /// - Remark: Generated from `#/components/schemas/GeoPoint/altitude`.
            public var altitude: Swift.Double?
            /// Latitude in degrees.
            ///
            /// - Remark: Generated from `#/components/schemas/GeoPoint/latitude`.
            public var latitude: Swift.Double?
            /// Longitude in degrees.
            ///
            /// - Remark: Generated from `#/components/schemas/GeoPoint/longitude`.
            public var longitude: Swift.Double?
            /// Creates a new `GeoPoint`.
            ///
            /// - Parameters:
            ///   - altitude: Altitude above the reference ellipsoid, in meters.
            ///   - latitude: Latitude in degrees.
            ///   - longitude: Longitude in degrees.
            public init(
                altitude: Swift.Double? = nil,
                latitude: Swift.Double? = nil,
                longitude: Swift.Double? = nil
            ) {
                self.altitude = altitude
                self.latitude = latitude
                self.longitude = longitude
            }
            public enum CodingKeys: String, CodingKey {
                case altitude
                case latitude
                case longitude
            }
        }
        /// An *i18nLanguage* resource identifies a UI language currently supported by YouTube.
        ///
        /// - Remark: Generated from `#/components/schemas/I18nLanguage`.
        public struct I18nLanguage: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguage/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the i18n language.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguage/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguage/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/I18nLanguage/snippet`.
            public var snippet: Components.Schemas.I18nLanguageSnippet?
            /// Creates a new `I18nLanguage`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the i18n language.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.I18nLanguageSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse`.
        public struct I18nLanguageListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse/eventId`.
            public var eventId: Swift.String?
            /// A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse/items`.
            public var items: [Components.Schemas.I18nLanguage]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageListResponse/visitorId`.
            public var visitorId: Swift.String?
            /// Creates a new `I18nLanguageListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.I18nLanguage]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// Basic details about an i18n language, such as language code and human-readable name.
        ///
        /// - Remark: Generated from `#/components/schemas/I18nLanguageSnippet`.
        public struct I18nLanguageSnippet: Codable, Hashable, Sendable {
            /// A short BCP-47 code that uniquely identifies a language.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageSnippet/hl`.
            public var hl: Swift.String?
            /// The human-readable name of the language in the language itself.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nLanguageSnippet/name`.
            public var name: Swift.String?
            /// Creates a new `I18nLanguageSnippet`.
            ///
            /// - Parameters:
            ///   - hl: A short BCP-47 code that uniquely identifies a language.
            ///   - name: The human-readable name of the language in the language itself.
            public init(
                hl: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.hl = hl
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case hl
                case name
            }
        }
        /// A *i18nRegion* resource identifies a region where YouTube is available.
        ///
        /// - Remark: Generated from `#/components/schemas/I18nRegion`.
        public struct I18nRegion: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegion/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the i18n region.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegion/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegion/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/I18nRegion/snippet`.
            public var snippet: Components.Schemas.I18nRegionSnippet?
            /// Creates a new `I18nRegion`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the i18n region.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.I18nRegionSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse`.
        public struct I18nRegionListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse/items`.
            public var items: [Components.Schemas.I18nRegion]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `I18nRegionListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.I18nRegion]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// Basic details about an i18n region, such as region code and human-readable name.
        ///
        /// - Remark: Generated from `#/components/schemas/I18nRegionSnippet`.
        public struct I18nRegionSnippet: Codable, Hashable, Sendable {
            /// The region code as a 2-letter ISO country code.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionSnippet/gl`.
            public var gl: Swift.String?
            /// The human-readable name of the region.
            ///
            /// - Remark: Generated from `#/components/schemas/I18nRegionSnippet/name`.
            public var name: Swift.String?
            /// Creates a new `I18nRegionSnippet`.
            ///
            /// - Parameters:
            ///   - gl: The region code as a 2-letter ISO country code.
            ///   - name: The human-readable name of the region.
            public init(
                gl: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.gl = gl
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case gl
                case name
            }
        }
        /// Branding properties for images associated with the channel.
        ///
        /// - Remark: Generated from `#/components/schemas/ImageSettings`.
        public struct ImageSettings: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImageSettings/backgroundImageUrl`.
            public var backgroundImageUrl: Components.Schemas.LocalizedProperty?
            /// This is generated when a ChannelBanner.Insert request has succeeded for the given channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerExternalUrl`.
            public var bannerExternalUrl: Swift.String?
            /// Banner image. Desktop size (1060x175).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerImageUrl`.
            @available(*, deprecated)
            public var bannerImageUrl: Swift.String?
            /// Banner image. Mobile size high resolution (1440x395).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerMobileExtraHdImageUrl`.
            @available(*, deprecated)
            public var bannerMobileExtraHdImageUrl: Swift.String?
            /// Banner image. Mobile size high resolution (1280x360).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerMobileHdImageUrl`.
            @available(*, deprecated)
            public var bannerMobileHdImageUrl: Swift.String?
            /// Banner image. Mobile size (640x175).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerMobileImageUrl`.
            @available(*, deprecated)
            public var bannerMobileImageUrl: Swift.String?
            /// Banner image. Mobile size low resolution (320x88).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerMobileLowImageUrl`.
            @available(*, deprecated)
            public var bannerMobileLowImageUrl: Swift.String?
            /// Banner image. Mobile size medium/high resolution (960x263).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerMobileMediumHdImageUrl`.
            @available(*, deprecated)
            public var bannerMobileMediumHdImageUrl: Swift.String?
            /// Banner image. Tablet size extra high resolution (2560x424).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTabletExtraHdImageUrl`.
            @available(*, deprecated)
            public var bannerTabletExtraHdImageUrl: Swift.String?
            /// Banner image. Tablet size high resolution (2276x377).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTabletHdImageUrl`.
            @available(*, deprecated)
            public var bannerTabletHdImageUrl: Swift.String?
            /// Banner image. Tablet size (1707x283).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTabletImageUrl`.
            @available(*, deprecated)
            public var bannerTabletImageUrl: Swift.String?
            /// Banner image. Tablet size low resolution (1138x188).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTabletLowImageUrl`.
            @available(*, deprecated)
            public var bannerTabletLowImageUrl: Swift.String?
            /// Banner image. TV size high resolution (1920x1080).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTvHighImageUrl`.
            @available(*, deprecated)
            public var bannerTvHighImageUrl: Swift.String?
            /// Banner image. TV size extra high resolution (2120x1192).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTvImageUrl`.
            @available(*, deprecated)
            public var bannerTvImageUrl: Swift.String?
            /// Banner image. TV size low resolution (854x480).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTvLowImageUrl`.
            @available(*, deprecated)
            public var bannerTvLowImageUrl: Swift.String?
            /// Banner image. TV size medium resolution (1280x720).
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/bannerTvMediumImageUrl`.
            @available(*, deprecated)
            public var bannerTvMediumImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageSettings/largeBrandedBannerImageImapScript`.
            public var largeBrandedBannerImageImapScript: Components.Schemas.LocalizedProperty?
            /// - Remark: Generated from `#/components/schemas/ImageSettings/largeBrandedBannerImageUrl`.
            public var largeBrandedBannerImageUrl: Components.Schemas.LocalizedProperty?
            /// - Remark: Generated from `#/components/schemas/ImageSettings/smallBrandedBannerImageImapScript`.
            public var smallBrandedBannerImageImapScript: Components.Schemas.LocalizedProperty?
            /// - Remark: Generated from `#/components/schemas/ImageSettings/smallBrandedBannerImageUrl`.
            public var smallBrandedBannerImageUrl: Components.Schemas.LocalizedProperty?
            /// The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageSettings/trackingImageUrl`.
            @available(*, deprecated)
            public var trackingImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ImageSettings/watchIconImageUrl`.
            @available(*, deprecated)
            public var watchIconImageUrl: Swift.String?
            /// Creates a new `ImageSettings`.
            ///
            /// - Parameters:
            ///   - backgroundImageUrl:
            ///   - bannerExternalUrl: This is generated when a ChannelBanner.Insert request has succeeded for the given channel.
            ///   - bannerImageUrl: Banner image. Desktop size (1060x175).
            ///   - bannerMobileExtraHdImageUrl: Banner image. Mobile size high resolution (1440x395).
            ///   - bannerMobileHdImageUrl: Banner image. Mobile size high resolution (1280x360).
            ///   - bannerMobileImageUrl: Banner image. Mobile size (640x175).
            ///   - bannerMobileLowImageUrl: Banner image. Mobile size low resolution (320x88).
            ///   - bannerMobileMediumHdImageUrl: Banner image. Mobile size medium/high resolution (960x263).
            ///   - bannerTabletExtraHdImageUrl: Banner image. Tablet size extra high resolution (2560x424).
            ///   - bannerTabletHdImageUrl: Banner image. Tablet size high resolution (2276x377).
            ///   - bannerTabletImageUrl: Banner image. Tablet size (1707x283).
            ///   - bannerTabletLowImageUrl: Banner image. Tablet size low resolution (1138x188).
            ///   - bannerTvHighImageUrl: Banner image. TV size high resolution (1920x1080).
            ///   - bannerTvImageUrl: Banner image. TV size extra high resolution (2120x1192).
            ///   - bannerTvLowImageUrl: Banner image. TV size low resolution (854x480).
            ///   - bannerTvMediumImageUrl: Banner image. TV size medium resolution (1280x720).
            ///   - largeBrandedBannerImageImapScript:
            ///   - largeBrandedBannerImageUrl:
            ///   - smallBrandedBannerImageImapScript:
            ///   - smallBrandedBannerImageUrl:
            ///   - trackingImageUrl: The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
            ///   - watchIconImageUrl:
            public init(
                backgroundImageUrl: Components.Schemas.LocalizedProperty? = nil,
                bannerExternalUrl: Swift.String? = nil,
                bannerImageUrl: Swift.String? = nil,
                bannerMobileExtraHdImageUrl: Swift.String? = nil,
                bannerMobileHdImageUrl: Swift.String? = nil,
                bannerMobileImageUrl: Swift.String? = nil,
                bannerMobileLowImageUrl: Swift.String? = nil,
                bannerMobileMediumHdImageUrl: Swift.String? = nil,
                bannerTabletExtraHdImageUrl: Swift.String? = nil,
                bannerTabletHdImageUrl: Swift.String? = nil,
                bannerTabletImageUrl: Swift.String? = nil,
                bannerTabletLowImageUrl: Swift.String? = nil,
                bannerTvHighImageUrl: Swift.String? = nil,
                bannerTvImageUrl: Swift.String? = nil,
                bannerTvLowImageUrl: Swift.String? = nil,
                bannerTvMediumImageUrl: Swift.String? = nil,
                largeBrandedBannerImageImapScript: Components.Schemas.LocalizedProperty? = nil,
                largeBrandedBannerImageUrl: Components.Schemas.LocalizedProperty? = nil,
                smallBrandedBannerImageImapScript: Components.Schemas.LocalizedProperty? = nil,
                smallBrandedBannerImageUrl: Components.Schemas.LocalizedProperty? = nil,
                trackingImageUrl: Swift.String? = nil,
                watchIconImageUrl: Swift.String? = nil
            ) {
                self.backgroundImageUrl = backgroundImageUrl
                self.bannerExternalUrl = bannerExternalUrl
                self.bannerImageUrl = bannerImageUrl
                self.bannerMobileExtraHdImageUrl = bannerMobileExtraHdImageUrl
                self.bannerMobileHdImageUrl = bannerMobileHdImageUrl
                self.bannerMobileImageUrl = bannerMobileImageUrl
                self.bannerMobileLowImageUrl = bannerMobileLowImageUrl
                self.bannerMobileMediumHdImageUrl = bannerMobileMediumHdImageUrl
                self.bannerTabletExtraHdImageUrl = bannerTabletExtraHdImageUrl
                self.bannerTabletHdImageUrl = bannerTabletHdImageUrl
                self.bannerTabletImageUrl = bannerTabletImageUrl
                self.bannerTabletLowImageUrl = bannerTabletLowImageUrl
                self.bannerTvHighImageUrl = bannerTvHighImageUrl
                self.bannerTvImageUrl = bannerTvImageUrl
                self.bannerTvLowImageUrl = bannerTvLowImageUrl
                self.bannerTvMediumImageUrl = bannerTvMediumImageUrl
                self.largeBrandedBannerImageImapScript = largeBrandedBannerImageImapScript
                self.largeBrandedBannerImageUrl = largeBrandedBannerImageUrl
                self.smallBrandedBannerImageImapScript = smallBrandedBannerImageImapScript
                self.smallBrandedBannerImageUrl = smallBrandedBannerImageUrl
                self.trackingImageUrl = trackingImageUrl
                self.watchIconImageUrl = watchIconImageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundImageUrl
                case bannerExternalUrl
                case bannerImageUrl
                case bannerMobileExtraHdImageUrl
                case bannerMobileHdImageUrl
                case bannerMobileImageUrl
                case bannerMobileLowImageUrl
                case bannerMobileMediumHdImageUrl
                case bannerTabletExtraHdImageUrl
                case bannerTabletHdImageUrl
                case bannerTabletImageUrl
                case bannerTabletLowImageUrl
                case bannerTvHighImageUrl
                case bannerTvImageUrl
                case bannerTvLowImageUrl
                case bannerTvMediumImageUrl
                case largeBrandedBannerImageImapScript
                case largeBrandedBannerImageUrl
                case smallBrandedBannerImageImapScript
                case smallBrandedBannerImageUrl
                case trackingImageUrl
                case watchIconImageUrl
            }
        }
        /// Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
        ///
        /// - Remark: Generated from `#/components/schemas/IngestionInfo`.
        public struct IngestionInfo: Codable, Hashable, Sendable {
            /// The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
            ///
            /// - Remark: Generated from `#/components/schemas/IngestionInfo/backupIngestionAddress`.
            public var backupIngestionAddress: Swift.String?
            /// The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 
            ///
            /// - Remark: Generated from `#/components/schemas/IngestionInfo/ingestionAddress`.
            public var ingestionAddress: Swift.String?
            /// This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
            ///
            /// - Remark: Generated from `#/components/schemas/IngestionInfo/rtmpsBackupIngestionAddress`.
            public var rtmpsBackupIngestionAddress: Swift.String?
            /// This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
            ///
            /// - Remark: Generated from `#/components/schemas/IngestionInfo/rtmpsIngestionAddress`.
            public var rtmpsIngestionAddress: Swift.String?
            /// The stream name that YouTube assigns to the video stream.
            ///
            /// - Remark: Generated from `#/components/schemas/IngestionInfo/streamName`.
            public var streamName: Swift.String?
            /// Creates a new `IngestionInfo`.
            ///
            /// - Parameters:
            ///   - backupIngestionAddress: The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
            ///   - ingestionAddress: The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 
            ///   - rtmpsBackupIngestionAddress: This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
            ///   - rtmpsIngestionAddress: This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
            ///   - streamName: The stream name that YouTube assigns to the video stream.
            public init(
                backupIngestionAddress: Swift.String? = nil,
                ingestionAddress: Swift.String? = nil,
                rtmpsBackupIngestionAddress: Swift.String? = nil,
                rtmpsIngestionAddress: Swift.String? = nil,
                streamName: Swift.String? = nil
            ) {
                self.backupIngestionAddress = backupIngestionAddress
                self.ingestionAddress = ingestionAddress
                self.rtmpsBackupIngestionAddress = rtmpsBackupIngestionAddress
                self.rtmpsIngestionAddress = rtmpsIngestionAddress
                self.streamName = streamName
            }
            public enum CodingKeys: String, CodingKey {
                case backupIngestionAddress
                case ingestionAddress
                case rtmpsBackupIngestionAddress
                case rtmpsIngestionAddress
                case streamName
            }
        }
        /// LINT.IfChange Describes an invideo branding.
        ///
        /// - Remark: Generated from `#/components/schemas/InvideoBranding`.
        public struct InvideoBranding: Codable, Hashable, Sendable {
            /// The bytes the uploaded image. Only used in api to youtube communication.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoBranding/imageBytes`.
            public var imageBytes: OpenAPIRuntime.Base64EncodedData?
            /// The url of the uploaded image. Only used in apiary to api communication.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoBranding/imageUrl`.
            public var imageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvideoBranding/position`.
            public var position: Components.Schemas.InvideoPosition?
            /// The channel to which this branding links. If not present it defaults to the current channel.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoBranding/targetChannelId`.
            public var targetChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InvideoBranding/timing`.
            public var timing: Components.Schemas.InvideoTiming?
            /// Creates a new `InvideoBranding`.
            ///
            /// - Parameters:
            ///   - imageBytes: The bytes the uploaded image. Only used in api to youtube communication.
            ///   - imageUrl: The url of the uploaded image. Only used in apiary to api communication.
            ///   - position:
            ///   - targetChannelId: The channel to which this branding links. If not present it defaults to the current channel.
            ///   - timing:
            public init(
                imageBytes: OpenAPIRuntime.Base64EncodedData? = nil,
                imageUrl: Swift.String? = nil,
                position: Components.Schemas.InvideoPosition? = nil,
                targetChannelId: Swift.String? = nil,
                timing: Components.Schemas.InvideoTiming? = nil
            ) {
                self.imageBytes = imageBytes
                self.imageUrl = imageUrl
                self.position = position
                self.targetChannelId = targetChannelId
                self.timing = timing
            }
            public enum CodingKeys: String, CodingKey {
                case imageBytes
                case imageUrl
                case position
                case targetChannelId
                case timing
            }
        }
        /// Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
        ///
        /// - Remark: Generated from `#/components/schemas/InvideoPosition`.
        public struct InvideoPosition: Codable, Hashable, Sendable {
            /// Describes in which corner of the video the visual widget will appear.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoPosition/cornerPosition`.
            @frozen public enum cornerPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case topLeft = "topLeft"
                case topRight = "topRight"
                case bottomLeft = "bottomLeft"
                case bottomRight = "bottomRight"
            }
            /// Describes in which corner of the video the visual widget will appear.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoPosition/cornerPosition`.
            public var cornerPosition: Components.Schemas.InvideoPosition.cornerPositionPayload?
            /// Defines the position type.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoPosition/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case corner = "corner"
            }
            /// Defines the position type.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoPosition/type`.
            public var _type: Components.Schemas.InvideoPosition._typePayload?
            /// Creates a new `InvideoPosition`.
            ///
            /// - Parameters:
            ///   - cornerPosition: Describes in which corner of the video the visual widget will appear.
            ///   - _type: Defines the position type.
            public init(
                cornerPosition: Components.Schemas.InvideoPosition.cornerPositionPayload? = nil,
                _type: Components.Schemas.InvideoPosition._typePayload? = nil
            ) {
                self.cornerPosition = cornerPosition
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case cornerPosition
                case _type = "type"
            }
        }
        /// Describes a temporal position of a visual widget inside a video.
        ///
        /// - Remark: Generated from `#/components/schemas/InvideoTiming`.
        public struct InvideoTiming: Codable, Hashable, Sendable {
            /// Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoTiming/durationMs`.
            public var durationMs: Swift.String?
            /// Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoTiming/offsetMs`.
            public var offsetMs: Swift.String?
            /// Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoTiming/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case offsetFromStart = "offsetFromStart"
                case offsetFromEnd = "offsetFromEnd"
            }
            /// Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/InvideoTiming/type`.
            public var _type: Components.Schemas.InvideoTiming._typePayload?
            /// Creates a new `InvideoTiming`.
            ///
            /// - Parameters:
            ///   - durationMs: Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
            ///   - offsetMs: Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
            ///   - _type: Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
            public init(
                durationMs: Swift.String? = nil,
                offsetMs: Swift.String? = nil,
                _type: Components.Schemas.InvideoTiming._typePayload? = nil
            ) {
                self.durationMs = durationMs
                self.offsetMs = offsetMs
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case durationMs
                case offsetMs
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/LanguageTag`.
        public struct LanguageTag: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LanguageTag/value`.
            public var value: Swift.String?
            /// Creates a new `LanguageTag`.
            ///
            /// - Parameters:
            ///   - value:
            public init(value: Swift.String? = nil) {
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/LevelDetails`.
        public struct LevelDetails: Codable, Hashable, Sendable {
            /// The name that should be used when referring to this level.
            ///
            /// - Remark: Generated from `#/components/schemas/LevelDetails/displayName`.
            public var displayName: Swift.String?
            /// Creates a new `LevelDetails`.
            ///
            /// - Parameters:
            ///   - displayName: The name that should be used when referring to this level.
            public init(displayName: Swift.String? = nil) {
                self.displayName = displayName
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
            }
        }
        /// A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcast`.
        public struct LiveBroadcast: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/contentDetails`.
            public var contentDetails: Components.Schemas.LiveBroadcastContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/monetizationDetails`.
            public var monetizationDetails: Components.Schemas.LiveBroadcastMonetizationDetails?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/snippet`.
            public var snippet: Components.Schemas.LiveBroadcastSnippet?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/statistics`.
            public var statistics: Components.Schemas.LiveBroadcastStatistics?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcast/status`.
            public var status: Components.Schemas.LiveBroadcastStatus?
            /// Creates a new `LiveBroadcast`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the broadcast.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
            ///   - monetizationDetails:
            ///   - snippet:
            ///   - statistics:
            ///   - status:
            public init(
                contentDetails: Components.Schemas.LiveBroadcastContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                monetizationDetails: Components.Schemas.LiveBroadcastMonetizationDetails? = nil,
                snippet: Components.Schemas.LiveBroadcastSnippet? = nil,
                statistics: Components.Schemas.LiveBroadcastStatistics? = nil,
                status: Components.Schemas.LiveBroadcastStatus? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.monetizationDetails = monetizationDetails
                self.snippet = snippet
                self.statistics = statistics
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case monetizationDetails
                case snippet
                case statistics
                case status
            }
        }
        /// Detailed settings of a broadcast.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails`.
        public struct LiveBroadcastContentDetails: Codable, Hashable, Sendable {
            /// This value uniquely identifies the live stream bound to the broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/boundStreamId`.
            public var boundStreamId: Swift.String?
            /// The date and time that the live stream referenced by boundStreamId was last updated.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/boundStreamLastUpdateTimeMs`.
            public var boundStreamLastUpdateTimeMs: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/closedCaptionsType`.
            @frozen public enum closedCaptionsTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case closedCaptionsTypeUnspecified = "closedCaptionsTypeUnspecified"
                case closedCaptionsDisabled = "closedCaptionsDisabled"
                case closedCaptionsHttpPost = "closedCaptionsHttpPost"
                case closedCaptionsEmbedded = "closedCaptionsEmbedded"
            }
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/closedCaptionsType`.
            public var closedCaptionsType: Components.Schemas.LiveBroadcastContentDetails.closedCaptionsTypePayload?
            /// This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableAutoStart`.
            public var enableAutoStart: Swift.Bool?
            /// This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableAutoStop`.
            public var enableAutoStop: Swift.Bool?
            /// This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableClosedCaptions`.
            @available(*, deprecated)
            public var enableClosedCaptions: Swift.Bool?
            /// This setting indicates whether YouTube should enable content encryption for the broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableContentEncryption`.
            public var enableContentEncryption: Swift.Bool?
            /// This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableDvr`.
            public var enableDvr: Swift.Bool?
            /// This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableEmbed`.
            public var enableEmbed: Swift.Bool?
            /// Indicates whether this broadcast has low latency enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/enableLowLatency`.
            @available(*, deprecated)
            public var enableLowLatency: Swift.Bool?
            /// If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/latencyPreference`.
            @frozen public enum latencyPreferencePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case latencyPreferenceUnspecified = "latencyPreferenceUnspecified"
                case normal = "normal"
                case low = "low"
                case ultraLow = "ultraLow"
            }
            /// If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/latencyPreference`.
            public var latencyPreference: Components.Schemas.LiveBroadcastContentDetails.latencyPreferencePayload?
            /// The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/mesh`.
            public var mesh: OpenAPIRuntime.Base64EncodedData?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/monitorStream`.
            public var monitorStream: Components.Schemas.MonitorStreamInfo?
            /// The projection format of this broadcast. This defaults to rectangular.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/projection`.
            @frozen public enum projectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case projectionUnspecified = "projectionUnspecified"
                case rectangular = "rectangular"
                case _360 = "360"
                case mesh = "mesh"
            }
            /// The projection format of this broadcast. This defaults to rectangular.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/projection`.
            public var projection: Components.Schemas.LiveBroadcastContentDetails.projectionPayload?
            /// Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/recordFromStart`.
            public var recordFromStart: Swift.Bool?
            /// This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/startWithSlate`.
            public var startWithSlate: Swift.Bool?
            /// The 3D stereo layout of this broadcast. This defaults to mono.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/stereoLayout`.
            @frozen public enum stereoLayoutPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case stereoLayoutUnspecified = "stereoLayoutUnspecified"
                case mono = "mono"
                case leftRight = "leftRight"
                case topBottom = "topBottom"
            }
            /// The 3D stereo layout of this broadcast. This defaults to mono.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastContentDetails/stereoLayout`.
            public var stereoLayout: Components.Schemas.LiveBroadcastContentDetails.stereoLayoutPayload?
            /// Creates a new `LiveBroadcastContentDetails`.
            ///
            /// - Parameters:
            ///   - boundStreamId: This value uniquely identifies the live stream bound to the broadcast.
            ///   - boundStreamLastUpdateTimeMs: The date and time that the live stream referenced by boundStreamId was last updated.
            ///   - closedCaptionsType:
            ///   - enableAutoStart: This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
            ///   - enableAutoStop: This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
            ///   - enableClosedCaptions: This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
            ///   - enableContentEncryption: This setting indicates whether YouTube should enable content encryption for the broadcast.
            ///   - enableDvr: This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
            ///   - enableEmbed: This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
            ///   - enableLowLatency: Indicates whether this broadcast has low latency enabled.
            ///   - latencyPreference: If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
            ///   - mesh: The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
            ///   - monitorStream:
            ///   - projection: The projection format of this broadcast. This defaults to rectangular.
            ///   - recordFromStart: Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
            ///   - startWithSlate: This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
            ///   - stereoLayout: The 3D stereo layout of this broadcast. This defaults to mono.
            public init(
                boundStreamId: Swift.String? = nil,
                boundStreamLastUpdateTimeMs: Foundation.Date? = nil,
                closedCaptionsType: Components.Schemas.LiveBroadcastContentDetails.closedCaptionsTypePayload? = nil,
                enableAutoStart: Swift.Bool? = nil,
                enableAutoStop: Swift.Bool? = nil,
                enableClosedCaptions: Swift.Bool? = nil,
                enableContentEncryption: Swift.Bool? = nil,
                enableDvr: Swift.Bool? = nil,
                enableEmbed: Swift.Bool? = nil,
                enableLowLatency: Swift.Bool? = nil,
                latencyPreference: Components.Schemas.LiveBroadcastContentDetails.latencyPreferencePayload? = nil,
                mesh: OpenAPIRuntime.Base64EncodedData? = nil,
                monitorStream: Components.Schemas.MonitorStreamInfo? = nil,
                projection: Components.Schemas.LiveBroadcastContentDetails.projectionPayload? = nil,
                recordFromStart: Swift.Bool? = nil,
                startWithSlate: Swift.Bool? = nil,
                stereoLayout: Components.Schemas.LiveBroadcastContentDetails.stereoLayoutPayload? = nil
            ) {
                self.boundStreamId = boundStreamId
                self.boundStreamLastUpdateTimeMs = boundStreamLastUpdateTimeMs
                self.closedCaptionsType = closedCaptionsType
                self.enableAutoStart = enableAutoStart
                self.enableAutoStop = enableAutoStop
                self.enableClosedCaptions = enableClosedCaptions
                self.enableContentEncryption = enableContentEncryption
                self.enableDvr = enableDvr
                self.enableEmbed = enableEmbed
                self.enableLowLatency = enableLowLatency
                self.latencyPreference = latencyPreference
                self.mesh = mesh
                self.monitorStream = monitorStream
                self.projection = projection
                self.recordFromStart = recordFromStart
                self.startWithSlate = startWithSlate
                self.stereoLayout = stereoLayout
            }
            public enum CodingKeys: String, CodingKey {
                case boundStreamId
                case boundStreamLastUpdateTimeMs
                case closedCaptionsType
                case enableAutoStart
                case enableAutoStop
                case enableClosedCaptions
                case enableContentEncryption
                case enableDvr
                case enableEmbed
                case enableLowLatency
                case latencyPreference
                case mesh
                case monitorStream
                case projection
                case recordFromStart
                case startWithSlate
                case stereoLayout
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse`.
        public struct LiveBroadcastListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of broadcasts that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/items`.
            public var items: [Components.Schemas.LiveBroadcast]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `LiveBroadcastListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of broadcasts that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.LiveBroadcast]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Monetization settings of a broadcast.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastMonetizationDetails`.
        public struct LiveBroadcastMonetizationDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastMonetizationDetails/cuepointSchedule`.
            public var cuepointSchedule: Components.Schemas.CuepointSchedule?
            /// Creates a new `LiveBroadcastMonetizationDetails`.
            ///
            /// - Parameters:
            ///   - cuepointSchedule:
            public init(cuepointSchedule: Components.Schemas.CuepointSchedule? = nil) {
                self.cuepointSchedule = cuepointSchedule
            }
            public enum CodingKeys: String, CodingKey {
                case cuepointSchedule
            }
        }
        /// Basic broadcast information.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet`.
        public struct LiveBroadcastSnippet: Codable, Hashable, Sendable {
            /// The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/actualEndTime`.
            public var actualEndTime: Foundation.Date?
            /// The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/actualStartTime`.
            public var actualStartTime: Foundation.Date?
            /// The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/channelId`.
            public var channelId: Swift.String?
            /// The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/description`.
            public var description: Swift.String?
            /// Indicates whether this broadcast is the default broadcast. Internal only.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/isDefaultBroadcast`.
            public var isDefaultBroadcast: Swift.Bool?
            /// The id of the live chat for this broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/liveChatId`.
            public var liveChatId: Swift.String?
            /// The date and time that the broadcast was added to YouTube's live broadcast schedule.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// The date and time that the broadcast is scheduled to end.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/scheduledEndTime`.
            public var scheduledEndTime: Foundation.Date?
            /// The date and time that the broadcast is scheduled to start.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/scheduledStartTime`.
            public var scheduledStartTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `LiveBroadcastSnippet`.
            ///
            /// - Parameters:
            ///   - actualEndTime: The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
            ///   - actualStartTime: The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
            ///   - description: The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
            ///   - isDefaultBroadcast: Indicates whether this broadcast is the default broadcast. Internal only.
            ///   - liveChatId: The id of the live chat for this broadcast.
            ///   - publishedAt: The date and time that the broadcast was added to YouTube's live broadcast schedule.
            ///   - scheduledEndTime: The date and time that the broadcast is scheduled to end.
            ///   - scheduledStartTime: The date and time that the broadcast is scheduled to start.
            ///   - thumbnails:
            ///   - title: The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
            public init(
                actualEndTime: Foundation.Date? = nil,
                actualStartTime: Foundation.Date? = nil,
                channelId: Swift.String? = nil,
                description: Swift.String? = nil,
                isDefaultBroadcast: Swift.Bool? = nil,
                liveChatId: Swift.String? = nil,
                publishedAt: Foundation.Date? = nil,
                scheduledEndTime: Foundation.Date? = nil,
                scheduledStartTime: Foundation.Date? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.actualEndTime = actualEndTime
                self.actualStartTime = actualStartTime
                self.channelId = channelId
                self.description = description
                self.isDefaultBroadcast = isDefaultBroadcast
                self.liveChatId = liveChatId
                self.publishedAt = publishedAt
                self.scheduledEndTime = scheduledEndTime
                self.scheduledStartTime = scheduledStartTime
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case actualEndTime
                case actualStartTime
                case channelId
                case description
                case isDefaultBroadcast
                case liveChatId
                case publishedAt
                case scheduledEndTime
                case scheduledStartTime
                case thumbnails
                case title
            }
        }
        /// Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatistics`.
        public struct LiveBroadcastStatistics: Codable, Hashable, Sendable {
            /// The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatistics/concurrentViewers`.
            public var concurrentViewers: Swift.String?
            /// Creates a new `LiveBroadcastStatistics`.
            ///
            /// - Parameters:
            ///   - concurrentViewers: The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
            public init(concurrentViewers: Swift.String? = nil) {
                self.concurrentViewers = concurrentViewers
            }
            public enum CodingKeys: String, CodingKey {
                case concurrentViewers
            }
        }
        /// Live broadcast state.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus`.
        public struct LiveBroadcastStatus: Codable, Hashable, Sendable {
            /// The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/lifeCycleStatus`.
            @frozen public enum lifeCycleStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lifeCycleStatusUnspecified = "lifeCycleStatusUnspecified"
                case created = "created"
                case ready = "ready"
                case testing = "testing"
                case live = "live"
                case complete = "complete"
                case revoked = "revoked"
                case testStarting = "testStarting"
                case liveStarting = "liveStarting"
            }
            /// The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/lifeCycleStatus`.
            public var lifeCycleStatus: Components.Schemas.LiveBroadcastStatus.lifeCycleStatusPayload?
            /// Priority of the live broadcast event (internal state).
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/liveBroadcastPriority`.
            @frozen public enum liveBroadcastPriorityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case liveBroadcastPriorityUnspecified = "liveBroadcastPriorityUnspecified"
                case low = "low"
                case normal = "normal"
                case high = "high"
            }
            /// Priority of the live broadcast event (internal state).
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/liveBroadcastPriority`.
            public var liveBroadcastPriority: Components.Schemas.LiveBroadcastStatus.liveBroadcastPriorityPayload?
            /// Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/madeForKids`.
            public var madeForKids: Swift.Bool?
            /// The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/privacyStatus`.
            @frozen public enum privacyStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/privacyStatus`.
            public var privacyStatus: Components.Schemas.LiveBroadcastStatus.privacyStatusPayload?
            /// The broadcast's recording status.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/recordingStatus`.
            @frozen public enum recordingStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case liveBroadcastRecordingStatusUnspecified = "liveBroadcastRecordingStatusUnspecified"
                case notRecording = "notRecording"
                case recording = "recording"
                case recorded = "recorded"
            }
            /// The broadcast's recording status.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/recordingStatus`.
            public var recordingStatus: Components.Schemas.LiveBroadcastStatus.recordingStatusPayload?
            /// This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveBroadcastStatus/selfDeclaredMadeForKids`.
            public var selfDeclaredMadeForKids: Swift.Bool?
            /// Creates a new `LiveBroadcastStatus`.
            ///
            /// - Parameters:
            ///   - lifeCycleStatus: The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
            ///   - liveBroadcastPriority: Priority of the live broadcast event (internal state).
            ///   - madeForKids: Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
            ///   - privacyStatus: The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
            ///   - recordingStatus: The broadcast's recording status.
            ///   - selfDeclaredMadeForKids: This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
            public init(
                lifeCycleStatus: Components.Schemas.LiveBroadcastStatus.lifeCycleStatusPayload? = nil,
                liveBroadcastPriority: Components.Schemas.LiveBroadcastStatus.liveBroadcastPriorityPayload? = nil,
                madeForKids: Swift.Bool? = nil,
                privacyStatus: Components.Schemas.LiveBroadcastStatus.privacyStatusPayload? = nil,
                recordingStatus: Components.Schemas.LiveBroadcastStatus.recordingStatusPayload? = nil,
                selfDeclaredMadeForKids: Swift.Bool? = nil
            ) {
                self.lifeCycleStatus = lifeCycleStatus
                self.liveBroadcastPriority = liveBroadcastPriority
                self.madeForKids = madeForKids
                self.privacyStatus = privacyStatus
                self.recordingStatus = recordingStatus
                self.selfDeclaredMadeForKids = selfDeclaredMadeForKids
            }
            public enum CodingKeys: String, CodingKey {
                case lifeCycleStatus
                case liveBroadcastPriority
                case madeForKids
                case privacyStatus
                case recordingStatus
                case selfDeclaredMadeForKids
            }
        }
        /// A `__liveChatBan__` resource represents a ban for a YouTube live chat.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveChatBan`.
        public struct LiveChatBan: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBan/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the ban.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBan/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBan/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatBan/snippet`.
            public var snippet: Components.Schemas.LiveChatBanSnippet?
            /// Creates a new `LiveChatBan`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the ban.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.LiveChatBanSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet`.
        public struct LiveChatBanSnippet: Codable, Hashable, Sendable {
            /// The duration of a ban, only filled if the ban has type TEMPORARY.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet/banDurationSeconds`.
            public var banDurationSeconds: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet/bannedUserDetails`.
            public var bannedUserDetails: Components.Schemas.ChannelProfileDetails?
            /// The chat this ban is pertinent to.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet/liveChatId`.
            public var liveChatId: Swift.String?
            /// The type of ban.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case liveChatBanTypeUnspecified = "liveChatBanTypeUnspecified"
                case permanent = "permanent"
                case temporary = "temporary"
            }
            /// The type of ban.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatBanSnippet/type`.
            public var _type: Components.Schemas.LiveChatBanSnippet._typePayload?
            /// Creates a new `LiveChatBanSnippet`.
            ///
            /// - Parameters:
            ///   - banDurationSeconds: The duration of a ban, only filled if the ban has type TEMPORARY.
            ///   - bannedUserDetails:
            ///   - liveChatId: The chat this ban is pertinent to.
            ///   - _type: The type of ban.
            public init(
                banDurationSeconds: Swift.String? = nil,
                bannedUserDetails: Components.Schemas.ChannelProfileDetails? = nil,
                liveChatId: Swift.String? = nil,
                _type: Components.Schemas.LiveChatBanSnippet._typePayload? = nil
            ) {
                self.banDurationSeconds = banDurationSeconds
                self.bannedUserDetails = bannedUserDetails
                self.liveChatId = liveChatId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case banDurationSeconds
                case bannedUserDetails
                case liveChatId
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatFanFundingEventDetails`.
        public struct LiveChatFanFundingEventDetails: Codable, Hashable, Sendable {
            /// A rendered string that displays the fund amount and currency to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatFanFundingEventDetails/amountDisplayString`.
            public var amountDisplayString: Swift.String?
            /// The amount of the fund.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatFanFundingEventDetails/amountMicros`.
            public var amountMicros: Swift.String?
            /// The currency in which the fund was made.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatFanFundingEventDetails/currency`.
            public var currency: Swift.String?
            /// The comment added by the user to this fan funding event.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatFanFundingEventDetails/userComment`.
            public var userComment: Swift.String?
            /// Creates a new `LiveChatFanFundingEventDetails`.
            ///
            /// - Parameters:
            ///   - amountDisplayString: A rendered string that displays the fund amount and currency to the user.
            ///   - amountMicros: The amount of the fund.
            ///   - currency: The currency in which the fund was made.
            ///   - userComment: The comment added by the user to this fan funding event.
            public init(
                amountDisplayString: Swift.String? = nil,
                amountMicros: Swift.String? = nil,
                currency: Swift.String? = nil,
                userComment: Swift.String? = nil
            ) {
                self.amountDisplayString = amountDisplayString
                self.amountMicros = amountMicros
                self.currency = currency
                self.userComment = userComment
            }
            public enum CodingKeys: String, CodingKey {
                case amountDisplayString
                case amountMicros
                case currency
                case userComment
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatGiftMembershipReceivedDetails`.
        public struct LiveChatGiftMembershipReceivedDetails: Codable, Hashable, Sendable {
            /// The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is 'membershipGiftingEvent'.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatGiftMembershipReceivedDetails/associatedMembershipGiftingMessageId`.
            public var associatedMembershipGiftingMessageId: Swift.String?
            /// The ID of the user that made the membership gifting purchase. This matches the `snippet.authorChannelId` of the associated membership gifting message.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatGiftMembershipReceivedDetails/gifterChannelId`.
            public var gifterChannelId: Swift.String?
            /// The name of the Level at which the viewer is a member. This matches the `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatGiftMembershipReceivedDetails/memberLevelName`.
            public var memberLevelName: Swift.String?
            /// Creates a new `LiveChatGiftMembershipReceivedDetails`.
            ///
            /// - Parameters:
            ///   - associatedMembershipGiftingMessageId: The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is 'membershipGiftingEvent'.
            ///   - gifterChannelId: The ID of the user that made the membership gifting purchase. This matches the `snippet.authorChannelId` of the associated membership gifting message.
            ///   - memberLevelName: The name of the Level at which the viewer is a member. This matches the `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            public init(
                associatedMembershipGiftingMessageId: Swift.String? = nil,
                gifterChannelId: Swift.String? = nil,
                memberLevelName: Swift.String? = nil
            ) {
                self.associatedMembershipGiftingMessageId = associatedMembershipGiftingMessageId
                self.gifterChannelId = gifterChannelId
                self.memberLevelName = memberLevelName
            }
            public enum CodingKeys: String, CodingKey {
                case associatedMembershipGiftingMessageId
                case gifterChannelId
                case memberLevelName
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMemberMilestoneChatDetails`.
        public struct LiveChatMemberMilestoneChatDetails: Codable, Hashable, Sendable {
            /// The name of the Level at which the viever is a member. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMemberMilestoneChatDetails/memberLevelName`.
            public var memberLevelName: Swift.String?
            /// The total amount of months (rounded up) the viewer has been a member that granted them this Member Milestone Chat. This is the same number of months as is being displayed to YouTube users.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMemberMilestoneChatDetails/memberMonth`.
            public var memberMonth: Swift.Int?
            /// The comment added by the member to this Member Milestone Chat. This field is empty for messages without a comment from the member.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMemberMilestoneChatDetails/userComment`.
            public var userComment: Swift.String?
            /// Creates a new `LiveChatMemberMilestoneChatDetails`.
            ///
            /// - Parameters:
            ///   - memberLevelName: The name of the Level at which the viever is a member. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            ///   - memberMonth: The total amount of months (rounded up) the viewer has been a member that granted them this Member Milestone Chat. This is the same number of months as is being displayed to YouTube users.
            ///   - userComment: The comment added by the member to this Member Milestone Chat. This field is empty for messages without a comment from the member.
            public init(
                memberLevelName: Swift.String? = nil,
                memberMonth: Swift.Int? = nil,
                userComment: Swift.String? = nil
            ) {
                self.memberLevelName = memberLevelName
                self.memberMonth = memberMonth
                self.userComment = userComment
            }
            public enum CodingKeys: String, CodingKey {
                case memberLevelName
                case memberMonth
                case userComment
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMembershipGiftingDetails`.
        public struct LiveChatMembershipGiftingDetails: Codable, Hashable, Sendable {
            /// The number of gift memberships purchased by the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMembershipGiftingDetails/giftMembershipsCount`.
            public var giftMembershipsCount: Swift.Int32?
            /// The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMembershipGiftingDetails/giftMembershipsLevelName`.
            public var giftMembershipsLevelName: Swift.String?
            /// Creates a new `LiveChatMembershipGiftingDetails`.
            ///
            /// - Parameters:
            ///   - giftMembershipsCount: The number of gift memberships purchased by the user.
            ///   - giftMembershipsLevelName: The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            public init(
                giftMembershipsCount: Swift.Int32? = nil,
                giftMembershipsLevelName: Swift.String? = nil
            ) {
                self.giftMembershipsCount = giftMembershipsCount
                self.giftMembershipsLevelName = giftMembershipsLevelName
            }
            public enum CodingKeys: String, CodingKey {
                case giftMembershipsCount
                case giftMembershipsLevelName
            }
        }
        /// A *liveChatMessage* resource represents a chat message in a YouTube Live Chat.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveChatMessage`.
        public struct LiveChatMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveChatMessage/authorDetails`.
            public var authorDetails: Components.Schemas.LiveChatMessageAuthorDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessage/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the message.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessage/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessage/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessage/snippet`.
            public var snippet: Components.Schemas.LiveChatMessageSnippet?
            /// Creates a new `LiveChatMessage`.
            ///
            /// - Parameters:
            ///   - authorDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the message.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
            ///   - snippet:
            public init(
                authorDetails: Components.Schemas.LiveChatMessageAuthorDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.LiveChatMessageSnippet? = nil
            ) {
                self.authorDetails = authorDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case authorDetails
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails`.
        public struct LiveChatMessageAuthorDetails: Codable, Hashable, Sendable {
            /// The YouTube channel ID.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/channelId`.
            public var channelId: Swift.String?
            /// The channel's URL.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/channelUrl`.
            public var channelUrl: Swift.String?
            /// The channel's display name.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/displayName`.
            public var displayName: Swift.String?
            /// Whether the author is a moderator of the live chat.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/isChatModerator`.
            public var isChatModerator: Swift.Bool?
            /// Whether the author is the owner of the live chat.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/isChatOwner`.
            public var isChatOwner: Swift.Bool?
            /// Whether the author is a sponsor of the live chat.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/isChatSponsor`.
            public var isChatSponsor: Swift.Bool?
            /// Whether the author's identity has been verified by YouTube.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/isVerified`.
            public var isVerified: Swift.Bool?
            /// The channels's avatar URL.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageAuthorDetails/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// Creates a new `LiveChatMessageAuthorDetails`.
            ///
            /// - Parameters:
            ///   - channelId: The YouTube channel ID.
            ///   - channelUrl: The channel's URL.
            ///   - displayName: The channel's display name.
            ///   - isChatModerator: Whether the author is a moderator of the live chat.
            ///   - isChatOwner: Whether the author is the owner of the live chat.
            ///   - isChatSponsor: Whether the author is a sponsor of the live chat.
            ///   - isVerified: Whether the author's identity has been verified by YouTube.
            ///   - profileImageUrl: The channels's avatar URL.
            public init(
                channelId: Swift.String? = nil,
                channelUrl: Swift.String? = nil,
                displayName: Swift.String? = nil,
                isChatModerator: Swift.Bool? = nil,
                isChatOwner: Swift.Bool? = nil,
                isChatSponsor: Swift.Bool? = nil,
                isVerified: Swift.Bool? = nil,
                profileImageUrl: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelUrl = channelUrl
                self.displayName = displayName
                self.isChatModerator = isChatModerator
                self.isChatOwner = isChatOwner
                self.isChatSponsor = isChatSponsor
                self.isVerified = isVerified
                self.profileImageUrl = profileImageUrl
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelUrl
                case displayName
                case isChatModerator
                case isChatOwner
                case isChatSponsor
                case isVerified
                case profileImageUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMessageDeletedDetails`.
        public struct LiveChatMessageDeletedDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageDeletedDetails/deletedMessageId`.
            public var deletedMessageId: Swift.String?
            /// Creates a new `LiveChatMessageDeletedDetails`.
            ///
            /// - Parameters:
            ///   - deletedMessageId:
            public init(deletedMessageId: Swift.String? = nil) {
                self.deletedMessageId = deletedMessageId
            }
            public enum CodingKeys: String, CodingKey {
                case deletedMessageId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse`.
        public struct LiveChatMessageListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/items`.
            public var items: [Components.Schemas.LiveChatMessage]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// The date and time when the underlying stream went offline.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/offlineAt`.
            public var offlineAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The amount of time the client should wait before polling again.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/pollingIntervalMillis`.
            public var pollingIntervalMillis: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `LiveChatMessageListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
            ///   - nextPageToken:
            ///   - offlineAt: The date and time when the underlying stream went offline.
            ///   - pageInfo:
            ///   - pollingIntervalMillis: The amount of time the client should wait before polling again.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.LiveChatMessage]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                offlineAt: Foundation.Date? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                pollingIntervalMillis: Swift.Int? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.offlineAt = offlineAt
                self.pageInfo = pageInfo
                self.pollingIntervalMillis = pollingIntervalMillis
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case offlineAt
                case pageInfo
                case pollingIntervalMillis
                case tokenPagination
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatMessageRetractedDetails`.
        public struct LiveChatMessageRetractedDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageRetractedDetails/retractedMessageId`.
            public var retractedMessageId: Swift.String?
            /// Creates a new `LiveChatMessageRetractedDetails`.
            ///
            /// - Parameters:
            ///   - retractedMessageId:
            public init(retractedMessageId: Swift.String? = nil) {
                self.retractedMessageId = retractedMessageId
            }
            public enum CodingKeys: String, CodingKey {
                case retractedMessageId
            }
        }
        /// Next ID: 34
        ///
        /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet`.
        public struct LiveChatMessageSnippet: Codable, Hashable, Sendable {
            /// The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/authorChannelId`.
            public var authorChannelId: Swift.String?
            /// Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/displayMessage`.
            public var displayMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/fanFundingEventDetails`.
            public var fanFundingEventDetails: Components.Schemas.LiveChatFanFundingEventDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/giftMembershipReceivedDetails`.
            public var giftMembershipReceivedDetails: Components.Schemas.LiveChatGiftMembershipReceivedDetails?
            /// Whether the message has display content that should be displayed to users.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/hasDisplayContent`.
            public var hasDisplayContent: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/liveChatId`.
            public var liveChatId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/memberMilestoneChatDetails`.
            public var memberMilestoneChatDetails: Components.Schemas.LiveChatMemberMilestoneChatDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/membershipGiftingDetails`.
            public var membershipGiftingDetails: Components.Schemas.LiveChatMembershipGiftingDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/messageDeletedDetails`.
            public var messageDeletedDetails: Components.Schemas.LiveChatMessageDeletedDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/messageRetractedDetails`.
            public var messageRetractedDetails: Components.Schemas.LiveChatMessageRetractedDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/newSponsorDetails`.
            public var newSponsorDetails: Components.Schemas.LiveChatNewSponsorDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/pollDetails`.
            public var pollDetails: Components.Schemas.LiveChatPollDetails?
            /// The date and time when the message was orignally published.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/superChatDetails`.
            public var superChatDetails: Components.Schemas.LiveChatSuperChatDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/superStickerDetails`.
            public var superStickerDetails: Components.Schemas.LiveChatSuperStickerDetails?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/textMessageDetails`.
            public var textMessageDetails: Components.Schemas.LiveChatTextMessageDetails?
            /// The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case invalidType = "invalidType"
                case textMessageEvent = "textMessageEvent"
                case tombstone = "tombstone"
                case fanFundingEvent = "fanFundingEvent"
                case chatEndedEvent = "chatEndedEvent"
                case sponsorOnlyModeStartedEvent = "sponsorOnlyModeStartedEvent"
                case sponsorOnlyModeEndedEvent = "sponsorOnlyModeEndedEvent"
                case newSponsorEvent = "newSponsorEvent"
                case memberMilestoneChatEvent = "memberMilestoneChatEvent"
                case membershipGiftingEvent = "membershipGiftingEvent"
                case giftMembershipReceivedEvent = "giftMembershipReceivedEvent"
                case messageDeletedEvent = "messageDeletedEvent"
                case messageRetractedEvent = "messageRetractedEvent"
                case userBannedEvent = "userBannedEvent"
                case superChatEvent = "superChatEvent"
                case superStickerEvent = "superStickerEvent"
                case pollEvent = "pollEvent"
            }
            /// The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/type`.
            public var _type: Components.Schemas.LiveChatMessageSnippet._typePayload?
            /// - Remark: Generated from `#/components/schemas/LiveChatMessageSnippet/userBannedDetails`.
            public var userBannedDetails: Components.Schemas.LiveChatUserBannedMessageDetails?
            /// Creates a new `LiveChatMessageSnippet`.
            ///
            /// - Parameters:
            ///   - authorChannelId: The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll
            ///   - displayMessage: Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
            ///   - fanFundingEventDetails:
            ///   - giftMembershipReceivedDetails:
            ///   - hasDisplayContent: Whether the message has display content that should be displayed to users.
            ///   - liveChatId:
            ///   - memberMilestoneChatDetails:
            ///   - membershipGiftingDetails:
            ///   - messageDeletedDetails:
            ///   - messageRetractedDetails:
            ///   - newSponsorDetails:
            ///   - pollDetails:
            ///   - publishedAt: The date and time when the message was orignally published.
            ///   - superChatDetails:
            ///   - superStickerDetails:
            ///   - textMessageDetails:
            ///   - _type: The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
            ///   - userBannedDetails:
            public init(
                authorChannelId: Swift.String? = nil,
                displayMessage: Swift.String? = nil,
                fanFundingEventDetails: Components.Schemas.LiveChatFanFundingEventDetails? = nil,
                giftMembershipReceivedDetails: Components.Schemas.LiveChatGiftMembershipReceivedDetails? = nil,
                hasDisplayContent: Swift.Bool? = nil,
                liveChatId: Swift.String? = nil,
                memberMilestoneChatDetails: Components.Schemas.LiveChatMemberMilestoneChatDetails? = nil,
                membershipGiftingDetails: Components.Schemas.LiveChatMembershipGiftingDetails? = nil,
                messageDeletedDetails: Components.Schemas.LiveChatMessageDeletedDetails? = nil,
                messageRetractedDetails: Components.Schemas.LiveChatMessageRetractedDetails? = nil,
                newSponsorDetails: Components.Schemas.LiveChatNewSponsorDetails? = nil,
                pollDetails: Components.Schemas.LiveChatPollDetails? = nil,
                publishedAt: Foundation.Date? = nil,
                superChatDetails: Components.Schemas.LiveChatSuperChatDetails? = nil,
                superStickerDetails: Components.Schemas.LiveChatSuperStickerDetails? = nil,
                textMessageDetails: Components.Schemas.LiveChatTextMessageDetails? = nil,
                _type: Components.Schemas.LiveChatMessageSnippet._typePayload? = nil,
                userBannedDetails: Components.Schemas.LiveChatUserBannedMessageDetails? = nil
            ) {
                self.authorChannelId = authorChannelId
                self.displayMessage = displayMessage
                self.fanFundingEventDetails = fanFundingEventDetails
                self.giftMembershipReceivedDetails = giftMembershipReceivedDetails
                self.hasDisplayContent = hasDisplayContent
                self.liveChatId = liveChatId
                self.memberMilestoneChatDetails = memberMilestoneChatDetails
                self.membershipGiftingDetails = membershipGiftingDetails
                self.messageDeletedDetails = messageDeletedDetails
                self.messageRetractedDetails = messageRetractedDetails
                self.newSponsorDetails = newSponsorDetails
                self.pollDetails = pollDetails
                self.publishedAt = publishedAt
                self.superChatDetails = superChatDetails
                self.superStickerDetails = superStickerDetails
                self.textMessageDetails = textMessageDetails
                self._type = _type
                self.userBannedDetails = userBannedDetails
            }
            public enum CodingKeys: String, CodingKey {
                case authorChannelId
                case displayMessage
                case fanFundingEventDetails
                case giftMembershipReceivedDetails
                case hasDisplayContent
                case liveChatId
                case memberMilestoneChatDetails
                case membershipGiftingDetails
                case messageDeletedDetails
                case messageRetractedDetails
                case newSponsorDetails
                case pollDetails
                case publishedAt
                case superChatDetails
                case superStickerDetails
                case textMessageDetails
                case _type = "type"
                case userBannedDetails
            }
        }
        /// A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveChatModerator`.
        public struct LiveChatModerator: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModerator/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the moderator.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModerator/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModerator/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatModerator/snippet`.
            public var snippet: Components.Schemas.LiveChatModeratorSnippet?
            /// Creates a new `LiveChatModerator`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the moderator.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.LiveChatModeratorSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse`.
        public struct LiveChatModeratorListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of moderators that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/items`.
            public var items: [Components.Schemas.LiveChatModerator]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `LiveChatModeratorListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of moderators that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.LiveChatModerator]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatModeratorSnippet`.
        public struct LiveChatModeratorSnippet: Codable, Hashable, Sendable {
            /// The ID of the live chat this moderator can act on.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorSnippet/liveChatId`.
            public var liveChatId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatModeratorSnippet/moderatorDetails`.
            public var moderatorDetails: Components.Schemas.ChannelProfileDetails?
            /// Creates a new `LiveChatModeratorSnippet`.
            ///
            /// - Parameters:
            ///   - liveChatId: The ID of the live chat this moderator can act on.
            ///   - moderatorDetails:
            public init(
                liveChatId: Swift.String? = nil,
                moderatorDetails: Components.Schemas.ChannelProfileDetails? = nil
            ) {
                self.liveChatId = liveChatId
                self.moderatorDetails = moderatorDetails
            }
            public enum CodingKeys: String, CodingKey {
                case liveChatId
                case moderatorDetails
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatNewSponsorDetails`.
        public struct LiveChatNewSponsorDetails: Codable, Hashable, Sendable {
            /// If the viewer just had upgraded from a lower level. For viewers that were not members at the time of purchase, this field is false.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatNewSponsorDetails/isUpgrade`.
            public var isUpgrade: Swift.Bool?
            /// The name of the Level that the viewer just had joined. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatNewSponsorDetails/memberLevelName`.
            public var memberLevelName: Swift.String?
            /// Creates a new `LiveChatNewSponsorDetails`.
            ///
            /// - Parameters:
            ///   - isUpgrade: If the viewer just had upgraded from a lower level. For viewers that were not members at the time of purchase, this field is false.
            ///   - memberLevelName: The name of the Level that the viewer just had joined. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
            public init(
                isUpgrade: Swift.Bool? = nil,
                memberLevelName: Swift.String? = nil
            ) {
                self.isUpgrade = isUpgrade
                self.memberLevelName = memberLevelName
            }
            public enum CodingKeys: String, CodingKey {
                case isUpgrade
                case memberLevelName
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatPollDetails`.
        public struct LiveChatPollDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetails/metadata`.
            public var metadata: Components.Schemas.LiveChatPollDetailsPollMetadata?
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetails/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unknown = "unknown"
                case active = "active"
                case closed = "closed"
            }
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetails/status`.
            public var status: Components.Schemas.LiveChatPollDetails.statusPayload?
            /// Creates a new `LiveChatPollDetails`.
            ///
            /// - Parameters:
            ///   - metadata:
            ///   - status:
            public init(
                metadata: Components.Schemas.LiveChatPollDetailsPollMetadata? = nil,
                status: Components.Schemas.LiveChatPollDetails.statusPayload? = nil
            ) {
                self.metadata = metadata
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case metadata
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadata`.
        public struct LiveChatPollDetailsPollMetadata: Codable, Hashable, Sendable {
            /// The options will be returned in the order that is displayed in 1P
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadata/options`.
            public var options: [Components.Schemas.LiveChatPollDetailsPollMetadataPollOption]?
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadata/questionText`.
            public var questionText: Swift.String?
            /// Creates a new `LiveChatPollDetailsPollMetadata`.
            ///
            /// - Parameters:
            ///   - options: The options will be returned in the order that is displayed in 1P
            ///   - questionText:
            public init(
                options: [Components.Schemas.LiveChatPollDetailsPollMetadataPollOption]? = nil,
                questionText: Swift.String? = nil
            ) {
                self.options = options
                self.questionText = questionText
            }
            public enum CodingKeys: String, CodingKey {
                case options
                case questionText
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadataPollOption`.
        public struct LiveChatPollDetailsPollMetadataPollOption: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadataPollOption/optionText`.
            public var optionText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatPollDetailsPollMetadataPollOption/tally`.
            public var tally: Swift.String?
            /// Creates a new `LiveChatPollDetailsPollMetadataPollOption`.
            ///
            /// - Parameters:
            ///   - optionText:
            ///   - tally:
            public init(
                optionText: Swift.String? = nil,
                tally: Swift.String? = nil
            ) {
                self.optionText = optionText
                self.tally = tally
            }
            public enum CodingKeys: String, CodingKey {
                case optionText
                case tally
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails`.
        public struct LiveChatSuperChatDetails: Codable, Hashable, Sendable {
            /// A rendered string that displays the fund amount and currency to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails/amountDisplayString`.
            public var amountDisplayString: Swift.String?
            /// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails/amountMicros`.
            public var amountMicros: Swift.String?
            /// The currency in which the purchase was made.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails/currency`.
            public var currency: Swift.String?
            /// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails/tier`.
            public var tier: Swift.Int?
            /// The comment added by the user to this Super Chat event.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperChatDetails/userComment`.
            public var userComment: Swift.String?
            /// Creates a new `LiveChatSuperChatDetails`.
            ///
            /// - Parameters:
            ///   - amountDisplayString: A rendered string that displays the fund amount and currency to the user.
            ///   - amountMicros: The amount purchased by the user, in micros (1,750,000 micros = 1.75).
            ///   - currency: The currency in which the purchase was made.
            ///   - tier: The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
            ///   - userComment: The comment added by the user to this Super Chat event.
            public init(
                amountDisplayString: Swift.String? = nil,
                amountMicros: Swift.String? = nil,
                currency: Swift.String? = nil,
                tier: Swift.Int? = nil,
                userComment: Swift.String? = nil
            ) {
                self.amountDisplayString = amountDisplayString
                self.amountMicros = amountMicros
                self.currency = currency
                self.tier = tier
                self.userComment = userComment
            }
            public enum CodingKeys: String, CodingKey {
                case amountDisplayString
                case amountMicros
                case currency
                case tier
                case userComment
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails`.
        public struct LiveChatSuperStickerDetails: Codable, Hashable, Sendable {
            /// A rendered string that displays the fund amount and currency to the user.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails/amountDisplayString`.
            public var amountDisplayString: Swift.String?
            /// The amount purchased by the user, in micros (1,750,000 micros = 1.75).
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails/amountMicros`.
            public var amountMicros: Swift.String?
            /// The currency in which the purchase was made.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails/currency`.
            public var currency: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails/superStickerMetadata`.
            public var superStickerMetadata: Components.Schemas.SuperStickerMetadata?
            /// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatSuperStickerDetails/tier`.
            public var tier: Swift.Int?
            /// Creates a new `LiveChatSuperStickerDetails`.
            ///
            /// - Parameters:
            ///   - amountDisplayString: A rendered string that displays the fund amount and currency to the user.
            ///   - amountMicros: The amount purchased by the user, in micros (1,750,000 micros = 1.75).
            ///   - currency: The currency in which the purchase was made.
            ///   - superStickerMetadata:
            ///   - tier: The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
            public init(
                amountDisplayString: Swift.String? = nil,
                amountMicros: Swift.String? = nil,
                currency: Swift.String? = nil,
                superStickerMetadata: Components.Schemas.SuperStickerMetadata? = nil,
                tier: Swift.Int? = nil
            ) {
                self.amountDisplayString = amountDisplayString
                self.amountMicros = amountMicros
                self.currency = currency
                self.superStickerMetadata = superStickerMetadata
                self.tier = tier
            }
            public enum CodingKeys: String, CodingKey {
                case amountDisplayString
                case amountMicros
                case currency
                case superStickerMetadata
                case tier
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatTextMessageDetails`.
        public struct LiveChatTextMessageDetails: Codable, Hashable, Sendable {
            /// The user's message.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatTextMessageDetails/messageText`.
            public var messageText: Swift.String?
            /// Creates a new `LiveChatTextMessageDetails`.
            ///
            /// - Parameters:
            ///   - messageText: The user's message.
            public init(messageText: Swift.String? = nil) {
                self.messageText = messageText
            }
            public enum CodingKeys: String, CodingKey {
                case messageText
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveChatUserBannedMessageDetails`.
        public struct LiveChatUserBannedMessageDetails: Codable, Hashable, Sendable {
            /// The duration of the ban. This property is only present if the banType is temporary.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatUserBannedMessageDetails/banDurationSeconds`.
            public var banDurationSeconds: Swift.String?
            /// The type of ban.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatUserBannedMessageDetails/banType`.
            @frozen public enum banTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case permanent = "permanent"
                case temporary = "temporary"
            }
            /// The type of ban.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveChatUserBannedMessageDetails/banType`.
            public var banType: Components.Schemas.LiveChatUserBannedMessageDetails.banTypePayload?
            /// - Remark: Generated from `#/components/schemas/LiveChatUserBannedMessageDetails/bannedUserDetails`.
            public var bannedUserDetails: Components.Schemas.ChannelProfileDetails?
            /// Creates a new `LiveChatUserBannedMessageDetails`.
            ///
            /// - Parameters:
            ///   - banDurationSeconds: The duration of the ban. This property is only present if the banType is temporary.
            ///   - banType: The type of ban.
            ///   - bannedUserDetails:
            public init(
                banDurationSeconds: Swift.String? = nil,
                banType: Components.Schemas.LiveChatUserBannedMessageDetails.banTypePayload? = nil,
                bannedUserDetails: Components.Schemas.ChannelProfileDetails? = nil
            ) {
                self.banDurationSeconds = banDurationSeconds
                self.banType = banType
                self.bannedUserDetails = bannedUserDetails
            }
            public enum CodingKeys: String, CodingKey {
                case banDurationSeconds
                case banType
                case bannedUserDetails
            }
        }
        /// A live stream describes a live ingestion point.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveStream`.
        public struct LiveStream: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveStream/cdn`.
            public var cdn: Components.Schemas.CdnSettings?
            /// - Remark: Generated from `#/components/schemas/LiveStream/contentDetails`.
            public var contentDetails: Components.Schemas.LiveStreamContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStream/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStream/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStream/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveStream/snippet`.
            public var snippet: Components.Schemas.LiveStreamSnippet?
            /// - Remark: Generated from `#/components/schemas/LiveStream/status`.
            public var status: Components.Schemas.LiveStreamStatus?
            /// Creates a new `LiveStream`.
            ///
            /// - Parameters:
            ///   - cdn:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the stream.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
            ///   - snippet:
            ///   - status:
            public init(
                cdn: Components.Schemas.CdnSettings? = nil,
                contentDetails: Components.Schemas.LiveStreamContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.LiveStreamSnippet? = nil,
                status: Components.Schemas.LiveStreamStatus? = nil
            ) {
                self.cdn = cdn
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case cdn
                case contentDetails
                case etag
                case id
                case kind
                case snippet
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue`.
        public struct LiveStreamConfigurationIssue: Codable, Hashable, Sendable {
            /// The long-form description of the issue and how to resolve it.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/description`.
            public var description: Swift.String?
            /// The short-form reason for this issue.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/reason`.
            public var reason: Swift.String?
            /// How severe this issue is to the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/severity`.
            @frozen public enum severityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case info = "info"
                case warning = "warning"
                case error = "error"
            }
            /// How severe this issue is to the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/severity`.
            public var severity: Components.Schemas.LiveStreamConfigurationIssue.severityPayload?
            /// The kind of error happening.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case gopSizeOver = "gopSizeOver"
                case gopSizeLong = "gopSizeLong"
                case gopSizeShort = "gopSizeShort"
                case openGop = "openGop"
                case badContainer = "badContainer"
                case audioBitrateHigh = "audioBitrateHigh"
                case audioBitrateLow = "audioBitrateLow"
                case audioSampleRate = "audioSampleRate"
                case bitrateHigh = "bitrateHigh"
                case bitrateLow = "bitrateLow"
                case audioCodec = "audioCodec"
                case videoCodec = "videoCodec"
                case noAudioStream = "noAudioStream"
                case noVideoStream = "noVideoStream"
                case multipleVideoStreams = "multipleVideoStreams"
                case multipleAudioStreams = "multipleAudioStreams"
                case audioTooManyChannels = "audioTooManyChannels"
                case interlacedVideo = "interlacedVideo"
                case frameRateHigh = "frameRateHigh"
                case resolutionMismatch = "resolutionMismatch"
                case videoCodecMismatch = "videoCodecMismatch"
                case videoInterlaceMismatch = "videoInterlaceMismatch"
                case videoProfileMismatch = "videoProfileMismatch"
                case videoBitrateMismatch = "videoBitrateMismatch"
                case framerateMismatch = "framerateMismatch"
                case gopMismatch = "gopMismatch"
                case audioSampleRateMismatch = "audioSampleRateMismatch"
                case audioStereoMismatch = "audioStereoMismatch"
                case audioCodecMismatch = "audioCodecMismatch"
                case audioBitrateMismatch = "audioBitrateMismatch"
                case videoResolutionSuboptimal = "videoResolutionSuboptimal"
                case videoResolutionUnsupported = "videoResolutionUnsupported"
                case videoIngestionStarved = "videoIngestionStarved"
                case videoIngestionFasterThanRealtime = "videoIngestionFasterThanRealtime"
            }
            /// The kind of error happening.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamConfigurationIssue/type`.
            public var _type: Components.Schemas.LiveStreamConfigurationIssue._typePayload?
            /// Creates a new `LiveStreamConfigurationIssue`.
            ///
            /// - Parameters:
            ///   - description: The long-form description of the issue and how to resolve it.
            ///   - reason: The short-form reason for this issue.
            ///   - severity: How severe this issue is to the stream.
            ///   - _type: The kind of error happening.
            public init(
                description: Swift.String? = nil,
                reason: Swift.String? = nil,
                severity: Components.Schemas.LiveStreamConfigurationIssue.severityPayload? = nil,
                _type: Components.Schemas.LiveStreamConfigurationIssue._typePayload? = nil
            ) {
                self.description = description
                self.reason = reason
                self.severity = severity
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case reason
                case severity
                case _type = "type"
            }
        }
        /// Detailed settings of a stream.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveStreamContentDetails`.
        public struct LiveStreamContentDetails: Codable, Hashable, Sendable {
            /// The ingestion URL where the closed captions of this stream are sent.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamContentDetails/closedCaptionsIngestionUrl`.
            public var closedCaptionsIngestionUrl: Swift.String?
            /// Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamContentDetails/isReusable`.
            public var isReusable: Swift.Bool?
            /// Creates a new `LiveStreamContentDetails`.
            ///
            /// - Parameters:
            ///   - closedCaptionsIngestionUrl: The ingestion URL where the closed captions of this stream are sent.
            ///   - isReusable: Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 
            public init(
                closedCaptionsIngestionUrl: Swift.String? = nil,
                isReusable: Swift.Bool? = nil
            ) {
                self.closedCaptionsIngestionUrl = closedCaptionsIngestionUrl
                self.isReusable = isReusable
            }
            public enum CodingKeys: String, CodingKey {
                case closedCaptionsIngestionUrl
                case isReusable
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveStreamHealthStatus`.
        public struct LiveStreamHealthStatus: Codable, Hashable, Sendable {
            /// The configurations issues on this stream
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamHealthStatus/configurationIssues`.
            public var configurationIssues: [Components.Schemas.LiveStreamConfigurationIssue]?
            /// The last time this status was updated (in seconds)
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamHealthStatus/lastUpdateTimeSeconds`.
            public var lastUpdateTimeSeconds: Swift.String?
            /// The status code of this stream
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamHealthStatus/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case good = "good"
                case ok = "ok"
                case bad = "bad"
                case noData = "noData"
                case revoked = "revoked"
            }
            /// The status code of this stream
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamHealthStatus/status`.
            public var status: Components.Schemas.LiveStreamHealthStatus.statusPayload?
            /// Creates a new `LiveStreamHealthStatus`.
            ///
            /// - Parameters:
            ///   - configurationIssues: The configurations issues on this stream
            ///   - lastUpdateTimeSeconds: The last time this status was updated (in seconds)
            ///   - status: The status code of this stream
            public init(
                configurationIssues: [Components.Schemas.LiveStreamConfigurationIssue]? = nil,
                lastUpdateTimeSeconds: Swift.String? = nil,
                status: Components.Schemas.LiveStreamHealthStatus.statusPayload? = nil
            ) {
                self.configurationIssues = configurationIssues
                self.lastUpdateTimeSeconds = lastUpdateTimeSeconds
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case configurationIssues
                case lastUpdateTimeSeconds
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse`.
        public struct LiveStreamListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of live streams that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/items`.
            public var items: [Components.Schemas.LiveStream]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `LiveStreamListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of live streams that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.LiveStream]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet`.
        public struct LiveStreamSnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet/channelId`.
            public var channelId: Swift.String?
            /// The stream's description. The value cannot be longer than 10000 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet/isDefaultStream`.
            public var isDefaultStream: Swift.Bool?
            /// The date and time that the stream was created.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// The stream's title. The value must be between 1 and 128 characters long.
            ///
            /// - Remark: Generated from `#/components/schemas/LiveStreamSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `LiveStreamSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
            ///   - description: The stream's description. The value cannot be longer than 10000 characters.
            ///   - isDefaultStream:
            ///   - publishedAt: The date and time that the stream was created.
            ///   - title: The stream's title. The value must be between 1 and 128 characters long.
            public init(
                channelId: Swift.String? = nil,
                description: Swift.String? = nil,
                isDefaultStream: Swift.Bool? = nil,
                publishedAt: Foundation.Date? = nil,
                title: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.description = description
                self.isDefaultStream = isDefaultStream
                self.publishedAt = publishedAt
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case description
                case isDefaultStream
                case publishedAt
                case title
            }
        }
        /// Brief description of the live stream status.
        ///
        /// - Remark: Generated from `#/components/schemas/LiveStreamStatus`.
        public struct LiveStreamStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiveStreamStatus/healthStatus`.
            public var healthStatus: Components.Schemas.LiveStreamHealthStatus?
            /// - Remark: Generated from `#/components/schemas/LiveStreamStatus/streamStatus`.
            @frozen public enum streamStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case created = "created"
                case ready = "ready"
                case active = "active"
                case inactive = "inactive"
                case error = "error"
            }
            /// - Remark: Generated from `#/components/schemas/LiveStreamStatus/streamStatus`.
            public var streamStatus: Components.Schemas.LiveStreamStatus.streamStatusPayload?
            /// Creates a new `LiveStreamStatus`.
            ///
            /// - Parameters:
            ///   - healthStatus:
            ///   - streamStatus:
            public init(
                healthStatus: Components.Schemas.LiveStreamHealthStatus? = nil,
                streamStatus: Components.Schemas.LiveStreamStatus.streamStatusPayload? = nil
            ) {
                self.healthStatus = healthStatus
                self.streamStatus = streamStatus
            }
            public enum CodingKeys: String, CodingKey {
                case healthStatus
                case streamStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/LocalizedProperty`.
        public struct LocalizedProperty: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LocalizedProperty/defaultLanguage`.
            public var defaultLanguage: Components.Schemas.LanguageTag?
            /// - Remark: Generated from `#/components/schemas/LocalizedProperty/localized`.
            public var localized: [Components.Schemas.LocalizedString]?
            /// Creates a new `LocalizedProperty`.
            ///
            /// - Parameters:
            ///   - defaultLanguage:
            ///   - localized:
            public init(
                defaultLanguage: Components.Schemas.LanguageTag? = nil,
                localized: [Components.Schemas.LocalizedString]? = nil
            ) {
                self.defaultLanguage = defaultLanguage
                self.localized = localized
            }
            public enum CodingKeys: String, CodingKey {
                case defaultLanguage
                case localized
            }
        }
        /// - Remark: Generated from `#/components/schemas/LocalizedString`.
        public struct LocalizedString: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LocalizedString/language`.
            public var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/LocalizedString/value`.
            public var value: Swift.String?
            /// Creates a new `LocalizedString`.
            ///
            /// - Parameters:
            ///   - language:
            ///   - value:
            public init(
                language: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.language = language
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case language
                case value
            }
        }
        /// A *member* resource represents a member for a YouTube channel. A member provides recurring monetary support to a creator and receives special benefits.
        ///
        /// - Remark: Generated from `#/components/schemas/Member`.
        public struct Member: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Member/etag`.
            public var etag: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#member".
            ///
            /// - Remark: Generated from `#/components/schemas/Member/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Member/snippet`.
            public var snippet: Components.Schemas.MemberSnippet?
            /// Creates a new `Member`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#member".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.MemberSnippet? = nil
            ) {
                self.etag = etag
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/MemberListResponse`.
        public struct MemberListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of members that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/items`.
            public var items: [Components.Schemas.Member]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#memberListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `MemberListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of members that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#memberListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Member]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case tokenPagination
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MemberSnippet`.
        public struct MemberSnippet: Codable, Hashable, Sendable {
            /// The id of the channel that's offering memberships.
            ///
            /// - Remark: Generated from `#/components/schemas/MemberSnippet/creatorChannelId`.
            public var creatorChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MemberSnippet/memberDetails`.
            public var memberDetails: Components.Schemas.ChannelProfileDetails?
            /// - Remark: Generated from `#/components/schemas/MemberSnippet/membershipsDetails`.
            public var membershipsDetails: Components.Schemas.MembershipsDetails?
            /// Creates a new `MemberSnippet`.
            ///
            /// - Parameters:
            ///   - creatorChannelId: The id of the channel that's offering memberships.
            ///   - memberDetails:
            ///   - membershipsDetails:
            public init(
                creatorChannelId: Swift.String? = nil,
                memberDetails: Components.Schemas.ChannelProfileDetails? = nil,
                membershipsDetails: Components.Schemas.MembershipsDetails? = nil
            ) {
                self.creatorChannelId = creatorChannelId
                self.memberDetails = memberDetails
                self.membershipsDetails = membershipsDetails
            }
            public enum CodingKeys: String, CodingKey {
                case creatorChannelId
                case memberDetails
                case membershipsDetails
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipsDetails`.
        public struct MembershipsDetails: Codable, Hashable, Sendable {
            /// Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDetails/accessibleLevels`.
            public var accessibleLevels: [Swift.String]?
            /// Id of the highest level that the user has access to at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDetails/highestAccessibleLevel`.
            public var highestAccessibleLevel: Swift.String?
            /// Display name for the highest level that the user has access to at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDetails/highestAccessibleLevelDisplayName`.
            public var highestAccessibleLevelDisplayName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MembershipsDetails/membershipsDuration`.
            public var membershipsDuration: Components.Schemas.MembershipsDuration?
            /// Data about memberships duration on particular pricing levels.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDetails/membershipsDurationAtLevels`.
            public var membershipsDurationAtLevels: [Components.Schemas.MembershipsDurationAtLevel]?
            /// Creates a new `MembershipsDetails`.
            ///
            /// - Parameters:
            ///   - accessibleLevels: Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
            ///   - highestAccessibleLevel: Id of the highest level that the user has access to at the moment.
            ///   - highestAccessibleLevelDisplayName: Display name for the highest level that the user has access to at the moment.
            ///   - membershipsDuration:
            ///   - membershipsDurationAtLevels: Data about memberships duration on particular pricing levels.
            public init(
                accessibleLevels: [Swift.String]? = nil,
                highestAccessibleLevel: Swift.String? = nil,
                highestAccessibleLevelDisplayName: Swift.String? = nil,
                membershipsDuration: Components.Schemas.MembershipsDuration? = nil,
                membershipsDurationAtLevels: [Components.Schemas.MembershipsDurationAtLevel]? = nil
            ) {
                self.accessibleLevels = accessibleLevels
                self.highestAccessibleLevel = highestAccessibleLevel
                self.highestAccessibleLevelDisplayName = highestAccessibleLevelDisplayName
                self.membershipsDuration = membershipsDuration
                self.membershipsDurationAtLevels = membershipsDurationAtLevels
            }
            public enum CodingKeys: String, CodingKey {
                case accessibleLevels
                case highestAccessibleLevel
                case highestAccessibleLevelDisplayName
                case membershipsDuration
                case membershipsDurationAtLevels
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipsDuration`.
        public struct MembershipsDuration: Codable, Hashable, Sendable {
            /// The date and time when the user became a continuous member across all levels.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDuration/memberSince`.
            public var memberSince: Swift.String?
            /// The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDuration/memberTotalDurationMonths`.
            public var memberTotalDurationMonths: Swift.Int32?
            /// Creates a new `MembershipsDuration`.
            ///
            /// - Parameters:
            ///   - memberSince: The date and time when the user became a continuous member across all levels.
            ///   - memberTotalDurationMonths: The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).
            public init(
                memberSince: Swift.String? = nil,
                memberTotalDurationMonths: Swift.Int32? = nil
            ) {
                self.memberSince = memberSince
                self.memberTotalDurationMonths = memberTotalDurationMonths
            }
            public enum CodingKeys: String, CodingKey {
                case memberSince
                case memberTotalDurationMonths
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipsDurationAtLevel`.
        public struct MembershipsDurationAtLevel: Codable, Hashable, Sendable {
            /// Pricing level ID.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDurationAtLevel/level`.
            public var level: Swift.String?
            /// The date and time when the user became a continuous member for the given level.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDurationAtLevel/memberSince`.
            public var memberSince: Swift.String?
            /// The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsDurationAtLevel/memberTotalDurationMonths`.
            public var memberTotalDurationMonths: Swift.Int32?
            /// Creates a new `MembershipsDurationAtLevel`.
            ///
            /// - Parameters:
            ///   - level: Pricing level ID.
            ///   - memberSince: The date and time when the user became a continuous member for the given level.
            ///   - memberTotalDurationMonths: The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
            public init(
                level: Swift.String? = nil,
                memberSince: Swift.String? = nil,
                memberTotalDurationMonths: Swift.Int32? = nil
            ) {
                self.level = level
                self.memberSince = memberSince
                self.memberTotalDurationMonths = memberTotalDurationMonths
            }
            public enum CodingKeys: String, CodingKey {
                case level
                case memberSince
                case memberTotalDurationMonths
            }
        }
        /// A *membershipsLevel* resource represents an offer made by YouTube creators for their fans. Users can become members of the channel by joining one of the available levels. They will provide recurring monetary support and receives special benefits.
        ///
        /// - Remark: Generated from `#/components/schemas/MembershipsLevel`.
        public struct MembershipsLevel: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevel/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the memberships level.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevel/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevel/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MembershipsLevel/snippet`.
            public var snippet: Components.Schemas.MembershipsLevelSnippet?
            /// Creates a new `MembershipsLevel`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the memberships level.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.MembershipsLevelSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse`.
        public struct MembershipsLevelListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of pricing levels offered by a creator to the fans.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse/items`.
            public var items: [Components.Schemas.MembershipsLevel]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `MembershipsLevelListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of pricing levels offered by a creator to the fans.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.MembershipsLevel]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MembershipsLevelSnippet`.
        public struct MembershipsLevelSnippet: Codable, Hashable, Sendable {
            /// The id of the channel that's offering channel memberships.
            ///
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelSnippet/creatorChannelId`.
            public var creatorChannelId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MembershipsLevelSnippet/levelDetails`.
            public var levelDetails: Components.Schemas.LevelDetails?
            /// Creates a new `MembershipsLevelSnippet`.
            ///
            /// - Parameters:
            ///   - creatorChannelId: The id of the channel that's offering channel memberships.
            ///   - levelDetails:
            public init(
                creatorChannelId: Swift.String? = nil,
                levelDetails: Components.Schemas.LevelDetails? = nil
            ) {
                self.creatorChannelId = creatorChannelId
                self.levelDetails = levelDetails
            }
            public enum CodingKeys: String, CodingKey {
                case creatorChannelId
                case levelDetails
            }
        }
        /// Settings and Info of the monitor stream
        ///
        /// - Remark: Generated from `#/components/schemas/MonitorStreamInfo`.
        public struct MonitorStreamInfo: Codable, Hashable, Sendable {
            /// If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
            ///
            /// - Remark: Generated from `#/components/schemas/MonitorStreamInfo/broadcastStreamDelayMs`.
            public var broadcastStreamDelayMs: Swift.Int?
            /// HTML code that embeds a player that plays the monitor stream.
            ///
            /// - Remark: Generated from `#/components/schemas/MonitorStreamInfo/embedHtml`.
            public var embedHtml: Swift.String?
            /// This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
            ///
            /// - Remark: Generated from `#/components/schemas/MonitorStreamInfo/enableMonitorStream`.
            public var enableMonitorStream: Swift.Bool?
            /// Creates a new `MonitorStreamInfo`.
            ///
            /// - Parameters:
            ///   - broadcastStreamDelayMs: If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
            ///   - embedHtml: HTML code that embeds a player that plays the monitor stream.
            ///   - enableMonitorStream: This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
            public init(
                broadcastStreamDelayMs: Swift.Int? = nil,
                embedHtml: Swift.String? = nil,
                enableMonitorStream: Swift.Bool? = nil
            ) {
                self.broadcastStreamDelayMs = broadcastStreamDelayMs
                self.embedHtml = embedHtml
                self.enableMonitorStream = enableMonitorStream
            }
            public enum CodingKeys: String, CodingKey {
                case broadcastStreamDelayMs
                case embedHtml
                case enableMonitorStream
            }
        }
        /// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
        ///
        /// - Remark: Generated from `#/components/schemas/PageInfo`.
        public struct PageInfo: Codable, Hashable, Sendable {
            /// The number of results included in the API response.
            ///
            /// - Remark: Generated from `#/components/schemas/PageInfo/resultsPerPage`.
            public var resultsPerPage: Swift.Int32?
            /// The total number of results in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PageInfo/totalResults`.
            public var totalResults: Swift.Int32?
            /// Creates a new `PageInfo`.
            ///
            /// - Parameters:
            ///   - resultsPerPage: The number of results included in the API response.
            ///   - totalResults: The total number of results in the result set.
            public init(
                resultsPerPage: Swift.Int32? = nil,
                totalResults: Swift.Int32? = nil
            ) {
                self.resultsPerPage = resultsPerPage
                self.totalResults = totalResults
            }
            public enum CodingKeys: String, CodingKey {
                case resultsPerPage
                case totalResults
            }
        }
        /// A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
        ///
        /// - Remark: Generated from `#/components/schemas/Playlist`.
        public struct Playlist: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Playlist/contentDetails`.
            public var contentDetails: Components.Schemas.PlaylistContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Playlist/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/Playlist/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
            ///
            /// - Remark: Generated from `#/components/schemas/Playlist/kind`.
            public var kind: Swift.String?
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/Playlist/localizations`.
            public struct localizationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.PlaylistLocalization]
                /// Creates a new `localizationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.PlaylistLocalization] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Localizations for different languages
            ///
            /// - Remark: Generated from `#/components/schemas/Playlist/localizations`.
            public var localizations: Components.Schemas.Playlist.localizationsPayload?
            /// - Remark: Generated from `#/components/schemas/Playlist/player`.
            public var player: Components.Schemas.PlaylistPlayer?
            /// - Remark: Generated from `#/components/schemas/Playlist/snippet`.
            public var snippet: Components.Schemas.PlaylistSnippet?
            /// - Remark: Generated from `#/components/schemas/Playlist/status`.
            public var status: Components.Schemas.PlaylistStatus?
            /// Creates a new `Playlist`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the playlist.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
            ///   - localizations: Localizations for different languages
            ///   - player:
            ///   - snippet:
            ///   - status:
            public init(
                contentDetails: Components.Schemas.PlaylistContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                localizations: Components.Schemas.Playlist.localizationsPayload? = nil,
                player: Components.Schemas.PlaylistPlayer? = nil,
                snippet: Components.Schemas.PlaylistSnippet? = nil,
                status: Components.Schemas.PlaylistStatus? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.localizations = localizations
                self.player = player
                self.snippet = snippet
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case localizations
                case player
                case snippet
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistContentDetails`.
        public struct PlaylistContentDetails: Codable, Hashable, Sendable {
            /// The number of videos in the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistContentDetails/itemCount`.
            public var itemCount: Swift.Int?
            /// Creates a new `PlaylistContentDetails`.
            ///
            /// - Parameters:
            ///   - itemCount: The number of videos in the playlist.
            public init(itemCount: Swift.Int? = nil) {
                self.itemCount = itemCount
            }
            public enum CodingKeys: String, CodingKey {
                case itemCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistImage`.
        public struct PlaylistImage: Codable, Hashable, Sendable {
            /// Identifies this resource (playlist id and image type).
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImage/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImages".
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImage/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistImage/snippet`.
            public var snippet: Components.Schemas.PlaylistImageSnippet?
            /// Creates a new `PlaylistImage`.
            ///
            /// - Parameters:
            ///   - id: Identifies this resource (playlist id and image type).
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImages".
            ///   - snippet:
            public init(
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.PlaylistImageSnippet? = nil
            ) {
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse`.
        public struct PlaylistImageListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse/items`.
            public var items: [Components.Schemas.PlaylistImage]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImageListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// Creates a new `PlaylistImageListResponse`.
            ///
            /// - Parameters:
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlistImageListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            public init(
                items: [Components.Schemas.PlaylistImage]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil
            ) {
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
            }
            public enum CodingKeys: String, CodingKey {
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
            }
        }
        /// A *playlistImage* resource identifies another resource, such as a image, that is associated with a playlist. In addition, the playlistImage resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistImages.list method to retrieve image data for any of those playlists. You can also add or remove images from those lists by calling the playlistImages.insert and playlistImages.delete methods.
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet`.
        public struct PlaylistImageSnippet: Codable, Hashable, Sendable {
            /// The image height.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet/height`.
            public var height: Swift.Int32?
            /// The Playlist ID of the playlist this image is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet/playlistId`.
            public var playlistId: Swift.String?
            /// The image type.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case hero = "hero"
            }
            /// The image type.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet/type`.
            public var _type: Components.Schemas.PlaylistImageSnippet._typePayload?
            /// The image width.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistImageSnippet/width`.
            public var width: Swift.Int32?
            /// Creates a new `PlaylistImageSnippet`.
            ///
            /// - Parameters:
            ///   - height: The image height.
            ///   - playlistId: The Playlist ID of the playlist this image is associated with.
            ///   - _type: The image type.
            ///   - width: The image width.
            public init(
                height: Swift.Int32? = nil,
                playlistId: Swift.String? = nil,
                _type: Components.Schemas.PlaylistImageSnippet._typePayload? = nil,
                width: Swift.Int32? = nil
            ) {
                self.height = height
                self.playlistId = playlistId
                self._type = _type
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case height
                case playlistId
                case _type = "type"
                case width
            }
        }
        /// A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistItem`.
        public struct PlaylistItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/contentDetails`.
            public var contentDetails: Components.Schemas.PlaylistItemContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the playlist item.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/snippet`.
            public var snippet: Components.Schemas.PlaylistItemSnippet?
            /// - Remark: Generated from `#/components/schemas/PlaylistItem/status`.
            public var status: Components.Schemas.PlaylistItemStatus?
            /// Creates a new `PlaylistItem`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the playlist item.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
            ///   - snippet:
            ///   - status:
            public init(
                contentDetails: Components.Schemas.PlaylistItemContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.PlaylistItemSnippet? = nil,
                status: Components.Schemas.PlaylistItemStatus? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case snippet
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails`.
        public struct PlaylistItemContentDetails: Codable, Hashable, Sendable {
            /// The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails/endAt`.
            @available(*, deprecated)
            public var endAt: Swift.String?
            /// A user-generated note for this item.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails/note`.
            public var note: Swift.String?
            /// The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails/startAt`.
            @available(*, deprecated)
            public var startAt: Swift.String?
            /// The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails/videoId`.
            public var videoId: Swift.String?
            /// The date and time that the video was published to YouTube.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemContentDetails/videoPublishedAt`.
            public var videoPublishedAt: Foundation.Date?
            /// Creates a new `PlaylistItemContentDetails`.
            ///
            /// - Parameters:
            ///   - endAt: The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
            ///   - note: A user-generated note for this item.
            ///   - startAt: The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
            ///   - videoId: The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
            ///   - videoPublishedAt: The date and time that the video was published to YouTube.
            public init(
                endAt: Swift.String? = nil,
                note: Swift.String? = nil,
                startAt: Swift.String? = nil,
                videoId: Swift.String? = nil,
                videoPublishedAt: Foundation.Date? = nil
            ) {
                self.endAt = endAt
                self.note = note
                self.startAt = startAt
                self.videoId = videoId
                self.videoPublishedAt = videoPublishedAt
            }
            public enum CodingKeys: String, CodingKey {
                case endAt
                case note
                case startAt
                case videoId
                case videoPublishedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse`.
        public struct PlaylistItemListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/eventId`.
            public var eventId: Swift.String?
            /// A list of playlist items that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/items`.
            public var items: [Components.Schemas.PlaylistItem]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse". Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemListResponse/visitorId`.
            public var visitorId: Swift.String?
            /// Creates a new `PlaylistItemListResponse`.
            ///
            /// - Parameters:
            ///   - etag:
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of playlist items that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse". Etag of this resource.
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.PlaylistItem]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet`.
        public struct PlaylistItemSnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/channelId`.
            public var channelId: Swift.String?
            /// Channel title for the channel that the playlist item belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// The item's description.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/description`.
            public var description: Swift.String?
            /// The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/playlistId`.
            public var playlistId: Swift.String?
            /// The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/position`.
            public var position: Swift.Int?
            /// The date and time that the item was added to the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The item's title.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/title`.
            public var title: Swift.String?
            /// Channel id for the channel this video belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/videoOwnerChannelId`.
            public var videoOwnerChannelId: Swift.String?
            /// Channel title for the channel this video belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemSnippet/videoOwnerChannelTitle`.
            public var videoOwnerChannelTitle: Swift.String?
            /// Creates a new `PlaylistItemSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
            ///   - channelTitle: Channel title for the channel that the playlist item belongs to.
            ///   - description: The item's description.
            ///   - playlistId: The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
            ///   - position: The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
            ///   - publishedAt: The date and time that the item was added to the playlist.
            ///   - resourceId:
            ///   - thumbnails:
            ///   - title: The item's title.
            ///   - videoOwnerChannelId: Channel id for the channel this video belongs to.
            ///   - videoOwnerChannelTitle: Channel title for the channel this video belongs to.
            public init(
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                description: Swift.String? = nil,
                playlistId: Swift.String? = nil,
                position: Swift.Int? = nil,
                publishedAt: Foundation.Date? = nil,
                resourceId: Components.Schemas.ResourceId? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil,
                videoOwnerChannelId: Swift.String? = nil,
                videoOwnerChannelTitle: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.description = description
                self.playlistId = playlistId
                self.position = position
                self.publishedAt = publishedAt
                self.resourceId = resourceId
                self.thumbnails = thumbnails
                self.title = title
                self.videoOwnerChannelId = videoOwnerChannelId
                self.videoOwnerChannelTitle = videoOwnerChannelTitle
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelTitle
                case description
                case playlistId
                case position
                case publishedAt
                case resourceId
                case thumbnails
                case title
                case videoOwnerChannelId
                case videoOwnerChannelTitle
            }
        }
        /// Information about the playlist item's privacy status.
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistItemStatus`.
        public struct PlaylistItemStatus: Codable, Hashable, Sendable {
            /// This resource's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemStatus/privacyStatus`.
            @frozen public enum privacyStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// This resource's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistItemStatus/privacyStatus`.
            public var privacyStatus: Components.Schemas.PlaylistItemStatus.privacyStatusPayload?
            /// Creates a new `PlaylistItemStatus`.
            ///
            /// - Parameters:
            ///   - privacyStatus: This resource's privacy status.
            public init(privacyStatus: Components.Schemas.PlaylistItemStatus.privacyStatusPayload? = nil) {
                self.privacyStatus = privacyStatus
            }
            public enum CodingKeys: String, CodingKey {
                case privacyStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistListResponse`.
        public struct PlaylistListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of playlists that match the request criteria
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/items`.
            public var items: [Components.Schemas.Playlist]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `PlaylistListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of playlists that match the request criteria
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Playlist]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Playlist localization setting
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistLocalization`.
        public struct PlaylistLocalization: Codable, Hashable, Sendable {
            /// The localized strings for playlist's description.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistLocalization/description`.
            public var description: Swift.String?
            /// The localized strings for playlist's title.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistLocalization/title`.
            public var title: Swift.String?
            /// Creates a new `PlaylistLocalization`.
            ///
            /// - Parameters:
            ///   - description: The localized strings for playlist's description.
            ///   - title: The localized strings for playlist's title.
            public init(
                description: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.description = description
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistPlayer`.
        public struct PlaylistPlayer: Codable, Hashable, Sendable {
            /// An <iframe> tag that embeds a player that will play the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistPlayer/embedHtml`.
            public var embedHtml: Swift.String?
            /// Creates a new `PlaylistPlayer`.
            ///
            /// - Parameters:
            ///   - embedHtml: An <iframe> tag that embeds a player that will play the playlist.
            public init(embedHtml: Swift.String? = nil) {
                self.embedHtml = embedHtml
            }
            public enum CodingKeys: String, CodingKey {
                case embedHtml
            }
        }
        /// Basic details about a playlist, including title, description and thumbnails.
        ///
        /// - Remark: Generated from `#/components/schemas/PlaylistSnippet`.
        public struct PlaylistSnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the channel that published the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/channelId`.
            public var channelId: Swift.String?
            /// The channel title of the channel that the video belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// The language of the playlist's default title and description.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/defaultLanguage`.
            public var defaultLanguage: Swift.String?
            /// The playlist's description.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/localized`.
            public var localized: Components.Schemas.PlaylistLocalization?
            /// The date and time that the playlist was created.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// Keyword tags associated with the playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/tags`.
            @available(*, deprecated)
            public var tags: [Swift.String]?
            /// Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/thumbnailVideoId`.
            public var thumbnailVideoId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The playlist's title.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `PlaylistSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel that published the playlist.
            ///   - channelTitle: The channel title of the channel that the video belongs to.
            ///   - defaultLanguage: The language of the playlist's default title and description.
            ///   - description: The playlist's description.
            ///   - localized:
            ///   - publishedAt: The date and time that the playlist was created.
            ///   - tags: Keyword tags associated with the playlist.
            ///   - thumbnailVideoId: Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
            ///   - thumbnails:
            ///   - title: The playlist's title.
            public init(
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                defaultLanguage: Swift.String? = nil,
                description: Swift.String? = nil,
                localized: Components.Schemas.PlaylistLocalization? = nil,
                publishedAt: Foundation.Date? = nil,
                tags: [Swift.String]? = nil,
                thumbnailVideoId: Swift.String? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.defaultLanguage = defaultLanguage
                self.description = description
                self.localized = localized
                self.publishedAt = publishedAt
                self.tags = tags
                self.thumbnailVideoId = thumbnailVideoId
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelTitle
                case defaultLanguage
                case description
                case localized
                case publishedAt
                case tags
                case thumbnailVideoId
                case thumbnails
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistStatus`.
        public struct PlaylistStatus: Codable, Hashable, Sendable {
            /// The playlist's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistStatus/privacyStatus`.
            @frozen public enum privacyStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// The playlist's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/PlaylistStatus/privacyStatus`.
            public var privacyStatus: Components.Schemas.PlaylistStatus.privacyStatusPayload?
            /// Creates a new `PlaylistStatus`.
            ///
            /// - Parameters:
            ///   - privacyStatus: The playlist's privacy status.
            public init(privacyStatus: Components.Schemas.PlaylistStatus.privacyStatusPayload? = nil) {
                self.privacyStatus = privacyStatus
            }
            public enum CodingKeys: String, CodingKey {
                case privacyStatus
            }
        }
        /// A pair Property / Value.
        ///
        /// - Remark: Generated from `#/components/schemas/PropertyValue`.
        public struct PropertyValue: Codable, Hashable, Sendable {
            /// A property.
            ///
            /// - Remark: Generated from `#/components/schemas/PropertyValue/property`.
            public var property: Swift.String?
            /// The property's value.
            ///
            /// - Remark: Generated from `#/components/schemas/PropertyValue/value`.
            public var value: Swift.String?
            /// Creates a new `PropertyValue`.
            ///
            /// - Parameters:
            ///   - property: A property.
            ///   - value: The property's value.
            public init(
                property: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.property = property
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case property
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/RelatedEntity`.
        public struct RelatedEntity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RelatedEntity/entity`.
            public var entity: Components.Schemas.Entity?
            /// Creates a new `RelatedEntity`.
            ///
            /// - Parameters:
            ///   - entity:
            public init(entity: Components.Schemas.Entity? = nil) {
                self.entity = entity
            }
            public enum CodingKeys: String, CodingKey {
                case entity
            }
        }
        /// A resource id is a generic reference that points to another YouTube resource.
        ///
        /// - Remark: Generated from `#/components/schemas/ResourceId`.
        public struct ResourceId: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
            ///
            /// - Remark: Generated from `#/components/schemas/ResourceId/channelId`.
            public var channelId: Swift.String?
            /// The type of the API resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ResourceId/kind`.
            public var kind: Swift.String?
            /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
            ///
            /// - Remark: Generated from `#/components/schemas/ResourceId/playlistId`.
            public var playlistId: Swift.String?
            /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
            ///
            /// - Remark: Generated from `#/components/schemas/ResourceId/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `ResourceId`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
            ///   - kind: The type of the API resource.
            ///   - playlistId: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
            ///   - videoId: The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
            public init(
                channelId: Swift.String? = nil,
                kind: Swift.String? = nil,
                playlistId: Swift.String? = nil,
                videoId: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.kind = kind
                self.playlistId = playlistId
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case kind
                case playlistId
                case videoId
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchListResponse`.
        public struct SearchListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/eventId`.
            public var eventId: Swift.String?
            /// Pagination information for token pagination.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/items`.
            public var items: [Components.Schemas.SearchResult]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/regionCode`.
            public var regionCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchListResponse/visitorId`.
            public var visitorId: Swift.String?
            /// Creates a new `SearchListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: Pagination information for token pagination.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - regionCode:
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.SearchResult]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                regionCode: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.regionCode = regionCode
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case regionCode
                case tokenPagination
                case visitorId
            }
        }
        /// A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.
        ///
        /// - Remark: Generated from `#/components/schemas/SearchResult`.
        public struct SearchResult: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResult/etag`.
            public var etag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchResult/id`.
            public var id: Components.Schemas.ResourceId?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResult/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SearchResult/snippet`.
            public var snippet: Components.Schemas.SearchResultSnippet?
            /// Creates a new `SearchResult`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Components.Schemas.ResourceId? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.SearchResultSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
        ///
        /// - Remark: Generated from `#/components/schemas/SearchResultSnippet`.
        public struct SearchResultSnippet: Codable, Hashable, Sendable {
            /// The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/channelId`.
            public var channelId: Swift.String?
            /// The title of the channel that published the resource that the search result identifies.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// A description of the search result.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/description`.
            public var description: Swift.String?
            /// It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/liveBroadcastContent`.
            @frozen public enum liveBroadcastContentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case upcoming = "upcoming"
                case live = "live"
                case completed = "completed"
            }
            /// It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/liveBroadcastContent`.
            public var liveBroadcastContent: Components.Schemas.SearchResultSnippet.liveBroadcastContentPayload?
            /// The creation date and time of the resource that the search result identifies.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The title of the search result.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchResultSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `SearchResultSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
            ///   - channelTitle: The title of the channel that published the resource that the search result identifies.
            ///   - description: A description of the search result.
            ///   - liveBroadcastContent: It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
            ///   - publishedAt: The creation date and time of the resource that the search result identifies.
            ///   - thumbnails:
            ///   - title: The title of the search result.
            public init(
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                description: Swift.String? = nil,
                liveBroadcastContent: Components.Schemas.SearchResultSnippet.liveBroadcastContentPayload? = nil,
                publishedAt: Foundation.Date? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.description = description
                self.liveBroadcastContent = liveBroadcastContent
                self.publishedAt = publishedAt
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelTitle
                case description
                case liveBroadcastContent
                case publishedAt
                case thumbnails
                case title
            }
        }
        /// A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
        ///
        /// - Remark: Generated from `#/components/schemas/Subscription`.
        public struct Subscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subscription/contentDetails`.
            public var contentDetails: Components.Schemas.SubscriptionContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Subscription/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the subscription.
            ///
            /// - Remark: Generated from `#/components/schemas/Subscription/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
            ///
            /// - Remark: Generated from `#/components/schemas/Subscription/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Subscription/snippet`.
            public var snippet: Components.Schemas.SubscriptionSnippet?
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriberSnippet`.
            public var subscriberSnippet: Components.Schemas.SubscriptionSubscriberSnippet?
            /// Creates a new `Subscription`.
            ///
            /// - Parameters:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the subscription.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
            ///   - snippet:
            ///   - subscriberSnippet:
            public init(
                contentDetails: Components.Schemas.SubscriptionContentDetails? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.SubscriptionSnippet? = nil,
                subscriberSnippet: Components.Schemas.SubscriptionSubscriberSnippet? = nil
            ) {
                self.contentDetails = contentDetails
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
                self.subscriberSnippet = subscriberSnippet
            }
            public enum CodingKeys: String, CodingKey {
                case contentDetails
                case etag
                case id
                case kind
                case snippet
                case subscriberSnippet
            }
        }
        /// Details about the content to witch a subscription refers.
        ///
        /// - Remark: Generated from `#/components/schemas/SubscriptionContentDetails`.
        public struct SubscriptionContentDetails: Codable, Hashable, Sendable {
            /// The type of activity this subscription is for (only uploads, everything).
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionContentDetails/activityType`.
            @frozen public enum activityTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case subscriptionActivityTypeUnspecified = "subscriptionActivityTypeUnspecified"
                case all = "all"
                case uploads = "uploads"
            }
            /// The type of activity this subscription is for (only uploads, everything).
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionContentDetails/activityType`.
            public var activityType: Components.Schemas.SubscriptionContentDetails.activityTypePayload?
            /// The number of new items in the subscription since its content was last read.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionContentDetails/newItemCount`.
            public var newItemCount: Swift.Int?
            /// The approximate number of items that the subscription points to.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionContentDetails/totalItemCount`.
            public var totalItemCount: Swift.Int?
            /// Creates a new `SubscriptionContentDetails`.
            ///
            /// - Parameters:
            ///   - activityType: The type of activity this subscription is for (only uploads, everything).
            ///   - newItemCount: The number of new items in the subscription since its content was last read.
            ///   - totalItemCount: The approximate number of items that the subscription points to.
            public init(
                activityType: Components.Schemas.SubscriptionContentDetails.activityTypePayload? = nil,
                newItemCount: Swift.Int? = nil,
                totalItemCount: Swift.Int? = nil
            ) {
                self.activityType = activityType
                self.newItemCount = newItemCount
                self.totalItemCount = totalItemCount
            }
            public enum CodingKeys: String, CodingKey {
                case activityType
                case newItemCount
                case totalItemCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse`.
        public struct SubscriptionListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of subscriptions that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/items`.
            public var items: [Components.Schemas.Subscription]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `SubscriptionListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of subscriptions that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Subscription]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Basic details about a subscription, including title, description and thumbnails of the subscribed item.
        ///
        /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet`.
        public struct SubscriptionSnippet: Codable, Hashable, Sendable {
            /// The ID that YouTube uses to uniquely identify the subscriber's channel.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/channelId`.
            public var channelId: Swift.String?
            /// Channel title for the channel that the subscription belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// The subscription's details.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/description`.
            public var description: Swift.String?
            /// The date and time that the subscription was created.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/resourceId`.
            public var resourceId: Components.Schemas.ResourceId?
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The subscription's title.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `SubscriptionSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The ID that YouTube uses to uniquely identify the subscriber's channel.
            ///   - channelTitle: Channel title for the channel that the subscription belongs to.
            ///   - description: The subscription's details.
            ///   - publishedAt: The date and time that the subscription was created.
            ///   - resourceId:
            ///   - thumbnails:
            ///   - title: The subscription's title.
            public init(
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                description: Swift.String? = nil,
                publishedAt: Foundation.Date? = nil,
                resourceId: Components.Schemas.ResourceId? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.description = description
                self.publishedAt = publishedAt
                self.resourceId = resourceId
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case channelTitle
                case description
                case publishedAt
                case resourceId
                case thumbnails
                case title
            }
        }
        /// Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
        ///
        /// - Remark: Generated from `#/components/schemas/SubscriptionSubscriberSnippet`.
        public struct SubscriptionSubscriberSnippet: Codable, Hashable, Sendable {
            /// The channel ID of the subscriber.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSubscriberSnippet/channelId`.
            public var channelId: Swift.String?
            /// The description of the subscriber.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSubscriberSnippet/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SubscriptionSubscriberSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The title of the subscriber.
            ///
            /// - Remark: Generated from `#/components/schemas/SubscriptionSubscriberSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `SubscriptionSubscriberSnippet`.
            ///
            /// - Parameters:
            ///   - channelId: The channel ID of the subscriber.
            ///   - description: The description of the subscriber.
            ///   - thumbnails:
            ///   - title: The title of the subscriber.
            public init(
                channelId: Swift.String? = nil,
                description: Swift.String? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.channelId = channelId
                self.description = description
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case channelId
                case description
                case thumbnails
                case title
            }
        }
        /// A `__superChatEvent__` resource represents a Super Chat purchase on a YouTube channel.
        ///
        /// - Remark: Generated from `#/components/schemas/SuperChatEvent`.
        public struct SuperChatEvent: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEvent/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube assigns to uniquely identify the Super Chat event.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEvent/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string `"youtube#superChatEvent"`.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEvent/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SuperChatEvent/snippet`.
            public var snippet: Components.Schemas.SuperChatEventSnippet?
            /// Creates a new `SuperChatEvent`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube assigns to uniquely identify the Super Chat event.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string `"youtube#superChatEvent"`.
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.SuperChatEventSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse`.
        public struct SuperChatEventListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of Super Chat purchases that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/items`.
            public var items: [Components.Schemas.SuperChatEvent]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `SuperChatEventListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of Super Chat purchases that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.SuperChatEvent]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case tokenPagination
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet`.
        public struct SuperChatEventSnippet: Codable, Hashable, Sendable {
            /// The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/amountMicros`.
            public var amountMicros: Swift.String?
            /// Channel id where the event occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/channelId`.
            public var channelId: Swift.String?
            /// The text contents of the comment left by the user.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/commentText`.
            public var commentText: Swift.String?
            /// The date and time when the event occurred.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/createdAt`.
            public var createdAt: Foundation.Date?
            /// The currency in which the purchase was made. ISO 4217.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/currency`.
            public var currency: Swift.String?
            /// A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/displayString`.
            public var displayString: Swift.String?
            /// True if this event is a Super Sticker event.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/isSuperStickerEvent`.
            public var isSuperStickerEvent: Swift.Bool?
            /// The tier for the paid message, which is based on the amount of money spent to purchase the message.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/messageType`.
            public var messageType: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/superStickerMetadata`.
            public var superStickerMetadata: Components.Schemas.SuperStickerMetadata?
            /// - Remark: Generated from `#/components/schemas/SuperChatEventSnippet/supporterDetails`.
            public var supporterDetails: Components.Schemas.ChannelProfileDetails?
            /// Creates a new `SuperChatEventSnippet`.
            ///
            /// - Parameters:
            ///   - amountMicros: The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
            ///   - channelId: Channel id where the event occurred.
            ///   - commentText: The text contents of the comment left by the user.
            ///   - createdAt: The date and time when the event occurred.
            ///   - currency: The currency in which the purchase was made. ISO 4217.
            ///   - displayString: A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
            ///   - isSuperStickerEvent: True if this event is a Super Sticker event.
            ///   - messageType: The tier for the paid message, which is based on the amount of money spent to purchase the message.
            ///   - superStickerMetadata:
            ///   - supporterDetails:
            public init(
                amountMicros: Swift.String? = nil,
                channelId: Swift.String? = nil,
                commentText: Swift.String? = nil,
                createdAt: Foundation.Date? = nil,
                currency: Swift.String? = nil,
                displayString: Swift.String? = nil,
                isSuperStickerEvent: Swift.Bool? = nil,
                messageType: Swift.Int? = nil,
                superStickerMetadata: Components.Schemas.SuperStickerMetadata? = nil,
                supporterDetails: Components.Schemas.ChannelProfileDetails? = nil
            ) {
                self.amountMicros = amountMicros
                self.channelId = channelId
                self.commentText = commentText
                self.createdAt = createdAt
                self.currency = currency
                self.displayString = displayString
                self.isSuperStickerEvent = isSuperStickerEvent
                self.messageType = messageType
                self.superStickerMetadata = superStickerMetadata
                self.supporterDetails = supporterDetails
            }
            public enum CodingKeys: String, CodingKey {
                case amountMicros
                case channelId
                case commentText
                case createdAt
                case currency
                case displayString
                case isSuperStickerEvent
                case messageType
                case superStickerMetadata
                case supporterDetails
            }
        }
        /// - Remark: Generated from `#/components/schemas/SuperStickerMetadata`.
        public struct SuperStickerMetadata: Codable, Hashable, Sendable {
            /// Internationalized alt text that describes the sticker image and any animation associated with it.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperStickerMetadata/altText`.
            public var altText: Swift.String?
            /// Specifies the localization language in which the alt text is returned.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperStickerMetadata/altTextLanguage`.
            public var altTextLanguage: Swift.String?
            /// Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
            ///
            /// - Remark: Generated from `#/components/schemas/SuperStickerMetadata/stickerId`.
            public var stickerId: Swift.String?
            /// Creates a new `SuperStickerMetadata`.
            ///
            /// - Parameters:
            ///   - altText: Internationalized alt text that describes the sticker image and any animation associated with it.
            ///   - altTextLanguage: Specifies the localization language in which the alt text is returned.
            ///   - stickerId: Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
            public init(
                altText: Swift.String? = nil,
                altTextLanguage: Swift.String? = nil,
                stickerId: Swift.String? = nil
            ) {
                self.altText = altText
                self.altTextLanguage = altTextLanguage
                self.stickerId = stickerId
            }
            public enum CodingKeys: String, CodingKey {
                case altText
                case altTextLanguage
                case stickerId
            }
        }
        /// - Remark: Generated from `#/components/schemas/TestItem`.
        public struct TestItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TestItem/featuredPart`.
            public var featuredPart: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TestItem/gaia`.
            public var gaia: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TestItem/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TestItem/snippet`.
            public var snippet: Components.Schemas.TestItemTestItemSnippet?
            /// Creates a new `TestItem`.
            ///
            /// - Parameters:
            ///   - featuredPart:
            ///   - gaia:
            ///   - id:
            ///   - snippet:
            public init(
                featuredPart: Swift.Bool? = nil,
                gaia: Swift.String? = nil,
                id: Swift.String? = nil,
                snippet: Components.Schemas.TestItemTestItemSnippet? = nil
            ) {
                self.featuredPart = featuredPart
                self.gaia = gaia
                self.id = id
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case featuredPart
                case gaia
                case id
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/TestItemTestItemSnippet`.
        public typealias TestItemTestItemSnippet = OpenAPIRuntime.OpenAPIObjectContainer
        /// A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.
        ///
        /// - Remark: Generated from `#/components/schemas/ThirdPartyLink`.
        public struct ThirdPartyLink: Codable, Hashable, Sendable {
            /// Etag of this resource
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLink/etag`.
            public var etag: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLink/kind`.
            public var kind: Swift.String?
            /// The linking_token identifies a YouTube account and channel with which the third party account is linked.
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLink/linkingToken`.
            public var linkingToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLink/snippet`.
            public var snippet: Components.Schemas.ThirdPartyLinkSnippet?
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLink/status`.
            public var status: Components.Schemas.ThirdPartyLinkStatus?
            /// Creates a new `ThirdPartyLink`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
            ///   - linkingToken: The linking_token identifies a YouTube account and channel with which the third party account is linked.
            ///   - snippet:
            ///   - status:
            public init(
                etag: Swift.String? = nil,
                kind: Swift.String? = nil,
                linkingToken: Swift.String? = nil,
                snippet: Components.Schemas.ThirdPartyLinkSnippet? = nil,
                status: Components.Schemas.ThirdPartyLinkStatus? = nil
            ) {
                self.etag = etag
                self.kind = kind
                self.linkingToken = linkingToken
                self.snippet = snippet
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case kind
                case linkingToken
                case snippet
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkListResponse`.
        public struct ThirdPartyLinkListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkListResponse/etag`.
            public var etag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkListResponse/items`.
            public var items: [Components.Schemas.ThirdPartyLink]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLinkListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkListResponse/kind`.
            public var kind: Swift.String?
            /// Creates a new `ThirdPartyLinkListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLinkListResponse".
            public init(
                etag: Swift.String? = nil,
                items: [Components.Schemas.ThirdPartyLink]? = nil,
                kind: Swift.String? = nil
            ) {
                self.etag = etag
                self.items = items
                self.kind = kind
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case items
                case kind
            }
        }
        /// Basic information about a third party account link, including its type and type-specific information.
        ///
        /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkSnippet`.
        public struct ThirdPartyLinkSnippet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkSnippet/channelToStoreLink`.
            public var channelToStoreLink: Components.Schemas.ChannelToStoreLinkDetails?
            /// Type of the link named after the entities that are being linked.
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkSnippet/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case linkUnspecified = "linkUnspecified"
                case channelToStoreLink = "channelToStoreLink"
            }
            /// Type of the link named after the entities that are being linked.
            ///
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkSnippet/type`.
            public var _type: Components.Schemas.ThirdPartyLinkSnippet._typePayload?
            /// Creates a new `ThirdPartyLinkSnippet`.
            ///
            /// - Parameters:
            ///   - channelToStoreLink:
            ///   - _type: Type of the link named after the entities that are being linked.
            public init(
                channelToStoreLink: Components.Schemas.ChannelToStoreLinkDetails? = nil,
                _type: Components.Schemas.ThirdPartyLinkSnippet._typePayload? = nil
            ) {
                self.channelToStoreLink = channelToStoreLink
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case channelToStoreLink
                case _type = "type"
            }
        }
        /// The third-party link status object contains information about the status of the link.
        ///
        /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkStatus`.
        public struct ThirdPartyLinkStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkStatus/linkStatus`.
            @frozen public enum linkStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unknown = "unknown"
                case failed = "failed"
                case pending = "pending"
                case linked = "linked"
            }
            /// - Remark: Generated from `#/components/schemas/ThirdPartyLinkStatus/linkStatus`.
            public var linkStatus: Components.Schemas.ThirdPartyLinkStatus.linkStatusPayload?
            /// Creates a new `ThirdPartyLinkStatus`.
            ///
            /// - Parameters:
            ///   - linkStatus:
            public init(linkStatus: Components.Schemas.ThirdPartyLinkStatus.linkStatusPayload? = nil) {
                self.linkStatus = linkStatus
            }
            public enum CodingKeys: String, CodingKey {
                case linkStatus
            }
        }
        /// A thumbnail is an image representing a YouTube resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Thumbnail`.
        public struct Thumbnail: Codable, Hashable, Sendable {
            /// (Optional) Height of the thumbnail image.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/height`.
            public var height: Swift.Int?
            /// The thumbnail image's URL.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/url`.
            public var url: Swift.String?
            /// (Optional) Width of the thumbnail image.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/width`.
            public var width: Swift.Int?
            /// Creates a new `Thumbnail`.
            ///
            /// - Parameters:
            ///   - height: (Optional) Height of the thumbnail image.
            ///   - url: The thumbnail image's URL.
            ///   - width: (Optional) Width of the thumbnail image.
            public init(
                height: Swift.Int? = nil,
                url: Swift.String? = nil,
                width: Swift.Int? = nil
            ) {
                self.height = height
                self.url = url
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case height
                case url
                case width
            }
        }
        /// Internal representation of thumbnails for a YouTube resource.
        ///
        /// - Remark: Generated from `#/components/schemas/ThumbnailDetails`.
        public struct ThumbnailDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThumbnailDetails/high`.
            public var high: Components.Schemas.Thumbnail?
            /// - Remark: Generated from `#/components/schemas/ThumbnailDetails/maxres`.
            public var maxres: Components.Schemas.Thumbnail?
            /// - Remark: Generated from `#/components/schemas/ThumbnailDetails/medium`.
            public var medium: Components.Schemas.Thumbnail?
            /// - Remark: Generated from `#/components/schemas/ThumbnailDetails/standard`.
            public var standard: Components.Schemas.Thumbnail?
            /// Creates a new `ThumbnailDetails`.
            ///
            /// - Parameters:
            ///   - high:
            ///   - maxres:
            ///   - medium:
            ///   - standard:
            public init(
                high: Components.Schemas.Thumbnail? = nil,
                maxres: Components.Schemas.Thumbnail? = nil,
                medium: Components.Schemas.Thumbnail? = nil,
                standard: Components.Schemas.Thumbnail? = nil
            ) {
                self.high = high
                self.maxres = maxres
                self.medium = medium
                self.standard = standard
            }
            public enum CodingKeys: String, CodingKey {
                case high
                case maxres
                case medium
                case standard
            }
        }
        /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse`.
        public struct ThumbnailSetResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of thumbnails.
            ///
            /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse/items`.
            public var items: [Components.Schemas.ThumbnailDetails]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/ThumbnailSetResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `ThumbnailSetResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of thumbnails.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.ThumbnailDetails]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// Stub token pagination template to suppress results.
        ///
        /// - Remark: Generated from `#/components/schemas/TokenPagination`.
        public typealias TokenPagination = OpenAPIRuntime.OpenAPIObjectContainer
        /// A *video* resource represents a YouTube video.
        ///
        /// - Remark: Generated from `#/components/schemas/Video`.
        public struct Video: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Video/ageGating`.
            public var ageGating: Components.Schemas.VideoAgeGating?
            /// - Remark: Generated from `#/components/schemas/Video/contentDetails`.
            public var contentDetails: Components.Schemas.VideoContentDetails?
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/etag`.
            public var etag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Video/fileDetails`.
            public var fileDetails: Components.Schemas.VideoFileDetails?
            /// The ID that YouTube uses to uniquely identify the video.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#video".
            ///
            /// - Remark: Generated from `#/components/schemas/Video/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Video/liveStreamingDetails`.
            public var liveStreamingDetails: Components.Schemas.VideoLiveStreamingDetails?
            /// The localizations object contains localized versions of the basic details about the video, such as its title and description.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/localizations`.
            public struct localizationsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.VideoLocalization]
                /// Creates a new `localizationsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.VideoLocalization] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The localizations object contains localized versions of the basic details about the video, such as its title and description.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/localizations`.
            public var localizations: Components.Schemas.Video.localizationsPayload?
            /// - Remark: Generated from `#/components/schemas/Video/monetizationDetails`.
            public var monetizationDetails: Components.Schemas.VideoMonetizationDetails?
            /// - Remark: Generated from `#/components/schemas/Video/player`.
            public var player: Components.Schemas.VideoPlayer?
            /// - Remark: Generated from `#/components/schemas/Video/processingDetails`.
            public var processingDetails: Components.Schemas.VideoProcessingDetails?
            /// - Remark: Generated from `#/components/schemas/Video/projectDetails`.
            public var projectDetails: Components.Schemas.VideoProjectDetails?
            /// - Remark: Generated from `#/components/schemas/Video/recordingDetails`.
            public var recordingDetails: Components.Schemas.VideoRecordingDetails?
            /// - Remark: Generated from `#/components/schemas/Video/snippet`.
            public var snippet: Components.Schemas.VideoSnippet?
            /// - Remark: Generated from `#/components/schemas/Video/statistics`.
            public var statistics: Components.Schemas.VideoStatistics?
            /// - Remark: Generated from `#/components/schemas/Video/status`.
            public var status: Components.Schemas.VideoStatus?
            /// - Remark: Generated from `#/components/schemas/Video/suggestions`.
            public var suggestions: Components.Schemas.VideoSuggestions?
            /// - Remark: Generated from `#/components/schemas/Video/topicDetails`.
            public var topicDetails: Components.Schemas.VideoTopicDetails?
            /// Creates a new `Video`.
            ///
            /// - Parameters:
            ///   - ageGating:
            ///   - contentDetails:
            ///   - etag: Etag of this resource.
            ///   - fileDetails:
            ///   - id: The ID that YouTube uses to uniquely identify the video.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#video".
            ///   - liveStreamingDetails:
            ///   - localizations: The localizations object contains localized versions of the basic details about the video, such as its title and description.
            ///   - monetizationDetails:
            ///   - player:
            ///   - processingDetails:
            ///   - projectDetails:
            ///   - recordingDetails:
            ///   - snippet:
            ///   - statistics:
            ///   - status:
            ///   - suggestions:
            ///   - topicDetails:
            public init(
                ageGating: Components.Schemas.VideoAgeGating? = nil,
                contentDetails: Components.Schemas.VideoContentDetails? = nil,
                etag: Swift.String? = nil,
                fileDetails: Components.Schemas.VideoFileDetails? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                liveStreamingDetails: Components.Schemas.VideoLiveStreamingDetails? = nil,
                localizations: Components.Schemas.Video.localizationsPayload? = nil,
                monetizationDetails: Components.Schemas.VideoMonetizationDetails? = nil,
                player: Components.Schemas.VideoPlayer? = nil,
                processingDetails: Components.Schemas.VideoProcessingDetails? = nil,
                projectDetails: Components.Schemas.VideoProjectDetails? = nil,
                recordingDetails: Components.Schemas.VideoRecordingDetails? = nil,
                snippet: Components.Schemas.VideoSnippet? = nil,
                statistics: Components.Schemas.VideoStatistics? = nil,
                status: Components.Schemas.VideoStatus? = nil,
                suggestions: Components.Schemas.VideoSuggestions? = nil,
                topicDetails: Components.Schemas.VideoTopicDetails? = nil
            ) {
                self.ageGating = ageGating
                self.contentDetails = contentDetails
                self.etag = etag
                self.fileDetails = fileDetails
                self.id = id
                self.kind = kind
                self.liveStreamingDetails = liveStreamingDetails
                self.localizations = localizations
                self.monetizationDetails = monetizationDetails
                self.player = player
                self.processingDetails = processingDetails
                self.projectDetails = projectDetails
                self.recordingDetails = recordingDetails
                self.snippet = snippet
                self.statistics = statistics
                self.status = status
                self.suggestions = suggestions
                self.topicDetails = topicDetails
            }
            public enum CodingKeys: String, CodingKey {
                case ageGating
                case contentDetails
                case etag
                case fileDetails
                case id
                case kind
                case liveStreamingDetails
                case localizations
                case monetizationDetails
                case player
                case processingDetails
                case projectDetails
                case recordingDetails
                case snippet
                case statistics
                case status
                case suggestions
                case topicDetails
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoAbuseReport`.
        public struct VideoAbuseReport: Codable, Hashable, Sendable {
            /// Additional comments regarding the abuse report.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReport/comments`.
            public var comments: Swift.String?
            /// The language that the content was viewed in.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReport/language`.
            public var language: Swift.String?
            /// The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReport/reasonId`.
            public var reasonId: Swift.String?
            /// The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReport/secondaryReasonId`.
            public var secondaryReasonId: Swift.String?
            /// The ID that YouTube uses to uniquely identify the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReport/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `VideoAbuseReport`.
            ///
            /// - Parameters:
            ///   - comments: Additional comments regarding the abuse report.
            ///   - language: The language that the content was viewed in.
            ///   - reasonId: The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
            ///   - secondaryReasonId: The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
            ///   - videoId: The ID that YouTube uses to uniquely identify the video.
            public init(
                comments: Swift.String? = nil,
                language: Swift.String? = nil,
                reasonId: Swift.String? = nil,
                secondaryReasonId: Swift.String? = nil,
                videoId: Swift.String? = nil
            ) {
                self.comments = comments
                self.language = language
                self.reasonId = reasonId
                self.secondaryReasonId = secondaryReasonId
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case comments
                case language
                case reasonId
                case secondaryReasonId
                case videoId
            }
        }
        /// A `__videoAbuseReportReason__` resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with `video.ReportAbuse`.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReason`.
        public struct VideoAbuseReportReason: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReason/etag`.
            public var etag: Swift.String?
            /// The ID of this abuse report reason.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReason/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReason"`.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReason/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReason/snippet`.
            public var snippet: Components.Schemas.VideoAbuseReportReasonSnippet?
            /// Creates a new `VideoAbuseReportReason`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID of this abuse report reason.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReason"`.
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.VideoAbuseReportReasonSnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse`.
        public struct VideoAbuseReportReasonListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of valid abuse reasons that are used with `video.ReportAbuse`.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse/items`.
            public var items: [Components.Schemas.VideoAbuseReportReason]?
            /// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReasonListResponse"`.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse/kind`.
            public var kind: Swift.String?
            /// The `visitorId` identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `VideoAbuseReportReasonListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of valid abuse reasons that are used with `video.ReportAbuse`.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReasonListResponse"`.
            ///   - visitorId: The `visitorId` identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.VideoAbuseReportReason]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// Basic details about a video category, such as its localized title.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonSnippet`.
        public struct VideoAbuseReportReasonSnippet: Codable, Hashable, Sendable {
            /// The localized label belonging to this abuse report reason.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonSnippet/label`.
            public var label: Swift.String?
            /// The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportReasonSnippet/secondaryReasons`.
            public var secondaryReasons: [Components.Schemas.VideoAbuseReportSecondaryReason]?
            /// Creates a new `VideoAbuseReportReasonSnippet`.
            ///
            /// - Parameters:
            ///   - label: The localized label belonging to this abuse report reason.
            ///   - secondaryReasons: The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
            public init(
                label: Swift.String? = nil,
                secondaryReasons: [Components.Schemas.VideoAbuseReportSecondaryReason]? = nil
            ) {
                self.label = label
                self.secondaryReasons = secondaryReasons
            }
            public enum CodingKeys: String, CodingKey {
                case label
                case secondaryReasons
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoAbuseReportSecondaryReason`.
        public struct VideoAbuseReportSecondaryReason: Codable, Hashable, Sendable {
            /// The ID of this abuse report secondary reason.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportSecondaryReason/id`.
            public var id: Swift.String?
            /// The localized label for this abuse report secondary reason.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAbuseReportSecondaryReason/label`.
            public var label: Swift.String?
            /// Creates a new `VideoAbuseReportSecondaryReason`.
            ///
            /// - Parameters:
            ///   - id: The ID of this abuse report secondary reason.
            ///   - label: The localized label for this abuse report secondary reason.
            public init(
                id: Swift.String? = nil,
                label: Swift.String? = nil
            ) {
                self.id = id
                self.label = label
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case label
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoAgeGating`.
        public struct VideoAgeGating: Codable, Hashable, Sendable {
            /// Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAgeGating/alcoholContent`.
            public var alcoholContent: Swift.Bool?
            /// Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAgeGating/restricted`.
            public var restricted: Swift.Bool?
            /// Video game rating, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAgeGating/videoGameRating`.
            @frozen public enum videoGameRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case anyone = "anyone"
                case m15Plus = "m15Plus"
                case m16Plus = "m16Plus"
                case m17Plus = "m17Plus"
            }
            /// Video game rating, if any.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoAgeGating/videoGameRating`.
            public var videoGameRating: Components.Schemas.VideoAgeGating.videoGameRatingPayload?
            /// Creates a new `VideoAgeGating`.
            ///
            /// - Parameters:
            ///   - alcoholContent: Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
            ///   - restricted: Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
            ///   - videoGameRating: Video game rating, if any.
            public init(
                alcoholContent: Swift.Bool? = nil,
                restricted: Swift.Bool? = nil,
                videoGameRating: Components.Schemas.VideoAgeGating.videoGameRatingPayload? = nil
            ) {
                self.alcoholContent = alcoholContent
                self.restricted = restricted
                self.videoGameRating = videoGameRating
            }
            public enum CodingKeys: String, CodingKey {
                case alcoholContent
                case restricted
                case videoGameRating
            }
        }
        /// A *videoCategory* resource identifies a category that has been or could be associated with uploaded videos.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoCategory`.
        public struct VideoCategory: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategory/etag`.
            public var etag: Swift.String?
            /// The ID that YouTube uses to uniquely identify the video category.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategory/id`.
            public var id: Swift.String?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategory/kind`.
            public var kind: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoCategory/snippet`.
            public var snippet: Components.Schemas.VideoCategorySnippet?
            /// Creates a new `VideoCategory`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - id: The ID that YouTube uses to uniquely identify the video category.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
            ///   - snippet:
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                snippet: Components.Schemas.VideoCategorySnippet? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case snippet
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse`.
        public struct VideoCategoryListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/items`.
            public var items: [Components.Schemas.VideoCategory]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategoryListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `VideoCategoryListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.VideoCategory]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Basic details about a video category, such as its localized title.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoCategorySnippet`.
        public struct VideoCategorySnippet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VideoCategorySnippet/assignable`.
            public var assignable: Swift.Bool?
            /// The YouTube channel that created the video category.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategorySnippet/channelId`.
            public var channelId: Swift.String?
            /// The video category's title.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoCategorySnippet/title`.
            public var title: Swift.String?
            /// Creates a new `VideoCategorySnippet`.
            ///
            /// - Parameters:
            ///   - assignable:
            ///   - channelId: The YouTube channel that created the video category.
            ///   - title: The video category's title.
            public init(
                assignable: Swift.Bool? = nil,
                channelId: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.assignable = assignable
                self.channelId = channelId
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case assignable
                case channelId
                case title
            }
        }
        /// Details about the content of a YouTube Video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoContentDetails`.
        public struct VideoContentDetails: Codable, Hashable, Sendable {
            /// The value of captions indicates whether the video has captions or not.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/caption`.
            @frozen public enum captionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _true = "true"
                case _false = "false"
            }
            /// The value of captions indicates whether the video has captions or not.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/caption`.
            public var caption: Components.Schemas.VideoContentDetails.captionPayload?
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/contentRating`.
            public var contentRating: Components.Schemas.ContentRating?
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/countryRestriction`.
            public var countryRestriction: Components.Schemas.AccessPolicy?
            /// The value of definition indicates whether the video is available in high definition or only in standard definition.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/definition`.
            @frozen public enum definitionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sd = "sd"
                case hd = "hd"
            }
            /// The value of definition indicates whether the video is available in high definition or only in standard definition.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/definition`.
            public var definition: Components.Schemas.VideoContentDetails.definitionPayload?
            /// The value of dimension indicates whether the video is available in 3D or in 2D.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/dimension`.
            public var dimension: Swift.String?
            /// The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/duration`.
            public var duration: Swift.String?
            /// Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/hasCustomThumbnail`.
            public var hasCustomThumbnail: Swift.Bool?
            /// The value of is_license_content indicates whether the video is licensed content.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/licensedContent`.
            public var licensedContent: Swift.Bool?
            /// Specifies the projection format of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/projection`.
            @frozen public enum projectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rectangular = "rectangular"
                case _360 = "360"
            }
            /// Specifies the projection format of the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/projection`.
            public var projection: Components.Schemas.VideoContentDetails.projectionPayload?
            /// - Remark: Generated from `#/components/schemas/VideoContentDetails/regionRestriction`.
            public var regionRestriction: Components.Schemas.VideoContentDetailsRegionRestriction?
            /// Creates a new `VideoContentDetails`.
            ///
            /// - Parameters:
            ///   - caption: The value of captions indicates whether the video has captions or not.
            ///   - contentRating:
            ///   - countryRestriction:
            ///   - definition: The value of definition indicates whether the video is available in high definition or only in standard definition.
            ///   - dimension: The value of dimension indicates whether the video is available in 3D or in 2D.
            ///   - duration: The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
            ///   - hasCustomThumbnail: Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
            ///   - licensedContent: The value of is_license_content indicates whether the video is licensed content.
            ///   - projection: Specifies the projection format of the video.
            ///   - regionRestriction:
            public init(
                caption: Components.Schemas.VideoContentDetails.captionPayload? = nil,
                contentRating: Components.Schemas.ContentRating? = nil,
                countryRestriction: Components.Schemas.AccessPolicy? = nil,
                definition: Components.Schemas.VideoContentDetails.definitionPayload? = nil,
                dimension: Swift.String? = nil,
                duration: Swift.String? = nil,
                hasCustomThumbnail: Swift.Bool? = nil,
                licensedContent: Swift.Bool? = nil,
                projection: Components.Schemas.VideoContentDetails.projectionPayload? = nil,
                regionRestriction: Components.Schemas.VideoContentDetailsRegionRestriction? = nil
            ) {
                self.caption = caption
                self.contentRating = contentRating
                self.countryRestriction = countryRestriction
                self.definition = definition
                self.dimension = dimension
                self.duration = duration
                self.hasCustomThumbnail = hasCustomThumbnail
                self.licensedContent = licensedContent
                self.projection = projection
                self.regionRestriction = regionRestriction
            }
            public enum CodingKeys: String, CodingKey {
                case caption
                case contentRating
                case countryRestriction
                case definition
                case dimension
                case duration
                case hasCustomThumbnail
                case licensedContent
                case projection
                case regionRestriction
            }
        }
        /// DEPRECATED Region restriction of the video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoContentDetailsRegionRestriction`.
        public struct VideoContentDetailsRegionRestriction: Codable, Hashable, Sendable {
            /// A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetailsRegionRestriction/allowed`.
            public var allowed: [Swift.String]?
            /// A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoContentDetailsRegionRestriction/blocked`.
            public var blocked: [Swift.String]?
            /// Creates a new `VideoContentDetailsRegionRestriction`.
            ///
            /// - Parameters:
            ///   - allowed: A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
            ///   - blocked: A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
            public init(
                allowed: [Swift.String]? = nil,
                blocked: [Swift.String]? = nil
            ) {
                self.allowed = allowed
                self.blocked = blocked
            }
            public enum CodingKeys: String, CodingKey {
                case allowed
                case blocked
            }
        }
        /// Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoFileDetails`.
        public struct VideoFileDetails: Codable, Hashable, Sendable {
            /// A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/audioStreams`.
            public var audioStreams: [Components.Schemas.VideoFileDetailsAudioStream]?
            /// The uploaded video file's combined (video and audio) bitrate in bits per second.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/bitrateBps`.
            public var bitrateBps: Swift.String?
            /// The uploaded video file's container format.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/container`.
            public var container: Swift.String?
            /// The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/creationTime`.
            public var creationTime: Swift.String?
            /// The length of the uploaded video in milliseconds.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/durationMs`.
            public var durationMs: Swift.String?
            /// The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/fileName`.
            public var fileName: Swift.String?
            /// The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/fileSize`.
            public var fileSize: Swift.String?
            /// The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/fileType`.
            @frozen public enum fileTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case video = "video"
                case audio = "audio"
                case image = "image"
                case archive = "archive"
                case document = "document"
                case project = "project"
                case other = "other"
            }
            /// The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/fileType`.
            public var fileType: Components.Schemas.VideoFileDetails.fileTypePayload?
            /// A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetails/videoStreams`.
            public var videoStreams: [Components.Schemas.VideoFileDetailsVideoStream]?
            /// Creates a new `VideoFileDetails`.
            ///
            /// - Parameters:
            ///   - audioStreams: A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
            ///   - bitrateBps: The uploaded video file's combined (video and audio) bitrate in bits per second.
            ///   - container: The uploaded video file's container format.
            ///   - creationTime: The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 
            ///   - durationMs: The length of the uploaded video in milliseconds.
            ///   - fileName: The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
            ///   - fileSize: The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
            ///   - fileType: The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
            ///   - videoStreams: A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
            public init(
                audioStreams: [Components.Schemas.VideoFileDetailsAudioStream]? = nil,
                bitrateBps: Swift.String? = nil,
                container: Swift.String? = nil,
                creationTime: Swift.String? = nil,
                durationMs: Swift.String? = nil,
                fileName: Swift.String? = nil,
                fileSize: Swift.String? = nil,
                fileType: Components.Schemas.VideoFileDetails.fileTypePayload? = nil,
                videoStreams: [Components.Schemas.VideoFileDetailsVideoStream]? = nil
            ) {
                self.audioStreams = audioStreams
                self.bitrateBps = bitrateBps
                self.container = container
                self.creationTime = creationTime
                self.durationMs = durationMs
                self.fileName = fileName
                self.fileSize = fileSize
                self.fileType = fileType
                self.videoStreams = videoStreams
            }
            public enum CodingKeys: String, CodingKey {
                case audioStreams
                case bitrateBps
                case container
                case creationTime
                case durationMs
                case fileName
                case fileSize
                case fileType
                case videoStreams
            }
        }
        /// Information about an audio stream.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoFileDetailsAudioStream`.
        public struct VideoFileDetailsAudioStream: Codable, Hashable, Sendable {
            /// The audio stream's bitrate, in bits per second.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsAudioStream/bitrateBps`.
            public var bitrateBps: Swift.String?
            /// The number of audio channels that the stream contains.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsAudioStream/channelCount`.
            public var channelCount: Swift.Int?
            /// The audio codec that the stream uses.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsAudioStream/codec`.
            public var codec: Swift.String?
            /// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsAudioStream/vendor`.
            public var vendor: Swift.String?
            /// Creates a new `VideoFileDetailsAudioStream`.
            ///
            /// - Parameters:
            ///   - bitrateBps: The audio stream's bitrate, in bits per second.
            ///   - channelCount: The number of audio channels that the stream contains.
            ///   - codec: The audio codec that the stream uses.
            ///   - vendor: A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
            public init(
                bitrateBps: Swift.String? = nil,
                channelCount: Swift.Int? = nil,
                codec: Swift.String? = nil,
                vendor: Swift.String? = nil
            ) {
                self.bitrateBps = bitrateBps
                self.channelCount = channelCount
                self.codec = codec
                self.vendor = vendor
            }
            public enum CodingKeys: String, CodingKey {
                case bitrateBps
                case channelCount
                case codec
                case vendor
            }
        }
        /// Information about a video stream.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream`.
        public struct VideoFileDetailsVideoStream: Codable, Hashable, Sendable {
            /// The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/aspectRatio`.
            public var aspectRatio: Swift.Double?
            /// The video stream's bitrate, in bits per second.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/bitrateBps`.
            public var bitrateBps: Swift.String?
            /// The video codec that the stream uses.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/codec`.
            public var codec: Swift.String?
            /// The video stream's frame rate, in frames per second.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/frameRateFps`.
            public var frameRateFps: Swift.Double?
            /// The encoded video content's height in pixels.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/heightPixels`.
            public var heightPixels: Swift.Int?
            /// The amount that YouTube needs to rotate the original source content to properly display the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/rotation`.
            @frozen public enum rotationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case clockwise = "clockwise"
                case upsideDown = "upsideDown"
                case counterClockwise = "counterClockwise"
                case other = "other"
            }
            /// The amount that YouTube needs to rotate the original source content to properly display the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/rotation`.
            public var rotation: Components.Schemas.VideoFileDetailsVideoStream.rotationPayload?
            /// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/vendor`.
            public var vendor: Swift.String?
            /// The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoFileDetailsVideoStream/widthPixels`.
            public var widthPixels: Swift.Int?
            /// Creates a new `VideoFileDetailsVideoStream`.
            ///
            /// - Parameters:
            ///   - aspectRatio: The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
            ///   - bitrateBps: The video stream's bitrate, in bits per second.
            ///   - codec: The video codec that the stream uses.
            ///   - frameRateFps: The video stream's frame rate, in frames per second.
            ///   - heightPixels: The encoded video content's height in pixels.
            ///   - rotation: The amount that YouTube needs to rotate the original source content to properly display the video.
            ///   - vendor: A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
            ///   - widthPixels: The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
            public init(
                aspectRatio: Swift.Double? = nil,
                bitrateBps: Swift.String? = nil,
                codec: Swift.String? = nil,
                frameRateFps: Swift.Double? = nil,
                heightPixels: Swift.Int? = nil,
                rotation: Components.Schemas.VideoFileDetailsVideoStream.rotationPayload? = nil,
                vendor: Swift.String? = nil,
                widthPixels: Swift.Int? = nil
            ) {
                self.aspectRatio = aspectRatio
                self.bitrateBps = bitrateBps
                self.codec = codec
                self.frameRateFps = frameRateFps
                self.heightPixels = heightPixels
                self.rotation = rotation
                self.vendor = vendor
                self.widthPixels = widthPixels
            }
            public enum CodingKeys: String, CodingKey {
                case aspectRatio
                case bitrateBps
                case codec
                case frameRateFps
                case heightPixels
                case rotation
                case vendor
                case widthPixels
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse`.
        public struct VideoGetRatingResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// A list of ratings that match the request criteria.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse/items`.
            public var items: [Components.Schemas.VideoRating]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse/kind`.
            public var kind: Swift.String?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoGetRatingResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `VideoGetRatingResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items: A list of ratings that match the request criteria.
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.VideoRating]? = nil,
                kind: Swift.String? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case visitorId
            }
        }
        /// - Remark: Generated from `#/components/schemas/VideoListResponse`.
        public struct VideoListResponse: Codable, Hashable, Sendable {
            /// Etag of this resource.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/etag`.
            public var etag: Swift.String?
            /// Serialized EventId of the request which produced this response.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/eventId`.
            @available(*, deprecated)
            public var eventId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/items`.
            public var items: [Components.Schemas.Video]?
            /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/kind`.
            public var kind: Swift.String?
            /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/pageInfo`.
            public var pageInfo: Components.Schemas.PageInfo?
            /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/prevPageToken`.
            public var prevPageToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/tokenPagination`.
            public var tokenPagination: Components.Schemas.TokenPagination?
            /// The visitorId identifies the visitor.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoListResponse/visitorId`.
            @available(*, deprecated)
            public var visitorId: Swift.String?
            /// Creates a new `VideoListResponse`.
            ///
            /// - Parameters:
            ///   - etag: Etag of this resource.
            ///   - eventId: Serialized EventId of the request which produced this response.
            ///   - items:
            ///   - kind: Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
            ///   - nextPageToken: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
            ///   - pageInfo:
            ///   - prevPageToken: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
            ///   - tokenPagination:
            ///   - visitorId: The visitorId identifies the visitor.
            public init(
                etag: Swift.String? = nil,
                eventId: Swift.String? = nil,
                items: [Components.Schemas.Video]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                pageInfo: Components.Schemas.PageInfo? = nil,
                prevPageToken: Swift.String? = nil,
                tokenPagination: Components.Schemas.TokenPagination? = nil,
                visitorId: Swift.String? = nil
            ) {
                self.etag = etag
                self.eventId = eventId
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.pageInfo = pageInfo
                self.prevPageToken = prevPageToken
                self.tokenPagination = tokenPagination
                self.visitorId = visitorId
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case eventId
                case items
                case kind
                case nextPageToken
                case pageInfo
                case prevPageToken
                case tokenPagination
                case visitorId
            }
        }
        /// Details about the live streaming metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails`.
        public struct VideoLiveStreamingDetails: Codable, Hashable, Sendable {
            /// The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/activeLiveChatId`.
            public var activeLiveChatId: Swift.String?
            /// The time that the broadcast actually ended. This value will not be available until the broadcast is over.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/actualEndTime`.
            public var actualEndTime: Foundation.Date?
            /// The time that the broadcast actually started. This value will not be available until the broadcast begins.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/actualStartTime`.
            public var actualStartTime: Foundation.Date?
            /// The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/concurrentViewers`.
            public var concurrentViewers: Swift.String?
            /// The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/scheduledEndTime`.
            public var scheduledEndTime: Foundation.Date?
            /// The time that the broadcast is scheduled to begin.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLiveStreamingDetails/scheduledStartTime`.
            public var scheduledStartTime: Foundation.Date?
            /// Creates a new `VideoLiveStreamingDetails`.
            ///
            /// - Parameters:
            ///   - activeLiveChatId: The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
            ///   - actualEndTime: The time that the broadcast actually ended. This value will not be available until the broadcast is over.
            ///   - actualStartTime: The time that the broadcast actually started. This value will not be available until the broadcast begins.
            ///   - concurrentViewers: The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
            ///   - scheduledEndTime: The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
            ///   - scheduledStartTime: The time that the broadcast is scheduled to begin.
            public init(
                activeLiveChatId: Swift.String? = nil,
                actualEndTime: Foundation.Date? = nil,
                actualStartTime: Foundation.Date? = nil,
                concurrentViewers: Swift.String? = nil,
                scheduledEndTime: Foundation.Date? = nil,
                scheduledStartTime: Foundation.Date? = nil
            ) {
                self.activeLiveChatId = activeLiveChatId
                self.actualEndTime = actualEndTime
                self.actualStartTime = actualStartTime
                self.concurrentViewers = concurrentViewers
                self.scheduledEndTime = scheduledEndTime
                self.scheduledStartTime = scheduledStartTime
            }
            public enum CodingKeys: String, CodingKey {
                case activeLiveChatId
                case actualEndTime
                case actualStartTime
                case concurrentViewers
                case scheduledEndTime
                case scheduledStartTime
            }
        }
        /// Localized versions of certain video properties (e.g. title).
        ///
        /// - Remark: Generated from `#/components/schemas/VideoLocalization`.
        public struct VideoLocalization: Codable, Hashable, Sendable {
            /// Localized version of the video's description.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLocalization/description`.
            public var description: Swift.String?
            /// Localized version of the video's title.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoLocalization/title`.
            public var title: Swift.String?
            /// Creates a new `VideoLocalization`.
            ///
            /// - Parameters:
            ///   - description: Localized version of the video's description.
            ///   - title: Localized version of the video's title.
            public init(
                description: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.description = description
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case title
            }
        }
        /// Details about monetization of a YouTube Video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoMonetizationDetails`.
        public struct VideoMonetizationDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VideoMonetizationDetails/access`.
            public var access: Components.Schemas.AccessPolicy?
            /// Creates a new `VideoMonetizationDetails`.
            ///
            /// - Parameters:
            ///   - access:
            public init(access: Components.Schemas.AccessPolicy? = nil) {
                self.access = access
            }
            public enum CodingKeys: String, CodingKey {
                case access
            }
        }
        /// Player to be used for a video playback.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoPlayer`.
        public struct VideoPlayer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VideoPlayer/embedHeight`.
            public var embedHeight: Swift.String?
            /// An <iframe> tag that embeds a player that will play the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoPlayer/embedHtml`.
            public var embedHtml: Swift.String?
            /// The embed width
            ///
            /// - Remark: Generated from `#/components/schemas/VideoPlayer/embedWidth`.
            public var embedWidth: Swift.String?
            /// Creates a new `VideoPlayer`.
            ///
            /// - Parameters:
            ///   - embedHeight:
            ///   - embedHtml: An <iframe> tag that embeds a player that will play the video.
            ///   - embedWidth: The embed width
            public init(
                embedHeight: Swift.String? = nil,
                embedHtml: Swift.String? = nil,
                embedWidth: Swift.String? = nil
            ) {
                self.embedHeight = embedHeight
                self.embedHtml = embedHtml
                self.embedWidth = embedWidth
            }
            public enum CodingKeys: String, CodingKey {
                case embedHeight
                case embedHtml
                case embedWidth
            }
        }
        /// Describes processing status and progress and availability of some other Video resource parts.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails`.
        public struct VideoProcessingDetails: Codable, Hashable, Sendable {
            /// This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/editorSuggestionsAvailability`.
            public var editorSuggestionsAvailability: Swift.String?
            /// This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/fileDetailsAvailability`.
            public var fileDetailsAvailability: Swift.String?
            /// The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingFailureReason`.
            @frozen public enum processingFailureReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case uploadFailed = "uploadFailed"
                case transcodeFailed = "transcodeFailed"
                case streamingFailed = "streamingFailed"
                case other = "other"
            }
            /// The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingFailureReason`.
            public var processingFailureReason: Components.Schemas.VideoProcessingDetails.processingFailureReasonPayload?
            /// This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingIssuesAvailability`.
            public var processingIssuesAvailability: Swift.String?
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingProgress`.
            public var processingProgress: Components.Schemas.VideoProcessingDetailsProcessingProgress?
            /// The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingStatus`.
            @frozen public enum processingStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case processing = "processing"
                case succeeded = "succeeded"
                case failed = "failed"
                case terminated = "terminated"
            }
            /// The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/processingStatus`.
            public var processingStatus: Components.Schemas.VideoProcessingDetails.processingStatusPayload?
            /// This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/tagSuggestionsAvailability`.
            public var tagSuggestionsAvailability: Swift.String?
            /// This value indicates whether thumbnail images have been generated for the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetails/thumbnailsAvailability`.
            public var thumbnailsAvailability: Swift.String?
            /// Creates a new `VideoProcessingDetails`.
            ///
            /// - Parameters:
            ///   - editorSuggestionsAvailability: This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///   - fileDetailsAvailability: This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
            ///   - processingFailureReason: The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
            ///   - processingIssuesAvailability: This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///   - processingProgress:
            ///   - processingStatus: The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
            ///   - tagSuggestionsAvailability: This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
            ///   - thumbnailsAvailability: This value indicates whether thumbnail images have been generated for the video.
            public init(
                editorSuggestionsAvailability: Swift.String? = nil,
                fileDetailsAvailability: Swift.String? = nil,
                processingFailureReason: Components.Schemas.VideoProcessingDetails.processingFailureReasonPayload? = nil,
                processingIssuesAvailability: Swift.String? = nil,
                processingProgress: Components.Schemas.VideoProcessingDetailsProcessingProgress? = nil,
                processingStatus: Components.Schemas.VideoProcessingDetails.processingStatusPayload? = nil,
                tagSuggestionsAvailability: Swift.String? = nil,
                thumbnailsAvailability: Swift.String? = nil
            ) {
                self.editorSuggestionsAvailability = editorSuggestionsAvailability
                self.fileDetailsAvailability = fileDetailsAvailability
                self.processingFailureReason = processingFailureReason
                self.processingIssuesAvailability = processingIssuesAvailability
                self.processingProgress = processingProgress
                self.processingStatus = processingStatus
                self.tagSuggestionsAvailability = tagSuggestionsAvailability
                self.thumbnailsAvailability = thumbnailsAvailability
            }
            public enum CodingKeys: String, CodingKey {
                case editorSuggestionsAvailability
                case fileDetailsAvailability
                case processingFailureReason
                case processingIssuesAvailability
                case processingProgress
                case processingStatus
                case tagSuggestionsAvailability
                case thumbnailsAvailability
            }
        }
        /// Video processing progress and completion time estimate.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoProcessingDetailsProcessingProgress`.
        public struct VideoProcessingDetailsProcessingProgress: Codable, Hashable, Sendable {
            /// The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetailsProcessingProgress/partsProcessed`.
            public var partsProcessed: Swift.String?
            /// An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetailsProcessingProgress/partsTotal`.
            public var partsTotal: Swift.String?
            /// An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProcessingDetailsProcessingProgress/timeLeftMs`.
            public var timeLeftMs: Swift.String?
            /// Creates a new `VideoProcessingDetailsProcessingProgress`.
            ///
            /// - Parameters:
            ///   - partsProcessed: The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
            ///   - partsTotal: An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
            ///   - timeLeftMs: An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
            public init(
                partsProcessed: Swift.String? = nil,
                partsTotal: Swift.String? = nil,
                timeLeftMs: Swift.String? = nil
            ) {
                self.partsProcessed = partsProcessed
                self.partsTotal = partsTotal
                self.timeLeftMs = timeLeftMs
            }
            public enum CodingKeys: String, CodingKey {
                case partsProcessed
                case partsTotal
                case timeLeftMs
            }
        }
        /// DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677
        ///
        /// - Remark: Generated from `#/components/schemas/VideoProjectDetails`.
        public typealias VideoProjectDetails = OpenAPIRuntime.OpenAPIObjectContainer
        /// Basic details about rating of a video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoRating`.
        public struct VideoRating: Codable, Hashable, Sendable {
            /// Rating of a video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoRating/rating`.
            @frozen public enum ratingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case like = "like"
                case dislike = "dislike"
            }
            /// Rating of a video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoRating/rating`.
            public var rating: Components.Schemas.VideoRating.ratingPayload?
            /// The ID that YouTube uses to uniquely identify the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoRating/videoId`.
            public var videoId: Swift.String?
            /// Creates a new `VideoRating`.
            ///
            /// - Parameters:
            ///   - rating: Rating of a video.
            ///   - videoId: The ID that YouTube uses to uniquely identify the video.
            public init(
                rating: Components.Schemas.VideoRating.ratingPayload? = nil,
                videoId: Swift.String? = nil
            ) {
                self.rating = rating
                self.videoId = videoId
            }
            public enum CodingKeys: String, CodingKey {
                case rating
                case videoId
            }
        }
        /// Recording information associated with the video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoRecordingDetails`.
        public struct VideoRecordingDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VideoRecordingDetails/location`.
            public var location: Components.Schemas.GeoPoint?
            /// The text description of the location where the video was recorded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoRecordingDetails/locationDescription`.
            public var locationDescription: Swift.String?
            /// The date and time when the video was recorded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoRecordingDetails/recordingDate`.
            public var recordingDate: Foundation.Date?
            /// Creates a new `VideoRecordingDetails`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - locationDescription: The text description of the location where the video was recorded.
            ///   - recordingDate: The date and time when the video was recorded.
            public init(
                location: Components.Schemas.GeoPoint? = nil,
                locationDescription: Swift.String? = nil,
                recordingDate: Foundation.Date? = nil
            ) {
                self.location = location
                self.locationDescription = locationDescription
                self.recordingDate = recordingDate
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case locationDescription
                case recordingDate
            }
        }
        /// Basic details about a video, including title, description, uploader, thumbnails and category.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoSnippet`.
        public struct VideoSnippet: Codable, Hashable, Sendable {
            /// The YouTube video category associated with the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/categoryId`.
            public var categoryId: Swift.String?
            /// The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/channelId`.
            public var channelId: Swift.String?
            /// Channel title for the channel that the video belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/channelTitle`.
            public var channelTitle: Swift.String?
            /// The default_audio_language property specifies the language spoken in the video's default audio track.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/defaultAudioLanguage`.
            public var defaultAudioLanguage: Swift.String?
            /// The language of the videos's default snippet.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/defaultLanguage`.
            public var defaultLanguage: Swift.String?
            /// The video's description. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/description`.
            public var description: Swift.String?
            /// Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/liveBroadcastContent`.
            @frozen public enum liveBroadcastContentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case upcoming = "upcoming"
                case live = "live"
                case completed = "completed"
            }
            /// Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/liveBroadcastContent`.
            public var liveBroadcastContent: Components.Schemas.VideoSnippet.liveBroadcastContentPayload?
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/localized`.
            public var localized: Components.Schemas.VideoLocalization?
            /// The date and time when the video was uploaded.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/publishedAt`.
            public var publishedAt: Foundation.Date?
            /// A list of keyword tags associated with the video. Tags may contain spaces.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/tags`.
            public var tags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/thumbnails`.
            public var thumbnails: Components.Schemas.ThumbnailDetails?
            /// The video's title. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSnippet/title`.
            public var title: Swift.String?
            /// Creates a new `VideoSnippet`.
            ///
            /// - Parameters:
            ///   - categoryId: The YouTube video category associated with the video.
            ///   - channelId: The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
            ///   - channelTitle: Channel title for the channel that the video belongs to.
            ///   - defaultAudioLanguage: The default_audio_language property specifies the language spoken in the video's default audio track.
            ///   - defaultLanguage: The language of the videos's default snippet.
            ///   - description: The video's description. @mutable youtube.videos.insert youtube.videos.update
            ///   - liveBroadcastContent: Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
            ///   - localized:
            ///   - publishedAt: The date and time when the video was uploaded.
            ///   - tags: A list of keyword tags associated with the video. Tags may contain spaces.
            ///   - thumbnails:
            ///   - title: The video's title. @mutable youtube.videos.insert youtube.videos.update
            public init(
                categoryId: Swift.String? = nil,
                channelId: Swift.String? = nil,
                channelTitle: Swift.String? = nil,
                defaultAudioLanguage: Swift.String? = nil,
                defaultLanguage: Swift.String? = nil,
                description: Swift.String? = nil,
                liveBroadcastContent: Components.Schemas.VideoSnippet.liveBroadcastContentPayload? = nil,
                localized: Components.Schemas.VideoLocalization? = nil,
                publishedAt: Foundation.Date? = nil,
                tags: [Swift.String]? = nil,
                thumbnails: Components.Schemas.ThumbnailDetails? = nil,
                title: Swift.String? = nil
            ) {
                self.categoryId = categoryId
                self.channelId = channelId
                self.channelTitle = channelTitle
                self.defaultAudioLanguage = defaultAudioLanguage
                self.defaultLanguage = defaultLanguage
                self.description = description
                self.liveBroadcastContent = liveBroadcastContent
                self.localized = localized
                self.publishedAt = publishedAt
                self.tags = tags
                self.thumbnails = thumbnails
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case categoryId
                case channelId
                case channelTitle
                case defaultAudioLanguage
                case defaultLanguage
                case description
                case liveBroadcastContent
                case localized
                case publishedAt
                case tags
                case thumbnails
                case title
            }
        }
        /// Statistics about the video, such as the number of times the video was viewed or liked.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoStatistics`.
        public struct VideoStatistics: Codable, Hashable, Sendable {
            /// The number of comments for the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatistics/commentCount`.
            public var commentCount: Swift.String?
            /// The number of users who have indicated that they disliked the video by giving it a negative rating.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatistics/dislikeCount`.
            public var dislikeCount: Swift.String?
            /// The number of users who currently have the video marked as a favorite video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatistics/favoriteCount`.
            @available(*, deprecated)
            public var favoriteCount: Swift.String?
            /// The number of users who have indicated that they liked the video by giving it a positive rating.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatistics/likeCount`.
            public var likeCount: Swift.String?
            /// The number of times the video has been viewed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatistics/viewCount`.
            public var viewCount: Swift.String?
            /// Creates a new `VideoStatistics`.
            ///
            /// - Parameters:
            ///   - commentCount: The number of comments for the video.
            ///   - dislikeCount: The number of users who have indicated that they disliked the video by giving it a negative rating.
            ///   - favoriteCount: The number of users who currently have the video marked as a favorite video.
            ///   - likeCount: The number of users who have indicated that they liked the video by giving it a positive rating.
            ///   - viewCount: The number of times the video has been viewed.
            public init(
                commentCount: Swift.String? = nil,
                dislikeCount: Swift.String? = nil,
                favoriteCount: Swift.String? = nil,
                likeCount: Swift.String? = nil,
                viewCount: Swift.String? = nil
            ) {
                self.commentCount = commentCount
                self.dislikeCount = dislikeCount
                self.favoriteCount = favoriteCount
                self.likeCount = likeCount
                self.viewCount = viewCount
            }
            public enum CodingKeys: String, CodingKey {
                case commentCount
                case dislikeCount
                case favoriteCount
                case likeCount
                case viewCount
            }
        }
        /// Basic details about a video category, such as its localized title. Next Id: 18
        ///
        /// - Remark: Generated from `#/components/schemas/VideoStatus`.
        public struct VideoStatus: Codable, Hashable, Sendable {
            /// This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/embeddable`.
            public var embeddable: Swift.Bool?
            /// This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conversion = "conversion"
                case invalidFile = "invalidFile"
                case emptyFile = "emptyFile"
                case tooSmall = "tooSmall"
                case codec = "codec"
                case uploadAborted = "uploadAborted"
            }
            /// This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/failureReason`.
            public var failureReason: Components.Schemas.VideoStatus.failureReasonPayload?
            /// The video's license. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/license`.
            @frozen public enum licensePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case youtube = "youtube"
                case creativeCommon = "creativeCommon"
            }
            /// The video's license. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/license`.
            public var license: Components.Schemas.VideoStatus.licensePayload?
            /// - Remark: Generated from `#/components/schemas/VideoStatus/madeForKids`.
            public var madeForKids: Swift.Bool?
            /// The video's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/privacyStatus`.
            @frozen public enum privacyStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case unlisted = "unlisted"
                case _private = "private"
            }
            /// The video's privacy status.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/privacyStatus`.
            public var privacyStatus: Components.Schemas.VideoStatus.privacyStatusPayload?
            /// This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/publicStatsViewable`.
            public var publicStatsViewable: Swift.Bool?
            /// The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/publishAt`.
            public var publishAt: Foundation.Date?
            /// This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/rejectionReason`.
            @frozen public enum rejectionReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case copyright = "copyright"
                case inappropriate = "inappropriate"
                case duplicate = "duplicate"
                case termsOfUse = "termsOfUse"
                case uploaderAccountSuspended = "uploaderAccountSuspended"
                case length = "length"
                case claim = "claim"
                case uploaderAccountClosed = "uploaderAccountClosed"
                case trademark = "trademark"
                case legal = "legal"
            }
            /// This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/rejectionReason`.
            public var rejectionReason: Components.Schemas.VideoStatus.rejectionReasonPayload?
            /// - Remark: Generated from `#/components/schemas/VideoStatus/selfDeclaredMadeForKids`.
            public var selfDeclaredMadeForKids: Swift.Bool?
            /// The status of the uploaded video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/uploadStatus`.
            @frozen public enum uploadStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case uploaded = "uploaded"
                case processed = "processed"
                case failed = "failed"
                case rejected = "rejected"
                case deleted = "deleted"
            }
            /// The status of the uploaded video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoStatus/uploadStatus`.
            public var uploadStatus: Components.Schemas.VideoStatus.uploadStatusPayload?
            /// Creates a new `VideoStatus`.
            ///
            /// - Parameters:
            ///   - embeddable: This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
            ///   - failureReason: This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
            ///   - license: The video's license. @mutable youtube.videos.insert youtube.videos.update
            ///   - madeForKids:
            ///   - privacyStatus: The video's privacy status.
            ///   - publicStatsViewable: This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
            ///   - publishAt: The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
            ///   - rejectionReason: This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
            ///   - selfDeclaredMadeForKids:
            ///   - uploadStatus: The status of the uploaded video.
            public init(
                embeddable: Swift.Bool? = nil,
                failureReason: Components.Schemas.VideoStatus.failureReasonPayload? = nil,
                license: Components.Schemas.VideoStatus.licensePayload? = nil,
                madeForKids: Swift.Bool? = nil,
                privacyStatus: Components.Schemas.VideoStatus.privacyStatusPayload? = nil,
                publicStatsViewable: Swift.Bool? = nil,
                publishAt: Foundation.Date? = nil,
                rejectionReason: Components.Schemas.VideoStatus.rejectionReasonPayload? = nil,
                selfDeclaredMadeForKids: Swift.Bool? = nil,
                uploadStatus: Components.Schemas.VideoStatus.uploadStatusPayload? = nil
            ) {
                self.embeddable = embeddable
                self.failureReason = failureReason
                self.license = license
                self.madeForKids = madeForKids
                self.privacyStatus = privacyStatus
                self.publicStatsViewable = publicStatsViewable
                self.publishAt = publishAt
                self.rejectionReason = rejectionReason
                self.selfDeclaredMadeForKids = selfDeclaredMadeForKids
                self.uploadStatus = uploadStatus
            }
            public enum CodingKeys: String, CodingKey {
                case embeddable
                case failureReason
                case license
                case madeForKids
                case privacyStatus
                case publicStatsViewable
                case publishAt
                case rejectionReason
                case selfDeclaredMadeForKids
                case uploadStatus
            }
        }
        /// Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoSuggestions`.
        public struct VideoSuggestions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/editorSuggestionsPayload`.
            @frozen public enum editorSuggestionsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case videoAutoLevels = "videoAutoLevels"
                case videoStabilize = "videoStabilize"
                case videoCrop = "videoCrop"
                case audioQuietAudioSwap = "audioQuietAudioSwap"
            }
            /// A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/editorSuggestions`.
            public typealias editorSuggestionsPayload = [Components.Schemas.VideoSuggestions.editorSuggestionsPayloadPayload]
            /// A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/editorSuggestions`.
            public var editorSuggestions: Components.Schemas.VideoSuggestions.editorSuggestionsPayload?
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingErrorsPayload`.
            @frozen public enum processingErrorsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case audioFile = "audioFile"
                case imageFile = "imageFile"
                case projectFile = "projectFile"
                case notAVideoFile = "notAVideoFile"
                case docFile = "docFile"
                case archiveFile = "archiveFile"
                case unsupportedSpatialAudioLayout = "unsupportedSpatialAudioLayout"
            }
            /// A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingErrors`.
            public typealias processingErrorsPayload = [Components.Schemas.VideoSuggestions.processingErrorsPayloadPayload]
            /// A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingErrors`.
            public var processingErrors: Components.Schemas.VideoSuggestions.processingErrorsPayload?
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingHintsPayload`.
            @frozen public enum processingHintsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case nonStreamableMov = "nonStreamableMov"
                case sendBestQualityVideo = "sendBestQualityVideo"
                case sphericalVideo = "sphericalVideo"
                case spatialAudio = "spatialAudio"
                case vrVideo = "vrVideo"
                case hdrVideo = "hdrVideo"
            }
            /// A list of suggestions that may improve YouTube's ability to process the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingHints`.
            public typealias processingHintsPayload = [Components.Schemas.VideoSuggestions.processingHintsPayloadPayload]
            /// A list of suggestions that may improve YouTube's ability to process the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingHints`.
            public var processingHints: Components.Schemas.VideoSuggestions.processingHintsPayload?
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingWarningsPayload`.
            @frozen public enum processingWarningsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unknownContainer = "unknownContainer"
                case unknownVideoCodec = "unknownVideoCodec"
                case unknownAudioCodec = "unknownAudioCodec"
                case inconsistentResolution = "inconsistentResolution"
                case hasEditlist = "hasEditlist"
                case problematicVideoCodec = "problematicVideoCodec"
                case problematicAudioCodec = "problematicAudioCodec"
                case unsupportedVrStereoMode = "unsupportedVrStereoMode"
                case unsupportedSphericalProjectionType = "unsupportedSphericalProjectionType"
                case unsupportedHdrPixelFormat = "unsupportedHdrPixelFormat"
                case unsupportedHdrColorMetadata = "unsupportedHdrColorMetadata"
                case problematicHdrLookupTable = "problematicHdrLookupTable"
            }
            /// A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingWarnings`.
            public typealias processingWarningsPayload = [Components.Schemas.VideoSuggestions.processingWarningsPayloadPayload]
            /// A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/processingWarnings`.
            public var processingWarnings: Components.Schemas.VideoSuggestions.processingWarningsPayload?
            /// A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestions/tagSuggestions`.
            public var tagSuggestions: [Components.Schemas.VideoSuggestionsTagSuggestion]?
            /// Creates a new `VideoSuggestions`.
            ///
            /// - Parameters:
            ///   - editorSuggestions: A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
            ///   - processingErrors: A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
            ///   - processingHints: A list of suggestions that may improve YouTube's ability to process the video.
            ///   - processingWarnings: A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
            ///   - tagSuggestions: A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
            public init(
                editorSuggestions: Components.Schemas.VideoSuggestions.editorSuggestionsPayload? = nil,
                processingErrors: Components.Schemas.VideoSuggestions.processingErrorsPayload? = nil,
                processingHints: Components.Schemas.VideoSuggestions.processingHintsPayload? = nil,
                processingWarnings: Components.Schemas.VideoSuggestions.processingWarningsPayload? = nil,
                tagSuggestions: [Components.Schemas.VideoSuggestionsTagSuggestion]? = nil
            ) {
                self.editorSuggestions = editorSuggestions
                self.processingErrors = processingErrors
                self.processingHints = processingHints
                self.processingWarnings = processingWarnings
                self.tagSuggestions = tagSuggestions
            }
            public enum CodingKeys: String, CodingKey {
                case editorSuggestions
                case processingErrors
                case processingHints
                case processingWarnings
                case tagSuggestions
            }
        }
        /// A single tag suggestion with it's relevance information.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoSuggestionsTagSuggestion`.
        public struct VideoSuggestionsTagSuggestion: Codable, Hashable, Sendable {
            /// A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestionsTagSuggestion/categoryRestricts`.
            public var categoryRestricts: [Swift.String]?
            /// The keyword tag suggested for the video.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoSuggestionsTagSuggestion/tag`.
            public var tag: Swift.String?
            /// Creates a new `VideoSuggestionsTagSuggestion`.
            ///
            /// - Parameters:
            ///   - categoryRestricts: A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
            ///   - tag: The keyword tag suggested for the video.
            public init(
                categoryRestricts: [Swift.String]? = nil,
                tag: Swift.String? = nil
            ) {
                self.categoryRestricts = categoryRestricts
                self.tag = tag
            }
            public enum CodingKeys: String, CodingKey {
                case categoryRestricts
                case tag
            }
        }
        /// Freebase topic information related to the video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoTopicDetails`.
        public struct VideoTopicDetails: Codable, Hashable, Sendable {
            /// Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoTopicDetails/relevantTopicIds`.
            public var relevantTopicIds: [Swift.String]?
            /// A list of Wikipedia URLs that provide a high-level description of the video's content.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoTopicDetails/topicCategories`.
            public var topicCategories: [Swift.String]?
            /// A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoTopicDetails/topicIds`.
            public var topicIds: [Swift.String]?
            /// Creates a new `VideoTopicDetails`.
            ///
            /// - Parameters:
            ///   - relevantTopicIds: Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
            ///   - topicCategories: A list of Wikipedia URLs that provide a high-level description of the video's content.
            ///   - topicIds: A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
            public init(
                relevantTopicIds: [Swift.String]? = nil,
                topicCategories: [Swift.String]? = nil,
                topicIds: [Swift.String]? = nil
            ) {
                self.relevantTopicIds = relevantTopicIds
                self.topicCategories = topicCategories
                self.topicIds = topicIds
            }
            public enum CodingKeys: String, CodingKey {
                case relevantTopicIds
                case topicCategories
                case topicIds
            }
        }
        /// Branding properties for the watch. All deprecated.
        ///
        /// - Remark: Generated from `#/components/schemas/WatchSettings`.
        public struct WatchSettings: Codable, Hashable, Sendable {
            /// The text color for the video watch page's branded area.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchSettings/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// An ID that uniquely identifies a playlist that displays next to the video player.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchSettings/featuredPlaylistId`.
            public var featuredPlaylistId: Swift.String?
            /// The background color for the video watch page's branded area.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchSettings/textColor`.
            public var textColor: Swift.String?
            /// Creates a new `WatchSettings`.
            ///
            /// - Parameters:
            ///   - backgroundColor: The text color for the video watch page's branded area.
            ///   - featuredPlaylistId: An ID that uniquely identifies a playlist that displays next to the video player.
            ///   - textColor: The background color for the video watch page's branded area.
            public init(
                backgroundColor: Swift.String? = nil,
                featuredPlaylistId: Swift.String? = nil,
                textColor: Swift.String? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.featuredPlaylistId = featuredPlaylistId
                self.textColor = textColor
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case featuredPlaylistId
                case textColor
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// V1 error format.
        ///
        /// - Remark: Generated from `#/components/parameters/_.xgafv`.
        @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
            case _1 = "1"
            case _2 = "2"
        }
        /// OAuth access token.
        ///
        /// - Remark: Generated from `#/components/parameters/access_token`.
        public typealias access_token = Swift.String
        /// Data format for response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case media = "media"
            case proto = "proto"
        }
        /// JSONP
        ///
        /// - Remark: Generated from `#/components/parameters/callback`.
        public typealias callback = Swift.String
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias oauth_token = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias prettyPrint = Swift.Bool
        /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias quotaUser = Swift.String
        /// Legacy upload protocol for media (e.g. "media", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/uploadType`.
        public typealias uploadType = Swift.String
        /// Upload protocol for media (e.g. "raw", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/upload_protocol`.
        public typealias upload_protocol = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/abuseReports`.
    /// - Remark: Generated from `#/paths//youtube/v3/abuseReports/post(youtube.abuseReports.insert)`.
    public enum youtube_period_abuseReports_period_insert {
        public static let id: Swift.String = "youtube.abuseReports.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_abuseReports_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_abuseReports_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_abuseReports_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_abuseReports_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AbuseReport)
            }
            public var body: Operations.youtube_period_abuseReports_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_abuseReports_period_insert.Input.Query,
                headers: Operations.youtube_period_abuseReports_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_abuseReports_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/abuseReports/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AbuseReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AbuseReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_abuseReports_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_abuseReports_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/abuseReports/post(youtube.abuseReports.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_abuseReports_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_abuseReports_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/activities`.
    /// - Remark: Generated from `#/paths//youtube/v3/activities/get(youtube.activities.list)`.
    public enum youtube_period_activities_period_list {
        public static let id: Swift.String = "youtube.activities.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/channelId`.
                public var channelId: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/home`.
                public var home: Swift.Bool?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/mine`.
                public var mine: Swift.Bool?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/publishedAfter`.
                public var publishedAfter: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/publishedBefore`.
                public var publishedBefore: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/query/regionCode`.
                public var regionCode: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///   - channelId:
                ///   - home:
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine:
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - publishedAfter:
                ///   - publishedBefore:
                ///   - regionCode:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    channelId: Swift.String? = nil,
                    home: Swift.Bool? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    pageToken: Swift.String? = nil,
                    publishedAfter: Swift.String? = nil,
                    publishedBefore: Swift.String? = nil,
                    regionCode: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.channelId = channelId
                    self.home = home
                    self.maxResults = maxResults
                    self.mine = mine
                    self.pageToken = pageToken
                    self.publishedAfter = publishedAfter
                    self.publishedBefore = publishedBefore
                    self.regionCode = regionCode
                }
            }
            public var query: Operations.youtube_period_activities_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_activities_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_activities_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_activities_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_activities_period_list.Input.Query,
                headers: Operations.youtube_period_activities_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/activities/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ActivityListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ActivityListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_activities_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_activities_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/activities/get(youtube.activities.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_activities_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_activities_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/get(youtube.captions.list)`.
    public enum youtube_period_captions_period_list {
        public static let id: Swift.String = "youtube.captions.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/part`.
                public var part: [Swift.String]
                /// Returns the captions for the specified video.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/videoId`.
                public var videoId: Swift.String
                /// Returns the captions with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/id`.
                public var id: [Swift.String]?
                /// ID of the Google+ Page for the channel that the request is on behalf of.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/onBehalfOf`.
                public var onBehalfOf: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
                ///   - videoId: Returns the captions for the specified video.
                ///   - id: Returns the captions with the given IDs for Stubby or Apiary.
                ///   - onBehalfOf: ID of the Google+ Page for the channel that the request is on behalf of.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    videoId: Swift.String,
                    id: [Swift.String]? = nil,
                    onBehalfOf: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.videoId = videoId
                    self.id = id
                    self.onBehalfOf = onBehalfOf
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_captions_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_captions_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_captions_period_list.Input.Query,
                headers: Operations.youtube_period_captions_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/captions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CaptionListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CaptionListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_captions_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_captions_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/get(youtube.captions.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_captions_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_captions_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/post(youtube.captions.insert)`.
    public enum youtube_period_captions_period_insert {
        public static let id: Swift.String = "youtube.captions.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/part`.
                public var part: [Swift.String]
                /// ID of the Google+ Page for the channel that the request is be on behalf of
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/onBehalfOf`.
                public var onBehalfOf: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/query/sync`.
                public var sync: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
                ///   - onBehalfOf: ID of the Google+ Page for the channel that the request is be on behalf of
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - sync: Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOf: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    sync: Swift.Bool? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOf = onBehalfOf
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.sync = sync
                }
            }
            public var query: Operations.youtube_period_captions_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_captions_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/requestBody/content/text\/xml`.
                case text_xml(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_captions_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_captions_period_insert.Input.Query,
                headers: Operations.youtube_period_captions_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_captions_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/captions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Caption)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Caption {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_captions_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_captions_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/post(youtube.captions.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_captions_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_captions_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/put(youtube.captions.update)`.
    public enum youtube_period_captions_period_update {
        public static let id: Swift.String = "youtube.captions.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/part`.
                public var part: [Swift.String]
                /// ID of the Google+ Page for the channel that the request is on behalf of.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/onBehalfOf`.
                public var onBehalfOf: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/query/sync`.
                public var sync: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
                ///   - onBehalfOf: ID of the Google+ Page for the channel that the request is on behalf of.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - sync: Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOf: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    sync: Swift.Bool? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOf = onBehalfOf
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.sync = sync
                }
            }
            public var query: Operations.youtube_period_captions_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_captions_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_captions_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/requestBody/content/text\/xml`.
                case text_xml(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_captions_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_captions_period_update.Input.Query,
                headers: Operations.youtube_period_captions_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_captions_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/captions/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Caption)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Caption {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_captions_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_captions_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/put(youtube.captions.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_captions_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_captions_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/captions`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/delete(youtube.captions.delete)`.
    public enum youtube_period_captions_period_delete {
        public static let id: Swift.String = "youtube.captions.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/id`.
                public var id: Swift.String
                /// ID of the Google+ Page for the channel that the request is be on behalf of
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/onBehalfOf`.
                public var onBehalfOf: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOf: ID of the Google+ Page for the channel that the request is be on behalf of
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOf: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOf = onBehalfOf
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_captions_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_captions_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/delete(youtube.captions.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_captions_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/delete(youtube.captions.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_captions_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Downloads a caption track.
    ///
    /// - Remark: HTTP `GET /youtube/v3/captions/{id}`.
    /// - Remark: Generated from `#/paths//youtube/v3/captions/{id}/get(youtube.captions.download)`.
    public enum youtube_period_captions_period_download {
        public static let id: Swift.String = "youtube.captions.download"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the caption track to download, required for One Platform.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The ID of the caption track to download, required for One Platform.
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var path: Operations.youtube_period_captions_period_download.Input.Path
            /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// ID of the Google+ Page for the channel that the request is be on behalf of
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/onBehalfOf`.
                public var onBehalfOf: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Convert the captions into this format. Supported options are sbv, srt, and vtt.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/tfmt`.
                public var tfmt: Swift.String?
                /// tlang is the language code; machine translate the captions into this language.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/captions/{id}/GET/query/tlang`.
                public var tlang: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - onBehalfOf: ID of the Google+ Page for the channel that the request is be on behalf of
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - tfmt: Convert the captions into this format. Supported options are sbv, srt, and vtt.
                ///   - tlang: tlang is the language code; machine translate the captions into this language.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    onBehalfOf: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    tfmt: Swift.String? = nil,
                    tlang: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.onBehalfOf = onBehalfOf
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.tfmt = tfmt
                    self.tlang = tlang
                }
            }
            public var query: Operations.youtube_period_captions_period_download.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.youtube_period_captions_period_download.Input.Path,
                query: Operations.youtube_period_captions_period_download.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/{id}/get(youtube.captions.download)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_captions_period_download.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/captions/{id}/get(youtube.captions.download)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_captions_period_download.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelBanners/insert`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelBanners/insert/post(youtube.channelBanners.insert)`.
    public enum youtube_period_channelBanners_period_insert {
        public static let id: Swift.String = "youtube.channelBanners.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Unused, channel_id is currently derived from the security context of the requestor.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/channelId`.
                public var channelId: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - channelId: Unused, channel_id is currently derived from the security context of the requestor.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    channelId: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.channelId = channelId
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_channelBanners_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelBanners_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelBanners_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channelBanners_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/requestBody/content/image\/jpeg`.
                case jpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/requestBody/content/image\/png`.
                case png(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_channelBanners_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_channelBanners_period_insert.Input.Query = .init(),
                headers: Operations.youtube_period_channelBanners_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_channelBanners_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channelBanners/insert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChannelBannerResource)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChannelBannerResource {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channelBanners_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channelBanners_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelBanners/insert/post(youtube.channelBanners.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channelBanners_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channelBanners_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/get(youtube.channelSections.list)`.
    public enum youtube_period_channelSections_period_list {
        public static let id: Swift.String = "youtube.channelSections.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/part`.
                public var part: [Swift.String]
                /// Return the ChannelSections owned by the specified channel ID.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/channelId`.
                public var channelId: Swift.String?
                /// Return content in specified language
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/hl`.
                public var hl: Swift.String?
                /// Return the ChannelSections with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/id`.
                public var id: [Swift.String]?
                /// Return the ChannelSections owned by the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/mine`.
                public var mine: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///   - channelId: Return the ChannelSections owned by the specified channel ID.
                ///   - hl: Return content in specified language
                ///   - id: Return the ChannelSections with the given IDs for Stubby or Apiary.
                ///   - mine: Return the ChannelSections owned by the authenticated user.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    channelId: Swift.String? = nil,
                    hl: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    mine: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.channelId = channelId
                    self.hl = hl
                    self.id = id
                    self.mine = mine
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_channelSections_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channelSections_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_channelSections_period_list.Input.Query,
                headers: Operations.youtube_period_channelSections_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channelSections/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChannelSectionListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChannelSectionListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channelSections_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channelSections_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelSections/get(youtube.channelSections.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channelSections_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channelSections_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/post(youtube.channelSections.insert)`.
    public enum youtube_period_channelSections_period_insert {
        public static let id: Swift.String = "youtube.channelSections.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_channelSections_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channelSections_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ChannelSection)
            }
            public var body: Operations.youtube_period_channelSections_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_channelSections_period_insert.Input.Query,
                headers: Operations.youtube_period_channelSections_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_channelSections_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channelSections/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChannelSection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChannelSection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channelSections_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channelSections_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelSections/post(youtube.channelSections.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channelSections_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channelSections_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/put(youtube.channelSections.update)`.
    public enum youtube_period_channelSections_period_update {
        public static let id: Swift.String = "youtube.channelSections.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_channelSections_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channelSections_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channelSections_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ChannelSection)
            }
            public var body: Operations.youtube_period_channelSections_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_channelSections_period_update.Input.Query,
                headers: Operations.youtube_period_channelSections_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_channelSections_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channelSections/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChannelSection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChannelSection {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channelSections_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channelSections_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelSections/put(youtube.channelSections.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channelSections_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channelSections_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/channelSections`.
    /// - Remark: Generated from `#/paths//youtube/v3/channelSections/delete(youtube.channelSections.delete)`.
    public enum youtube_period_channelSections_period_delete {
        public static let id: Swift.String = "youtube.channelSections.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channelSections/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_channelSections_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_channelSections_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelSections/delete(youtube.channelSections.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channelSections_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channelSections/delete(youtube.channelSections.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channelSections_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/get(youtube.channels.list)`.
    public enum youtube_period_channels_period_list {
        public static let id: Swift.String = "youtube.channels.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/part`.
                public var part: [Swift.String]
                /// Return the channels within the specified guide category ID.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/categoryId`.
                public var categoryId: Swift.String?
                /// Return the channel associated with a YouTube handle.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/forHandle`.
                public var forHandle: Swift.String?
                /// Return the channel associated with a YouTube username.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/forUsername`.
                public var forUsername: Swift.String?
                /// Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/hl`.
                public var hl: Swift.String?
                /// Return the channels with the specified IDs.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/id`.
                public var id: [Swift.String]?
                /// Return the channels managed by the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/managedByMe`.
                public var managedByMe: Swift.Bool?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Return the ids of channels owned by the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/mine`.
                public var mine: Swift.Bool?
                /// Return the channels subscribed to the authenticated user
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/mySubscribers`.
                public var mySubscribers: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.
                ///   - categoryId: Return the channels within the specified guide category ID.
                ///   - forHandle: Return the channel associated with a YouTube handle.
                ///   - forUsername: Return the channel associated with a YouTube username.
                ///   - hl: Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
                ///   - id: Return the channels with the specified IDs.
                ///   - managedByMe: Return the channels managed by the authenticated user.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine: Return the ids of channels owned by the authenticated user.
                ///   - mySubscribers: Return the channels subscribed to the authenticated user
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    categoryId: Swift.String? = nil,
                    forHandle: Swift.String? = nil,
                    forUsername: Swift.String? = nil,
                    hl: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    managedByMe: Swift.Bool? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    mySubscribers: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.categoryId = categoryId
                    self.forHandle = forHandle
                    self.forUsername = forUsername
                    self.hl = hl
                    self.id = id
                    self.managedByMe = managedByMe
                    self.maxResults = maxResults
                    self.mine = mine
                    self.mySubscribers = mySubscribers
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_channels_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channels_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channels_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channels_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_channels_period_list.Input.Query,
                headers: Operations.youtube_period_channels_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channels/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChannelListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChannelListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channels_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channels_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channels/get(youtube.channels.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channels_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channels_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/channels`.
    /// - Remark: Generated from `#/paths//youtube/v3/channels/put(youtube.channels.update)`.
    public enum youtube_period_channels_period_update {
        public static let id: Swift.String = "youtube.channels.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/part`.
                public var part: [Swift.String]
                /// The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
                ///   - onBehalfOfContentOwner: The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_channels_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channels_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_channels_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_channels_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.youtube_period_channels_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_channels_period_update.Input.Query,
                headers: Operations.youtube_period_channels_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_channels_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/channels/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Channel)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Channel {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_channels_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_channels_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/channels/put(youtube.channels.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_channels_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_channels_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/get(youtube.commentThreads.list)`.
    public enum youtube_period_commentThreads_period_list {
        public static let id: Swift.String = "youtube.commentThreads.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/part`.
                public var part: [Swift.String]
                /// Returns the comment threads of all videos of the channel and the channel comments as well.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/allThreadsRelatedToChannelId`.
                public var allThreadsRelatedToChannelId: Swift.String?
                /// Returns the comment threads for all the channel comments (ie does not include comments left on videos).
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/channelId`.
                public var channelId: Swift.String?
                /// Returns the comment threads with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/moderationStatus`.
                @frozen public enum moderationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case published = "published"
                    case heldForReview = "heldForReview"
                    case likelySpam = "likelySpam"
                    case rejected = "rejected"
                }
                /// Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/moderationStatus`.
                public var moderationStatus: Operations.youtube_period_commentThreads_period_list.Input.Query.moderationStatusPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case orderUnspecified = "orderUnspecified"
                    case time = "time"
                    case relevance = "relevance"
                }
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/order`.
                public var order: Operations.youtube_period_commentThreads_period_list.Input.Query.orderPayload?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/searchTerms`.
                public var searchTerms: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/textFormat`.
                @frozen public enum textFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case textFormatUnspecified = "textFormatUnspecified"
                    case html = "html"
                    case plainText = "plainText"
                }
                /// The requested text format for the returned comments.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/textFormat`.
                public var textFormat: Operations.youtube_period_commentThreads_period_list.Input.Query.textFormatPayload?
                /// Returns the comment threads of the specified video.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/query/videoId`.
                public var videoId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
                ///   - allThreadsRelatedToChannelId: Returns the comment threads of all videos of the channel and the channel comments as well.
                ///   - channelId: Returns the comment threads for all the channel comments (ie does not include comments left on videos).
                ///   - id: Returns the comment threads with the given IDs for Stubby or Apiary.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - moderationStatus: Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
                ///   - order:
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - searchTerms: Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
                ///   - textFormat: The requested text format for the returned comments.
                ///   - videoId: Returns the comment threads of the specified video.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    allThreadsRelatedToChannelId: Swift.String? = nil,
                    channelId: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    moderationStatus: Operations.youtube_period_commentThreads_period_list.Input.Query.moderationStatusPayload? = nil,
                    order: Operations.youtube_period_commentThreads_period_list.Input.Query.orderPayload? = nil,
                    pageToken: Swift.String? = nil,
                    searchTerms: Swift.String? = nil,
                    textFormat: Operations.youtube_period_commentThreads_period_list.Input.Query.textFormatPayload? = nil,
                    videoId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.allThreadsRelatedToChannelId = allThreadsRelatedToChannelId
                    self.channelId = channelId
                    self.id = id
                    self.maxResults = maxResults
                    self.moderationStatus = moderationStatus
                    self.order = order
                    self.pageToken = pageToken
                    self.searchTerms = searchTerms
                    self.textFormat = textFormat
                    self.videoId = videoId
                }
            }
            public var query: Operations.youtube_period_commentThreads_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_commentThreads_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_commentThreads_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_commentThreads_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_commentThreads_period_list.Input.Query,
                headers: Operations.youtube_period_commentThreads_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommentThreadListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommentThreadListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_commentThreads_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_commentThreads_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/get(youtube.commentThreads.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_commentThreads_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_commentThreads_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/post(youtube.commentThreads.insert)`.
    public enum youtube_period_commentThreads_period_insert {
        public static let id: Swift.String = "youtube.commentThreads.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_commentThreads_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_commentThreads_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_commentThreads_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_commentThreads_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CommentThread)
            }
            public var body: Operations.youtube_period_commentThreads_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_commentThreads_period_insert.Input.Query,
                headers: Operations.youtube_period_commentThreads_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_commentThreads_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommentThread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommentThread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_commentThreads_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_commentThreads_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/post(youtube.commentThreads.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_commentThreads_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_commentThreads_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/commentThreads`.
    /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/put(youtube.youtube.v3.updateCommentThreads)`.
    public enum youtube_period_youtube_period_v3_period_updateCommentThreads {
        public static let id: Swift.String = "youtube.youtube.v3.updateCommentThreads"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.CommentThread)
            }
            public var body: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Query = .init(),
                headers: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Headers = .init(),
                body: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/commentThreads/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommentThread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommentThread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/commentThreads/put(youtube.youtube.v3.updateCommentThreads)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_youtube_period_v3_period_updateCommentThreads.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/get(youtube.comments.list)`.
    public enum youtube_period_comments_period_list {
        public static let id: Swift.String = "youtube.comments.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/part`.
                public var part: [Swift.String]
                /// Returns the comments with the given IDs for One Platform.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/parentId`.
                public var parentId: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/textFormat`.
                @frozen public enum textFormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case textFormatUnspecified = "textFormatUnspecified"
                    case html = "html"
                    case plainText = "plainText"
                }
                /// The requested text format for the returned comments.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/query/textFormat`.
                public var textFormat: Operations.youtube_period_comments_period_list.Input.Query.textFormatPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
                ///   - id: Returns the comments with the given IDs for One Platform.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - parentId: Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.
                ///   - textFormat: The requested text format for the returned comments.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    parentId: Swift.String? = nil,
                    textFormat: Operations.youtube_period_comments_period_list.Input.Query.textFormatPayload? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.id = id
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.parentId = parentId
                    self.textFormat = textFormat
                }
            }
            public var query: Operations.youtube_period_comments_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_comments_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_comments_period_list.Input.Query,
                headers: Operations.youtube_period_comments_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/comments/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommentListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommentListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_comments_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_comments_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/get(youtube.comments.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/post(youtube.comments.insert)`.
    public enum youtube_period_comments_period_insert {
        public static let id: Swift.String = "youtube.comments.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_comments_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_comments_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Comment)
            }
            public var body: Operations.youtube_period_comments_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_comments_period_insert.Input.Query,
                headers: Operations.youtube_period_comments_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_comments_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/comments/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_comments_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_comments_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/post(youtube.comments.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/put(youtube.comments.update)`.
    public enum youtube_period_comments_period_update {
        public static let id: Swift.String = "youtube.comments.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_comments_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_comments_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_comments_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Comment)
            }
            public var body: Operations.youtube_period_comments_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_comments_period_update.Input.Query,
                headers: Operations.youtube_period_comments_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_comments_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/comments/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Comment)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Comment {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_comments_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_comments_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/put(youtube.comments.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/comments`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/delete(youtube.comments.delete)`.
    public enum youtube_period_comments_period_delete {
        public static let id: Swift.String = "youtube.comments.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/comments/DELETE/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_comments_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_comments_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/delete(youtube.comments.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/delete(youtube.comments.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Expresses the caller's opinion that one or more comments should be flagged as spam.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/markAsSpam`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/markAsSpam/post(youtube.comments.markAsSpam)`.
    public enum youtube_period_comments_period_markAsSpam {
        public static let id: Swift.String = "youtube.comments.markAsSpam"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Flags the comments with the given IDs as spam in the caller's opinion.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/markAsSpam/POST/query/id`.
                public var id: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Flags the comments with the given IDs as spam in the caller's opinion.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_comments_period_markAsSpam.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_comments_period_markAsSpam.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/markAsSpam/post(youtube.comments.markAsSpam)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_markAsSpam.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/markAsSpam/post(youtube.comments.markAsSpam)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_markAsSpam.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Sets the moderation status of one or more comments.
    ///
    /// - Remark: HTTP `POST /youtube/v3/comments/setModerationStatus`.
    /// - Remark: Generated from `#/paths//youtube/v3/comments/setModerationStatus/post(youtube.comments.setModerationStatus)`.
    public enum youtube_period_comments_period_setModerationStatus {
        public static let id: Swift.String = "youtube.comments.setModerationStatus"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Modifies the moderation status of the comments with the given IDs
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/id`.
                public var id: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/moderationStatus`.
                @frozen public enum moderationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case published = "published"
                    case heldForReview = "heldForReview"
                    case likelySpam = "likelySpam"
                    case rejected = "rejected"
                }
                /// Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: 'heldForReview', 'published' or 'rejected'.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/moderationStatus`.
                public var moderationStatus: Operations.youtube_period_comments_period_setModerationStatus.Input.Query.moderationStatusPayload
                /// If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/comments/setModerationStatus/POST/query/banAuthor`.
                public var banAuthor: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Modifies the moderation status of the comments with the given IDs
                ///   - moderationStatus: Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: 'heldForReview', 'published' or 'rejected'.
                ///   - banAuthor: If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: [Swift.String],
                    moderationStatus: Operations.youtube_period_comments_period_setModerationStatus.Input.Query.moderationStatusPayload,
                    banAuthor: Swift.Bool? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.moderationStatus = moderationStatus
                    self.banAuthor = banAuthor
                }
            }
            public var query: Operations.youtube_period_comments_period_setModerationStatus.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_comments_period_setModerationStatus.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/setModerationStatus/post(youtube.comments.setModerationStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_comments_period_setModerationStatus.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/comments/setModerationStatus/post(youtube.comments.setModerationStatus)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_comments_period_setModerationStatus.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nLanguages`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nLanguages/get(youtube.i18nLanguages.list)`.
    public enum youtube_period_i18nLanguages_period_list {
        public static let id: Swift.String = "youtube.i18nLanguages.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/query/hl`.
                public var hl: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
                ///   - hl:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    hl: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.hl = hl
                }
            }
            public var query: Operations.youtube_period_i18nLanguages_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_i18nLanguages_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_i18nLanguages_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_i18nLanguages_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_i18nLanguages_period_list.Input.Query,
                headers: Operations.youtube_period_i18nLanguages_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/i18nLanguages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.I18nLanguageListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.I18nLanguageListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_i18nLanguages_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_i18nLanguages_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/i18nLanguages/get(youtube.i18nLanguages.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_i18nLanguages_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_i18nLanguages_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/i18nRegions`.
    /// - Remark: Generated from `#/paths//youtube/v3/i18nRegions/get(youtube.i18nRegions.list)`.
    public enum youtube_period_i18nRegions_period_list {
        public static let id: Swift.String = "youtube.i18nRegions.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/query/hl`.
                public var hl: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
                ///   - hl:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    hl: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.hl = hl
                }
            }
            public var query: Operations.youtube_period_i18nRegions_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_i18nRegions_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_i18nRegions_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_i18nRegions_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_i18nRegions_period_list.Input.Query,
                headers: Operations.youtube_period_i18nRegions_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/i18nRegions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.I18nRegionListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.I18nRegionListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_i18nRegions_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_i18nRegions_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/i18nRegions/get(youtube.i18nRegions.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_i18nRegions_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_i18nRegions_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve the list of broadcasts associated with the given channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/get(youtube.liveBroadcasts.list)`.
    public enum youtube_period_liveBroadcasts_period_list {
        public static let id: Swift.String = "youtube.liveBroadcasts.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/broadcastStatus`.
                @frozen public enum broadcastStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case broadcastStatusFilterUnspecified = "broadcastStatusFilterUnspecified"
                    case all = "all"
                    case active = "active"
                    case upcoming = "upcoming"
                    case completed = "completed"
                }
                /// Return broadcasts with a certain status, e.g. active broadcasts.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/broadcastStatus`.
                public var broadcastStatus: Operations.youtube_period_liveBroadcasts_period_list.Input.Query.broadcastStatusPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/broadcastType`.
                @frozen public enum broadcastTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case broadcastTypeFilterUnspecified = "broadcastTypeFilterUnspecified"
                    case all = "all"
                    case event = "event"
                    case persistent = "persistent"
                }
                /// Return only broadcasts with the selected type.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/broadcastType`.
                public var broadcastType: Operations.youtube_period_liveBroadcasts_period_list.Input.Query.broadcastTypePayload?
                /// Return broadcasts with the given ids from Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/mine`.
                public var mine: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.
                ///   - broadcastStatus: Return broadcasts with a certain status, e.g. active broadcasts.
                ///   - broadcastType: Return only broadcasts with the selected type.
                ///   - id: Return broadcasts with the given ids from Stubby or Apiary.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    broadcastStatus: Operations.youtube_period_liveBroadcasts_period_list.Input.Query.broadcastStatusPayload? = nil,
                    broadcastType: Operations.youtube_period_liveBroadcasts_period_list.Input.Query.broadcastTypePayload? = nil,
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.broadcastStatus = broadcastStatus
                    self.broadcastType = broadcastType
                    self.id = id
                    self.maxResults = maxResults
                    self.mine = mine
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_list.Input.Query,
                headers: Operations.youtube_period_liveBroadcasts_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveBroadcastListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveBroadcastListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/get(youtube.liveBroadcasts.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/post(youtube.liveBroadcasts.insert)`.
    public enum youtube_period_liveBroadcasts_period_insert {
        public static let id: Swift.String = "youtube.liveBroadcasts.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveBroadcast)
            }
            public var body: Operations.youtube_period_liveBroadcasts_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_insert.Input.Query,
                headers: Operations.youtube_period_liveBroadcasts_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_liveBroadcasts_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveBroadcast)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveBroadcast {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/post(youtube.liveBroadcasts.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing broadcast for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/put(youtube.liveBroadcasts.update)`.
    public enum youtube_period_liveBroadcasts_period_update {
        public static let id: Swift.String = "youtube.liveBroadcasts.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveBroadcast)
            }
            public var body: Operations.youtube_period_liveBroadcasts_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_update.Input.Query,
                headers: Operations.youtube_period_liveBroadcasts_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_liveBroadcasts_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveBroadcast)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveBroadcast {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/put(youtube.liveBroadcasts.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a given broadcast.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveBroadcasts`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/delete(youtube.liveBroadcasts.delete)`.
    public enum youtube_period_liveBroadcasts_period_delete {
        public static let id: Swift.String = "youtube.liveBroadcasts.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Broadcast to delete.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/DELETE/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Broadcast to delete.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_liveBroadcasts_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/delete(youtube.liveBroadcasts.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/delete(youtube.liveBroadcasts.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Bind a broadcast to a stream.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/bind`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/bind/post(youtube.liveBroadcasts.bind)`.
    public enum youtube_period_liveBroadcasts_period_bind {
        public static let id: Swift.String = "youtube.liveBroadcasts.bind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Broadcast to bind to the stream
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/id`.
                public var id: Swift.String
                /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Stream to bind, if not set unbind the current one.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/query/streamId`.
                public var streamId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Broadcast to bind to the stream
                ///   - part: The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - streamId: Stream to bind, if not set unbind the current one.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    streamId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.streamId = streamId
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_bind.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_bind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_bind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_bind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_bind.Input.Query,
                headers: Operations.youtube_period_liveBroadcasts_period_bind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/bind/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveBroadcast)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveBroadcast {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_bind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_bind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/bind/post(youtube.liveBroadcasts.bind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_bind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_bind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Insert cuepoints in a broadcast
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/cuepoint`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/cuepoint/post(youtube.liveBroadcasts.insertCuepoint)`.
    public enum youtube_period_liveBroadcasts_period_insertCuepoint {
        public static let id: Swift.String = "youtube.liveBroadcasts.insertCuepoint"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Broadcast to insert ads to, or equivalently `external_video_id` for internal use.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/id`.
                public var id: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Broadcast to insert ads to, or equivalently `external_video_id` for internal use.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - part: The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_insertCuepoint.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_insertCuepoint.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Cuepoint)
            }
            public var body: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Query = .init(),
                headers: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Headers = .init(),
                body: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/cuepoint/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Cuepoint)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Cuepoint {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/cuepoint/post(youtube.liveBroadcasts.insertCuepoint)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_insertCuepoint.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Transition a broadcast to a given status.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveBroadcasts/transition`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/transition/post(youtube.liveBroadcasts.transition)`.
    public enum youtube_period_liveBroadcasts_period_transition {
        public static let id: Swift.String = "youtube.liveBroadcasts.transition"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/broadcastStatus`.
                @frozen public enum broadcastStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case statusUnspecified = "statusUnspecified"
                    case testing = "testing"
                    case live = "live"
                    case complete = "complete"
                }
                /// The status to which the broadcast is going to transition.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/broadcastStatus`.
                public var broadcastStatus: Operations.youtube_period_liveBroadcasts_period_transition.Input.Query.broadcastStatusPayload
                /// Broadcast to transition.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/id`.
                public var id: Swift.String
                /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - broadcastStatus: The status to which the broadcast is going to transition.
                ///   - id: Broadcast to transition.
                ///   - part: The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    broadcastStatus: Operations.youtube_period_liveBroadcasts_period_transition.Input.Query.broadcastStatusPayload,
                    id: Swift.String,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.broadcastStatus = broadcastStatus
                    self.id = id
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveBroadcasts_period_transition.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_transition.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveBroadcasts_period_transition.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveBroadcasts_period_transition.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveBroadcasts_period_transition.Input.Query,
                headers: Operations.youtube_period_liveBroadcasts_period_transition.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveBroadcasts/transition/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveBroadcast)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveBroadcast {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveBroadcasts_period_transition.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveBroadcasts_period_transition.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveBroadcasts/transition/post(youtube.liveBroadcasts.transition)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveBroadcasts_period_transition.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveBroadcasts_period_transition.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/post(youtube.liveChatBans.insert)`.
    public enum youtube_period_liveChatBans_period_insert {
        public static let id: Swift.String = "youtube.liveChatBans.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_liveChatBans_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatBans_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatBans_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveChatBans_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveChatBan)
            }
            public var body: Operations.youtube_period_liveChatBans_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveChatBans_period_insert.Input.Query,
                headers: Operations.youtube_period_liveChatBans_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_liveChatBans_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveChatBan)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveChatBan {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveChatBans_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveChatBans_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/post(youtube.liveChatBans.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatBans_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatBans_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a chat ban.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/bans`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/delete(youtube.liveChatBans.delete)`.
    public enum youtube_period_liveChatBans_period_delete {
        public static let id: Swift.String = "youtube.liveChatBans.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/bans/DELETE/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_liveChatBans_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_liveChatBans_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/delete(youtube.liveChatBans.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatBans_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/bans/delete(youtube.liveChatBans.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatBans_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/get(youtube.liveChatMessages.list)`.
    public enum youtube_period_liveChatMessages_period_list {
        public static let id: Swift.String = "youtube.liveChatMessages.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The id of the live chat for which comments should be returned.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/liveChatId`.
                public var liveChatId: Swift.String
                /// The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/part`.
                public var part: [Swift.String]
                /// Specifies the localization language in which the system messages should be returned.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/hl`.
                public var hl: Swift.String?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Specifies the size of the profile image that should be returned for each user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/query/profileImageSize`.
                public var profileImageSize: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - liveChatId: The id of the live chat for which comments should be returned.
                ///   - part: The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
                ///   - hl: Specifies the localization language in which the system messages should be returned.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
                ///   - profileImageSize: Specifies the size of the profile image that should be returned for each user.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    liveChatId: Swift.String,
                    part: [Swift.String],
                    hl: Swift.String? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    profileImageSize: Swift.Int? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.liveChatId = liveChatId
                    self.part = part
                    self.hl = hl
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.profileImageSize = profileImageSize
                }
            }
            public var query: Operations.youtube_period_liveChatMessages_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatMessages_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatMessages_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveChatMessages_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveChatMessages_period_list.Input.Query,
                headers: Operations.youtube_period_liveChatMessages_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveChatMessageListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveChatMessageListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveChatMessages_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveChatMessages_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/get(youtube.liveChatMessages.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatMessages_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatMessages_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/post(youtube.liveChatMessages.insert)`.
    public enum youtube_period_liveChatMessages_period_insert {
        public static let id: Swift.String = "youtube.liveChatMessages.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_liveChatMessages_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatMessages_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatMessages_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveChatMessages_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveChatMessage)
            }
            public var body: Operations.youtube_period_liveChatMessages_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveChatMessages_period_insert.Input.Query,
                headers: Operations.youtube_period_liveChatMessages_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_liveChatMessages_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveChatMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveChatMessage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveChatMessages_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveChatMessages_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/post(youtube.liveChatMessages.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatMessages_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatMessages_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a chat message.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/messages`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/delete(youtube.liveChatMessages.delete)`.
    public enum youtube_period_liveChatMessages_period_delete {
        public static let id: Swift.String = "youtube.liveChatMessages.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/messages/DELETE/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_liveChatMessages_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_liveChatMessages_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/delete(youtube.liveChatMessages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatMessages_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/messages/delete(youtube.liveChatMessages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatMessages_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/get(youtube.liveChatModerators.list)`.
    public enum youtube_period_liveChatModerators_period_list {
        public static let id: Swift.String = "youtube.liveChatModerators.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The id of the live chat for which moderators should be returned.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/liveChatId`.
                public var liveChatId: Swift.String
                /// The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/part`.
                public var part: [Swift.String]
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - liveChatId: The id of the live chat for which moderators should be returned.
                ///   - part: The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    liveChatId: Swift.String,
                    part: [Swift.String],
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.liveChatId = liveChatId
                    self.part = part
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_liveChatModerators_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatModerators_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatModerators_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveChatModerators_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveChatModerators_period_list.Input.Query,
                headers: Operations.youtube_period_liveChatModerators_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveChatModeratorListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveChatModeratorListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveChatModerators_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveChatModerators_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/get(youtube.liveChatModerators.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatModerators_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatModerators_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/post(youtube.liveChatModerators.insert)`.
    public enum youtube_period_liveChatModerators_period_insert {
        public static let id: Swift.String = "youtube.liveChatModerators.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_liveChatModerators_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatModerators_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveChatModerators_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveChatModerators_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveChatModerator)
            }
            public var body: Operations.youtube_period_liveChatModerators_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveChatModerators_period_insert.Input.Query,
                headers: Operations.youtube_period_liveChatModerators_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_liveChatModerators_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveChatModerator)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveChatModerator {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveChatModerators_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveChatModerators_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/post(youtube.liveChatModerators.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatModerators_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatModerators_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a chat moderator.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveChat/moderators`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/delete(youtube.liveChatModerators.delete)`.
    public enum youtube_period_liveChatModerators_period_delete {
        public static let id: Swift.String = "youtube.liveChatModerators.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/liveChat/moderators/DELETE/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_liveChatModerators_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_liveChatModerators_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/delete(youtube.liveChatModerators.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveChatModerators_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveChat/moderators/delete(youtube.liveChatModerators.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveChatModerators_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieve the list of streams associated with the given channel. --
    ///
    /// - Remark: HTTP `GET /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/get(youtube.liveStreams.list)`.
    public enum youtube_period_liveStreams_period_list {
        public static let id: Swift.String = "youtube.liveStreams.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/part`.
                public var part: [Swift.String]
                /// Return LiveStreams with the given ids from Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/mine`.
                public var mine: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
                ///   - id: Return LiveStreams with the given ids from Stubby or Apiary.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.id = id
                    self.maxResults = maxResults
                    self.mine = mine
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_liveStreams_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveStreams_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_liveStreams_period_list.Input.Query,
                headers: Operations.youtube_period_liveStreams_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveStreamListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveStreamListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveStreams_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveStreams_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/get(youtube.liveStreams.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveStreams_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveStreams_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new stream for the authenticated user.
    ///
    /// - Remark: HTTP `POST /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/post(youtube.liveStreams.insert)`.
    public enum youtube_period_liveStreams_period_insert {
        public static let id: Swift.String = "youtube.liveStreams.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, content_details, and status.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, content_details, and status.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveStreams_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveStreams_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveStream)
            }
            public var body: Operations.youtube_period_liveStreams_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveStreams_period_insert.Input.Query,
                headers: Operations.youtube_period_liveStreams_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_liveStreams_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveStream)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveStream {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveStreams_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveStreams_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/post(youtube.liveStreams.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveStreams_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveStreams_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/put(youtube.liveStreams.update)`.
    public enum youtube_period_liveStreams_period_update {
        public static let id: Swift.String = "youtube.liveStreams.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveStreams_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_liveStreams_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_liveStreams_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.LiveStream)
            }
            public var body: Operations.youtube_period_liveStreams_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_liveStreams_period_update.Input.Query,
                headers: Operations.youtube_period_liveStreams_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_liveStreams_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.LiveStream)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LiveStream {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_liveStreams_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_liveStreams_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/put(youtube.liveStreams.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveStreams_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveStreams_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes an existing stream for the authenticated user.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/liveStreams`.
    /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/delete(youtube.liveStreams.delete)`.
    public enum youtube_period_liveStreams_period_delete {
        public static let id: Swift.String = "youtube.liveStreams.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/liveStreams/DELETE/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_liveStreams_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_liveStreams_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/delete(youtube.liveStreams.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_liveStreams_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/liveStreams/delete(youtube.liveStreams.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_liveStreams_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of members that match the request criteria for a channel.
    ///
    /// - Remark: HTTP `GET /youtube/v3/members`.
    /// - Remark: Generated from `#/paths//youtube/v3/members/get(youtube.members.list)`.
    public enum youtube_period_members_period_list {
        public static let id: Swift.String = "youtube.members.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/part`.
                public var part: [Swift.String]
                /// Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/filterByMemberChannelId`.
                public var filterByMemberChannelId: Swift.String?
                /// Filter members in the results set to the ones that have access to a level.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/hasAccessToLevel`.
                public var hasAccessToLevel: Swift.String?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/mode`.
                @frozen public enum modePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case listMembersModeUnknown = "listMembersModeUnknown"
                    case updates = "updates"
                    case all_current = "all_current"
                }
                /// Parameter that specifies which channel members to return.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/mode`.
                public var mode: Operations.youtube_period_members_period_list.Input.Query.modePayload?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.
                ///   - filterByMemberChannelId: Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.
                ///   - hasAccessToLevel: Filter members in the results set to the ones that have access to a level.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mode: Parameter that specifies which channel members to return.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    filterByMemberChannelId: Swift.String? = nil,
                    hasAccessToLevel: Swift.String? = nil,
                    maxResults: Swift.Int? = nil,
                    mode: Operations.youtube_period_members_period_list.Input.Query.modePayload? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.filterByMemberChannelId = filterByMemberChannelId
                    self.hasAccessToLevel = hasAccessToLevel
                    self.maxResults = maxResults
                    self.mode = mode
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_members_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/members/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_members_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_members_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_members_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_members_period_list.Input.Query,
                headers: Operations.youtube_period_members_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/members/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/members/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MemberListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MemberListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_members_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_members_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/members/get(youtube.members.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_members_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_members_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of all pricing levels offered by a creator to the fans.
    ///
    /// - Remark: HTTP `GET /youtube/v3/membershipsLevels`.
    /// - Remark: Generated from `#/paths//youtube/v3/membershipsLevels/get(youtube.membershipsLevels.list)`.
    public enum youtube_period_membershipsLevels_period_list {
        public static let id: Swift.String = "youtube.membershipsLevels.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_membershipsLevels_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_membershipsLevels_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_membershipsLevels_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_membershipsLevels_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_membershipsLevels_period_list.Input.Query,
                headers: Operations.youtube_period_membershipsLevels_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/membershipsLevels/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MembershipsLevelListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MembershipsLevelListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_membershipsLevels_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_membershipsLevels_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/membershipsLevels/get(youtube.membershipsLevels.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_membershipsLevels_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_membershipsLevels_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/get(youtube.playlistImages.list)`.
    public enum youtube_period_playlistImages_period_list {
        public static let id: Swift.String = "youtube.playlistImages.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Return PlaylistImages for this playlist id.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/parent`.
                public var parent: Swift.String?
                /// The *part* parameter specifies a comma-separated list of one or more playlistImage resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - parent: Return PlaylistImages for this playlist id.
                ///   - part: The *part* parameter specifies a comma-separated list of one or more playlistImage resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    maxResults: Swift.Int? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    pageToken: Swift.String? = nil,
                    parent: Swift.String? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.maxResults = maxResults
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.pageToken = pageToken
                    self.parent = parent
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_playlistImages_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistImages_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_playlistImages_period_list.Input.Query = .init(),
                headers: Operations.youtube_period_playlistImages_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistImageListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistImageListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistImages_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistImages_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/get(youtube.playlistImages.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistImages_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistImages_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/post(youtube.playlistImages.insert)`.
    public enum youtube_period_playlistImages_period_insert {
        public static let id: Swift.String = "youtube.playlistImages.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *part* parameter specifies the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - part: The *part* parameter specifies the properties that the API response will include.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_playlistImages_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistImages_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/requestBody/content/image\/jpeg`.
                case jpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/requestBody/content/image\/png`.
                case png(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_playlistImages_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlistImages_period_insert.Input.Query = .init(),
                headers: Operations.youtube_period_playlistImages_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_playlistImages_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistImage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistImage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistImages_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistImages_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/post(youtube.playlistImages.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistImages_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistImages_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/put(youtube.playlistImages.update)`.
    public enum youtube_period_playlistImages_period_update {
        public static let id: Swift.String = "youtube.playlistImages.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// The *part* parameter specifies the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - part: The *part* parameter specifies the properties that the API response will include.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_playlistImages_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistImages_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistImages_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaylistImage)
            }
            public var body: Operations.youtube_period_playlistImages_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlistImages_period_update.Input.Query = .init(),
                headers: Operations.youtube_period_playlistImages_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_playlistImages_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistImage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistImage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistImages_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistImages_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/put(youtube.playlistImages.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistImages_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistImages_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistImages`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/delete(youtube.playlistImages.delete)`.
    public enum youtube_period_playlistImages_period_delete {
        public static let id: Swift.String = "youtube.playlistImages.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Id to identify this image. This is returned from by the List method.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/id`.
                public var id: Swift.String?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistImages/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id: Id to identify this image. This is returned from by the List method.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlistImages_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_playlistImages_period_delete.Input.Query = .init()) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/delete(youtube.playlistImages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistImages_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistImages/delete(youtube.playlistImages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistImages_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/get(youtube.playlistItems.list)`.
    public enum youtube_period_playlistItems_period_list {
        public static let id: Swift.String = "youtube.playlistItems.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Return the playlist items within the given playlist.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/playlistId`.
                public var playlistId: Swift.String?
                /// Return the playlist items associated with the given video ID.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/query/videoId`.
                public var videoId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///   - id:
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - playlistId: Return the playlist items within the given playlist.
                ///   - videoId: Return the playlist items associated with the given video ID.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    pageToken: Swift.String? = nil,
                    playlistId: Swift.String? = nil,
                    videoId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.id = id
                    self.maxResults = maxResults
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.pageToken = pageToken
                    self.playlistId = playlistId
                    self.videoId = videoId
                }
            }
            public var query: Operations.youtube_period_playlistItems_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistItems_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_playlistItems_period_list.Input.Query,
                headers: Operations.youtube_period_playlistItems_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistItemListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistItemListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistItems_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistItems_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/get(youtube.playlistItems.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistItems_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistItems_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/post(youtube.playlistItems.insert)`.
    public enum youtube_period_playlistItems_period_insert {
        public static let id: Swift.String = "youtube.playlistItems.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlistItems_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistItems_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaylistItem)
            }
            public var body: Operations.youtube_period_playlistItems_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlistItems_period_insert.Input.Query,
                headers: Operations.youtube_period_playlistItems_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_playlistItems_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistItem {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistItems_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistItems_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/post(youtube.playlistItems.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistItems_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistItems_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/put(youtube.playlistItems.update)`.
    public enum youtube_period_playlistItems_period_update {
        public static let id: Swift.String = "youtube.playlistItems.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlistItems_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlistItems_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlistItems_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaylistItem)
            }
            public var body: Operations.youtube_period_playlistItems_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlistItems_period_update.Input.Query,
                headers: Operations.youtube_period_playlistItems_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_playlistItems_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistItem {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlistItems_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlistItems_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/put(youtube.playlistItems.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistItems_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistItems_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlistItems`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/delete(youtube.playlistItems.delete)`.
    public enum youtube_period_playlistItems_period_delete {
        public static let id: Swift.String = "youtube.playlistItems.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlistItems/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlistItems_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_playlistItems_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/delete(youtube.playlistItems.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlistItems_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlistItems/delete(youtube.playlistItems.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlistItems_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/get(youtube.playlists.list)`.
    public enum youtube_period_playlists_period_list {
        public static let id: Swift.String = "youtube.playlists.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/part`.
                public var part: [Swift.String]
                /// Return the playlists owned by the specified channel ID.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/channelId`.
                public var channelId: Swift.String?
                /// Return content in specified language
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/hl`.
                public var hl: Swift.String?
                /// Return the playlists with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Return the playlists owned by the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/mine`.
                public var mine: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///   - channelId: Return the playlists owned by the specified channel ID.
                ///   - hl: Return content in specified language
                ///   - id: Return the playlists with the given IDs for Stubby or Apiary.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine: Return the playlists owned by the authenticated user.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    channelId: Swift.String? = nil,
                    hl: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.channelId = channelId
                    self.hl = hl
                    self.id = id
                    self.maxResults = maxResults
                    self.mine = mine
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_playlists_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlists_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_playlists_period_list.Input.Query,
                headers: Operations.youtube_period_playlists_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlists/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaylistListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaylistListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlists_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlists_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlists/get(youtube.playlists.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlists_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlists_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/post(youtube.playlists.insert)`.
    public enum youtube_period_playlists_period_insert {
        public static let id: Swift.String = "youtube.playlists.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                }
            }
            public var query: Operations.youtube_period_playlists_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlists_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Playlist)
            }
            public var body: Operations.youtube_period_playlists_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlists_period_insert.Input.Query,
                headers: Operations.youtube_period_playlists_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_playlists_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlists/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Playlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Playlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlists_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlists_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlists/post(youtube.playlists.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlists_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlists_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/put(youtube.playlists.update)`.
    public enum youtube_period_playlists_period_update {
        public static let id: Swift.String = "youtube.playlists.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlists_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_playlists_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_playlists_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Playlist)
            }
            public var body: Operations.youtube_period_playlists_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_playlists_period_update.Input.Query,
                headers: Operations.youtube_period_playlists_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_playlists_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/playlists/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Playlist)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Playlist {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_playlists_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_playlists_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlists/put(youtube.playlists.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlists_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlists_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/playlists`.
    /// - Remark: Generated from `#/paths//youtube/v3/playlists/delete(youtube.playlists.delete)`.
    public enum youtube_period_playlists_period_delete {
        public static let id: Swift.String = "youtube.playlists.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/playlists/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_playlists_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_playlists_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlists/delete(youtube.playlists.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_playlists_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/playlists/delete(youtube.playlists.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_playlists_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of search resources
    ///
    /// - Remark: HTTP `GET /youtube/v3/search`.
    /// - Remark: Generated from `#/paths//youtube/v3/search/get(youtube.search.list)`.
    public enum youtube_period_search_period_list {
        public static let id: Swift.String = "youtube.search.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/part`.
                public var part: [Swift.String]
                /// Filter on resources belonging to this channelId.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/channelId`.
                public var channelId: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/channelType`.
                @frozen public enum channelTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case channelTypeUnspecified = "channelTypeUnspecified"
                    case any = "any"
                    case show = "show"
                }
                /// Add a filter on the channel search.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/channelType`.
                public var channelType: Operations.youtube_period_search_period_list.Input.Query.channelTypePayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/eventType`.
                @frozen public enum eventTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case none = "none"
                    case upcoming = "upcoming"
                    case live = "live"
                    case completed = "completed"
                }
                /// Filter on the livestream status of the videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/eventType`.
                public var eventType: Operations.youtube_period_search_period_list.Input.Query.eventTypePayload?
                /// Search owned by a content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/forContentOwner`.
                public var forContentOwner: Swift.Bool?
                /// Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/forDeveloper`.
                public var forDeveloper: Swift.Bool?
                /// Search for the private videos of the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/forMine`.
                public var forMine: Swift.Bool?
                /// Filter on location of the video
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/location`.
                public var location: Swift.String?
                /// Filter on distance from the location (specified above).
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/locationRadius`.
                public var locationRadius: Swift.String?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case searchSortUnspecified = "searchSortUnspecified"
                    case date = "date"
                    case rating = "rating"
                    case viewCount = "viewCount"
                    case relevance = "relevance"
                    case title = "title"
                    case videoCount = "videoCount"
                }
                /// Sort order of the results.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/order`.
                public var order: Operations.youtube_period_search_period_list.Input.Query.orderPayload?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Filter on resources published after this date.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/publishedAfter`.
                public var publishedAfter: Swift.String?
                /// Filter on resources published before this date.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/publishedBefore`.
                public var publishedBefore: Swift.String?
                /// Textual search terms to match.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/q`.
                public var q: Swift.String?
                /// Display the content as seen by viewers in this country.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/regionCode`.
                public var regionCode: Swift.String?
                /// Return results relevant to this language.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/relevanceLanguage`.
                public var relevanceLanguage: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/safeSearch`.
                @frozen public enum safeSearchPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case safeSearchSettingUnspecified = "safeSearchSettingUnspecified"
                    case none = "none"
                    case moderate = "moderate"
                    case strict = "strict"
                }
                /// Indicates whether the search results should include restricted content as well as standard content.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/safeSearch`.
                public var safeSearch: Operations.youtube_period_search_period_list.Input.Query.safeSearchPayload?
                /// Restrict results to a particular topic.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/topicId`.
                public var topicId: Swift.String?
                /// Restrict results to a particular set of resource types from One Platform.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/type`.
                public var _type: [Swift.String]?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoCaption`.
                @frozen public enum videoCaptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoCaptionUnspecified = "videoCaptionUnspecified"
                    case any = "any"
                    case closedCaption = "closedCaption"
                    case none = "none"
                }
                /// Filter on the presence of captions on the videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoCaption`.
                public var videoCaption: Operations.youtube_period_search_period_list.Input.Query.videoCaptionPayload?
                /// Filter on videos in a specific category.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoCategoryId`.
                public var videoCategoryId: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDefinition`.
                @frozen public enum videoDefinitionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case any = "any"
                    case standard = "standard"
                    case high = "high"
                }
                /// Filter on the definition of the videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDefinition`.
                public var videoDefinition: Operations.youtube_period_search_period_list.Input.Query.videoDefinitionPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDimension`.
                @frozen public enum videoDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case any = "any"
                    case _2d = "2d"
                    case _3d = "3d"
                }
                /// Filter on 3d videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDimension`.
                public var videoDimension: Operations.youtube_period_search_period_list.Input.Query.videoDimensionPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDuration`.
                @frozen public enum videoDurationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoDurationUnspecified = "videoDurationUnspecified"
                    case any = "any"
                    case short = "short"
                    case medium = "medium"
                    case long = "long"
                }
                /// Filter on the duration of the videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoDuration`.
                public var videoDuration: Operations.youtube_period_search_period_list.Input.Query.videoDurationPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoEmbeddable`.
                @frozen public enum videoEmbeddablePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoEmbeddableUnspecified = "videoEmbeddableUnspecified"
                    case any = "any"
                    case _true = "true"
                }
                /// Filter on embeddable videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoEmbeddable`.
                public var videoEmbeddable: Operations.youtube_period_search_period_list.Input.Query.videoEmbeddablePayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoLicense`.
                @frozen public enum videoLicensePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case any = "any"
                    case youtube = "youtube"
                    case creativeCommon = "creativeCommon"
                }
                /// Filter on the license of the videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoLicense`.
                public var videoLicense: Operations.youtube_period_search_period_list.Input.Query.videoLicensePayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoPaidProductPlacement`.
                @frozen public enum videoPaidProductPlacementPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoPaidProductPlacementUnspecified = "videoPaidProductPlacementUnspecified"
                    case any = "any"
                    case _true = "true"
                }
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoPaidProductPlacement`.
                public var videoPaidProductPlacement: Operations.youtube_period_search_period_list.Input.Query.videoPaidProductPlacementPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoSyndicated`.
                @frozen public enum videoSyndicatedPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoSyndicatedUnspecified = "videoSyndicatedUnspecified"
                    case any = "any"
                    case _true = "true"
                }
                /// Filter on syndicated videos.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoSyndicated`.
                public var videoSyndicated: Operations.youtube_period_search_period_list.Input.Query.videoSyndicatedPayload?
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoType`.
                @frozen public enum videoTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case videoTypeUnspecified = "videoTypeUnspecified"
                    case any = "any"
                    case movie = "movie"
                    case episode = "episode"
                }
                /// Filter on videos of a specific type.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/query/videoType`.
                public var videoType: Operations.youtube_period_search_period_list.Input.Query.videoTypePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
                ///   - channelId: Filter on resources belonging to this channelId.
                ///   - channelType: Add a filter on the channel search.
                ///   - eventType: Filter on the livestream status of the videos.
                ///   - forContentOwner: Search owned by a content owner.
                ///   - forDeveloper: Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
                ///   - forMine: Search for the private videos of the authenticated user.
                ///   - location: Filter on location of the video
                ///   - locationRadius: Filter on distance from the location (specified above).
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - order: Sort order of the results.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///   - publishedAfter: Filter on resources published after this date.
                ///   - publishedBefore: Filter on resources published before this date.
                ///   - q: Textual search terms to match.
                ///   - regionCode: Display the content as seen by viewers in this country.
                ///   - relevanceLanguage: Return results relevant to this language.
                ///   - safeSearch: Indicates whether the search results should include restricted content as well as standard content.
                ///   - topicId: Restrict results to a particular topic.
                ///   - _type: Restrict results to a particular set of resource types from One Platform.
                ///   - videoCaption: Filter on the presence of captions on the videos.
                ///   - videoCategoryId: Filter on videos in a specific category.
                ///   - videoDefinition: Filter on the definition of the videos.
                ///   - videoDimension: Filter on 3d videos.
                ///   - videoDuration: Filter on the duration of the videos.
                ///   - videoEmbeddable: Filter on embeddable videos.
                ///   - videoLicense: Filter on the license of the videos.
                ///   - videoPaidProductPlacement:
                ///   - videoSyndicated: Filter on syndicated videos.
                ///   - videoType: Filter on videos of a specific type.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    channelId: Swift.String? = nil,
                    channelType: Operations.youtube_period_search_period_list.Input.Query.channelTypePayload? = nil,
                    eventType: Operations.youtube_period_search_period_list.Input.Query.eventTypePayload? = nil,
                    forContentOwner: Swift.Bool? = nil,
                    forDeveloper: Swift.Bool? = nil,
                    forMine: Swift.Bool? = nil,
                    location: Swift.String? = nil,
                    locationRadius: Swift.String? = nil,
                    maxResults: Swift.Int? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    order: Operations.youtube_period_search_period_list.Input.Query.orderPayload? = nil,
                    pageToken: Swift.String? = nil,
                    publishedAfter: Swift.String? = nil,
                    publishedBefore: Swift.String? = nil,
                    q: Swift.String? = nil,
                    regionCode: Swift.String? = nil,
                    relevanceLanguage: Swift.String? = nil,
                    safeSearch: Operations.youtube_period_search_period_list.Input.Query.safeSearchPayload? = nil,
                    topicId: Swift.String? = nil,
                    _type: [Swift.String]? = nil,
                    videoCaption: Operations.youtube_period_search_period_list.Input.Query.videoCaptionPayload? = nil,
                    videoCategoryId: Swift.String? = nil,
                    videoDefinition: Operations.youtube_period_search_period_list.Input.Query.videoDefinitionPayload? = nil,
                    videoDimension: Operations.youtube_period_search_period_list.Input.Query.videoDimensionPayload? = nil,
                    videoDuration: Operations.youtube_period_search_period_list.Input.Query.videoDurationPayload? = nil,
                    videoEmbeddable: Operations.youtube_period_search_period_list.Input.Query.videoEmbeddablePayload? = nil,
                    videoLicense: Operations.youtube_period_search_period_list.Input.Query.videoLicensePayload? = nil,
                    videoPaidProductPlacement: Operations.youtube_period_search_period_list.Input.Query.videoPaidProductPlacementPayload? = nil,
                    videoSyndicated: Operations.youtube_period_search_period_list.Input.Query.videoSyndicatedPayload? = nil,
                    videoType: Operations.youtube_period_search_period_list.Input.Query.videoTypePayload? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.channelId = channelId
                    self.channelType = channelType
                    self.eventType = eventType
                    self.forContentOwner = forContentOwner
                    self.forDeveloper = forDeveloper
                    self.forMine = forMine
                    self.location = location
                    self.locationRadius = locationRadius
                    self.maxResults = maxResults
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.order = order
                    self.pageToken = pageToken
                    self.publishedAfter = publishedAfter
                    self.publishedBefore = publishedBefore
                    self.q = q
                    self.regionCode = regionCode
                    self.relevanceLanguage = relevanceLanguage
                    self.safeSearch = safeSearch
                    self.topicId = topicId
                    self._type = _type
                    self.videoCaption = videoCaption
                    self.videoCategoryId = videoCategoryId
                    self.videoDefinition = videoDefinition
                    self.videoDimension = videoDimension
                    self.videoDuration = videoDuration
                    self.videoEmbeddable = videoEmbeddable
                    self.videoLicense = videoLicense
                    self.videoPaidProductPlacement = videoPaidProductPlacement
                    self.videoSyndicated = videoSyndicated
                    self.videoType = videoType
                }
            }
            public var query: Operations.youtube_period_search_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/search/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_search_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_search_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_search_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_search_period_list.Input.Query,
                headers: Operations.youtube_period_search_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/search/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/search/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_search_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_search_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/search/get(youtube.search.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_search_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_search_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/get(youtube.subscriptions.list)`.
    public enum youtube_period_subscriptions_period_list {
        public static let id: Swift.String = "youtube.subscriptions.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/part`.
                public var part: [Swift.String]
                /// Return the subscriptions of the given channel owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/channelId`.
                public var channelId: Swift.String?
                /// Return the subscriptions to the subset of these channels that the authenticated user is subscribed to.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/forChannelId`.
                public var forChannelId: Swift.String?
                /// Return the subscriptions with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/id`.
                public var id: [Swift.String]?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Flag for returning the subscriptions of the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/mine`.
                public var mine: Swift.Bool?
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/myRecentSubscribers`.
                public var myRecentSubscribers: Swift.Bool?
                /// Return the subscribers of the given channel owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/mySubscribers`.
                public var mySubscribers: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/order`.
                @frozen public enum orderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case subscriptionOrderUnspecified = "subscriptionOrderUnspecified"
                    case relevance = "relevance"
                    case unread = "unread"
                    case alphabetical = "alphabetical"
                }
                /// The order of the returned subscriptions
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/order`.
                public var order: Operations.youtube_period_subscriptions_period_list.Input.Query.orderPayload?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.
                ///   - channelId: Return the subscriptions of the given channel owner.
                ///   - forChannelId: Return the subscriptions to the subset of these channels that the authenticated user is subscribed to.
                ///   - id: Return the subscriptions with the given IDs for Stubby or Apiary.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - mine: Flag for returning the subscriptions of the authenticated user.
                ///   - myRecentSubscribers:
                ///   - mySubscribers: Return the subscribers of the given channel owner.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - order: The order of the returned subscriptions
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    channelId: Swift.String? = nil,
                    forChannelId: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    mine: Swift.Bool? = nil,
                    myRecentSubscribers: Swift.Bool? = nil,
                    mySubscribers: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    order: Operations.youtube_period_subscriptions_period_list.Input.Query.orderPayload? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.channelId = channelId
                    self.forChannelId = forChannelId
                    self.id = id
                    self.maxResults = maxResults
                    self.mine = mine
                    self.myRecentSubscribers = myRecentSubscribers
                    self.mySubscribers = mySubscribers
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.order = order
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_subscriptions_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_subscriptions_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_subscriptions_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_subscriptions_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_subscriptions_period_list.Input.Query,
                headers: Operations.youtube_period_subscriptions_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SubscriptionListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_subscriptions_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_subscriptions_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/get(youtube.subscriptions.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_subscriptions_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_subscriptions_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/post(youtube.subscriptions.insert)`.
    public enum youtube_period_subscriptions_period_insert {
        public static let id: Swift.String = "youtube.subscriptions.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/query/part`.
                public var part: [Swift.String]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String]
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_subscriptions_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_subscriptions_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_subscriptions_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_subscriptions_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Subscription)
            }
            public var body: Operations.youtube_period_subscriptions_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_subscriptions_period_insert.Input.Query,
                headers: Operations.youtube_period_subscriptions_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_subscriptions_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Subscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Subscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_subscriptions_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_subscriptions_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/post(youtube.subscriptions.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_subscriptions_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_subscriptions_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/subscriptions`.
    /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/delete(youtube.subscriptions.delete)`.
    public enum youtube_period_subscriptions_period_delete {
        public static let id: Swift.String = "youtube.subscriptions.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/subscriptions/DELETE/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                }
            }
            public var query: Operations.youtube_period_subscriptions_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_subscriptions_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/delete(youtube.subscriptions.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_subscriptions_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/subscriptions/delete(youtube.subscriptions.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_subscriptions_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/superChatEvents`.
    /// - Remark: Generated from `#/paths//youtube/v3/superChatEvents/get(youtube.superChatEvents.list)`.
    public enum youtube_period_superChatEvents_period_list {
        public static let id: Swift.String = "youtube.superChatEvents.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the superChatEvent resource parts that the API response will include. This parameter is currently not supported.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/part`.
                public var part: [Swift.String]
                /// Return rendered funding amounts in specified language.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/hl`.
                public var hl: Swift.String?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the superChatEvent resource parts that the API response will include. This parameter is currently not supported.
                ///   - hl: Return rendered funding amounts in specified language.
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    hl: Swift.String? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.hl = hl
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.youtube_period_superChatEvents_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_superChatEvents_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_superChatEvents_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_superChatEvents_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_superChatEvents_period_list.Input.Query,
                headers: Operations.youtube_period_superChatEvents_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/superChatEvents/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SuperChatEventListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SuperChatEventListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_superChatEvents_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_superChatEvents_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/superChatEvents/get(youtube.superChatEvents.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_superChatEvents_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_superChatEvents_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// POST method.
    ///
    /// - Remark: HTTP `POST /youtube/v3/tests`.
    /// - Remark: Generated from `#/paths//youtube/v3/tests/post(youtube.tests.insert)`.
    public enum youtube_period_tests_period_insert {
        public static let id: Swift.String = "youtube.tests.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/query/externalChannelId`.
                public var externalChannelId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part:
                ///   - externalChannelId:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    externalChannelId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.externalChannelId = externalChannelId
                }
            }
            public var query: Operations.youtube_period_tests_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_tests_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_tests_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_tests_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TestItem)
            }
            public var body: Operations.youtube_period_tests_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_tests_period_insert.Input.Query,
                headers: Operations.youtube_period_tests_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_tests_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/tests/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TestItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TestItem {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_tests_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_tests_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/tests/post(youtube.tests.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_tests_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_tests_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/get(youtube.thirdPartyLinks.list)`.
    public enum youtube_period_thirdPartyLinks_period_list {
        public static let id: Swift.String = "youtube.thirdPartyLinks.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/part`.
                public var part: [Swift.String]
                /// Channel ID to which changes should be applied, for delegation.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/externalChannelId`.
                public var externalChannelId: Swift.String?
                /// Get a third party link with the given linking token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/linkingToken`.
                public var linkingToken: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case linkUnspecified = "linkUnspecified"
                    case channelToStoreLink = "channelToStoreLink"
                }
                /// Get a third party link of the given type.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/query/type`.
                public var _type: Operations.youtube_period_thirdPartyLinks_period_list.Input.Query._typePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.
                ///   - externalChannelId: Channel ID to which changes should be applied, for delegation.
                ///   - linkingToken: Get a third party link with the given linking token.
                ///   - _type: Get a third party link of the given type.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    externalChannelId: Swift.String? = nil,
                    linkingToken: Swift.String? = nil,
                    _type: Operations.youtube_period_thirdPartyLinks_period_list.Input.Query._typePayload? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.externalChannelId = externalChannelId
                    self.linkingToken = linkingToken
                    self._type = _type
                }
            }
            public var query: Operations.youtube_period_thirdPartyLinks_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_thirdPartyLinks_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_thirdPartyLinks_period_list.Input.Query,
                headers: Operations.youtube_period_thirdPartyLinks_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThirdPartyLinkListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThirdPartyLinkListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_thirdPartyLinks_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_thirdPartyLinks_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/get(youtube.thirdPartyLinks.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_thirdPartyLinks_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_thirdPartyLinks_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/post(youtube.thirdPartyLinks.insert)`.
    public enum youtube_period_thirdPartyLinks_period_insert {
        public static let id: Swift.String = "youtube.thirdPartyLinks.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/part`.
                public var part: [Swift.String]
                /// Channel ID to which changes should be applied, for delegation.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/query/externalChannelId`.
                public var externalChannelId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
                ///   - externalChannelId: Channel ID to which changes should be applied, for delegation.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    externalChannelId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.externalChannelId = externalChannelId
                }
            }
            public var query: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ThirdPartyLink)
            }
            public var body: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Query,
                headers: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_thirdPartyLinks_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThirdPartyLink)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThirdPartyLink {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_thirdPartyLinks_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_thirdPartyLinks_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/post(youtube.thirdPartyLinks.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_thirdPartyLinks_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_thirdPartyLinks_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/put(youtube.thirdPartyLinks.update)`.
    public enum youtube_period_thirdPartyLinks_period_update {
        public static let id: Swift.String = "youtube.thirdPartyLinks.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/part`.
                public var part: [Swift.String]
                /// Channel ID to which changes should be applied, for delegation.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/query/externalChannelId`.
                public var externalChannelId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
                ///   - externalChannelId: Channel ID to which changes should be applied, for delegation.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    externalChannelId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.externalChannelId = externalChannelId
                }
            }
            public var query: Operations.youtube_period_thirdPartyLinks_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thirdPartyLinks_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_thirdPartyLinks_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ThirdPartyLink)
            }
            public var body: Operations.youtube_period_thirdPartyLinks_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_thirdPartyLinks_period_update.Input.Query,
                headers: Operations.youtube_period_thirdPartyLinks_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_thirdPartyLinks_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThirdPartyLink)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThirdPartyLink {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_thirdPartyLinks_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_thirdPartyLinks_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/put(youtube.thirdPartyLinks.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_thirdPartyLinks_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_thirdPartyLinks_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/thirdPartyLinks`.
    /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/delete(youtube.thirdPartyLinks.delete)`.
    public enum youtube_period_thirdPartyLinks_period_delete {
        public static let id: Swift.String = "youtube.thirdPartyLinks.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Delete the partner links with the given linking token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/linkingToken`.
                public var linkingToken: Swift.String
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case linkUnspecified = "linkUnspecified"
                    case channelToStoreLink = "channelToStoreLink"
                }
                /// Type of the link to be deleted.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/type`.
                public var _type: Operations.youtube_period_thirdPartyLinks_period_delete.Input.Query._typePayload
                /// Channel ID to which changes should be applied, for delegation.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/externalChannelId`.
                public var externalChannelId: Swift.String?
                /// Do not use. Required for compatibility.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thirdPartyLinks/DELETE/query/part`.
                public var part: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - linkingToken: Delete the partner links with the given linking token.
                ///   - _type: Type of the link to be deleted.
                ///   - externalChannelId: Channel ID to which changes should be applied, for delegation.
                ///   - part: Do not use. Required for compatibility.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    linkingToken: Swift.String,
                    _type: Operations.youtube_period_thirdPartyLinks_period_delete.Input.Query._typePayload,
                    externalChannelId: Swift.String? = nil,
                    part: [Swift.String]? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.linkingToken = linkingToken
                    self._type = _type
                    self.externalChannelId = externalChannelId
                    self.part = part
                }
            }
            public var query: Operations.youtube_period_thirdPartyLinks_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_thirdPartyLinks_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/delete(youtube.thirdPartyLinks.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_thirdPartyLinks_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thirdPartyLinks/delete(youtube.thirdPartyLinks.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_thirdPartyLinks_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    ///
    /// - Remark: HTTP `POST /youtube/v3/thumbnails/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/thumbnails/set/post(youtube.thumbnails.set)`.
    public enum youtube_period_thumbnails_period_set {
        public static let id: Swift.String = "youtube.thumbnails.set"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// Returns the Thumbnail with the given video IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/videoId`.
                public var videoId: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - videoId: Returns the Thumbnail with the given video IDs for Stubby or Apiary.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    videoId: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.videoId = videoId
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_thumbnails_period_set.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thumbnails_period_set.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_thumbnails_period_set.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_thumbnails_period_set.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_thumbnails_period_set.Input.Query,
                headers: Operations.youtube_period_thumbnails_period_set.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/thumbnails/set/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ThumbnailSetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ThumbnailSetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_thumbnails_period_set.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_thumbnails_period_set.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/thumbnails/set/post(youtube.thumbnails.set)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_thumbnails_period_set.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_thumbnails_period_set.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoAbuseReportReasons`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoAbuseReportReasons/get(youtube.videoAbuseReportReasons.list)`.
    public enum youtube_period_videoAbuseReportReasons_period_list {
        public static let id: Swift.String = "youtube.videoAbuseReportReasons.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/query/hl`.
                public var hl: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
                ///   - hl:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    hl: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.hl = hl
                }
            }
            public var query: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videoAbuseReportReasons_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videoAbuseReportReasons_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Query,
                headers: Operations.youtube_period_videoAbuseReportReasons_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videoAbuseReportReasons/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VideoAbuseReportReasonListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VideoAbuseReportReasonListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videoAbuseReportReasons_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videoAbuseReportReasons_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videoAbuseReportReasons/get(youtube.videoAbuseReportReasons.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videoAbuseReportReasons_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videoAbuseReportReasons_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videoCategories`.
    /// - Remark: Generated from `#/paths//youtube/v3/videoCategories/get(youtube.videoCategories.list)`.
    public enum youtube_period_videoCategories_period_list {
        public static let id: Swift.String = "youtube.videoCategories.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/hl`.
                public var hl: Swift.String?
                /// Returns the video categories with the given IDs for Stubby or Apiary.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/id`.
                public var id: [Swift.String]?
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/query/regionCode`.
                public var regionCode: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
                ///   - hl:
                ///   - id: Returns the video categories with the given IDs for Stubby or Apiary.
                ///   - regionCode:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    hl: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    regionCode: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.hl = hl
                    self.id = id
                    self.regionCode = regionCode
                }
            }
            public var query: Operations.youtube_period_videoCategories_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videoCategories_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videoCategories_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videoCategories_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_videoCategories_period_list.Input.Query,
                headers: Operations.youtube_period_videoCategories_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videoCategories/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VideoCategoryListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VideoCategoryListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videoCategories_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videoCategories_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videoCategories/get(youtube.videoCategories.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videoCategories_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videoCategories_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a list of resources, possibly filtered.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/get(youtube.videos.list)`.
    public enum youtube_period_videos_period_list {
        public static let id: Swift.String = "youtube.videos.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/part`.
                public var part: [Swift.String]
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/chart`.
                @frozen public enum chartPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case chartUnspecified = "chartUnspecified"
                    case mostPopular = "mostPopular"
                }
                /// Return the videos that are in the specified chart.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/chart`.
                public var chart: Operations.youtube_period_videos_period_list.Input.Query.chartPayload?
                /// Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/hl`.
                public var hl: Swift.String?
                /// Return videos with the given ids.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/id`.
                public var id: [Swift.String]?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/locale`.
                public var locale: Swift.String?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/maxHeight`.
                public var maxHeight: Swift.Int?
                /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Return the player with maximum height specified in
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/maxWidth`.
                public var maxWidth: Swift.Int?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/myRating`.
                @frozen public enum myRatingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case none = "none"
                    case like = "like"
                    case dislike = "dislike"
                }
                /// Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/myRating`.
                public var myRating: Operations.youtube_period_videos_period_list.Input.Query.myRatingPayload?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Use a chart that is specific to the specified region
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/regionCode`.
                public var regionCode: Swift.String?
                /// Use chart that is specific to the specified video category
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/query/videoCategoryId`.
                public var videoCategoryId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
                ///   - chart: Return the videos that are in the specified chart.
                ///   - hl: Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
                ///   - id: Return videos with the given ids.
                ///   - locale:
                ///   - maxHeight:
                ///   - maxResults: The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
                ///   - maxWidth: Return the player with maximum height specified in
                ///   - myRating: Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - pageToken: The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
                ///   - regionCode: Use a chart that is specific to the specified region
                ///   - videoCategoryId: Use chart that is specific to the specified video category
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    chart: Operations.youtube_period_videos_period_list.Input.Query.chartPayload? = nil,
                    hl: Swift.String? = nil,
                    id: [Swift.String]? = nil,
                    locale: Swift.String? = nil,
                    maxHeight: Swift.Int? = nil,
                    maxResults: Swift.Int? = nil,
                    maxWidth: Swift.Int? = nil,
                    myRating: Operations.youtube_period_videos_period_list.Input.Query.myRatingPayload? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    pageToken: Swift.String? = nil,
                    regionCode: Swift.String? = nil,
                    videoCategoryId: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.chart = chart
                    self.hl = hl
                    self.id = id
                    self.locale = locale
                    self.maxHeight = maxHeight
                    self.maxResults = maxResults
                    self.maxWidth = maxWidth
                    self.myRating = myRating
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.pageToken = pageToken
                    self.regionCode = regionCode
                    self.videoCategoryId = videoCategoryId
                }
            }
            public var query: Operations.youtube_period_videos_period_list.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videos_period_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_videos_period_list.Input.Query,
                headers: Operations.youtube_period_videos_period_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videos/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VideoListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VideoListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videos_period_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videos_period_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/get(youtube.videos.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts a new resource into this collection.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/post(youtube.videos.insert)`.
    public enum youtube_period_videos_period_insert {
        public static let id: Swift.String = "youtube.videos.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/part`.
                public var part: [Swift.String]
                /// Should auto-levels be applied to the upload.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/autoLevels`.
                public var autoLevels: Swift.Bool?
                /// Notify the channel subscribers about the new video. As default, the notification is enabled.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/notifySubscribers`.
                public var notifySubscribers: Swift.Bool?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/onBehalfOfContentOwnerChannel`.
                public var onBehalfOfContentOwnerChannel: Swift.String?
                /// Should stabilize be applied to the upload.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/query/stabilize`.
                public var stabilize: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
                ///   - autoLevels: Should auto-levels be applied to the upload.
                ///   - notifySubscribers: Notify the channel subscribers about the new video. As default, the notification is enabled.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///   - onBehalfOfContentOwnerChannel: This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
                ///   - stabilize: Should stabilize be applied to the upload.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    autoLevels: Swift.Bool? = nil,
                    notifySubscribers: Swift.Bool? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil,
                    onBehalfOfContentOwnerChannel: Swift.String? = nil,
                    stabilize: Swift.Bool? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.autoLevels = autoLevels
                    self.notifySubscribers = notifySubscribers
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                    self.onBehalfOfContentOwnerChannel = onBehalfOfContentOwnerChannel
                    self.stabilize = stabilize
                }
            }
            public var query: Operations.youtube_period_videos_period_insert.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videos_period_insert.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/1d-interleaved-parityfec`.
                case video__1d_hyphen_interleaved_hyphen_parityfec(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/3gpp`.
                case video__3gpp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/3gpp-tt`.
                case video__3gpp_hyphen_tt(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/3gpp2`.
                case video__3gpp2(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/av1`.
                case video_av1(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/bmpeg`.
                case video_bmpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/bt656`.
                case video_bt656(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/celb`.
                case video_celb(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/dv`.
                case video_dv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/encaprtp`.
                case video_encaprtp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/ffv1`.
                case video_ffv1(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/flexfec`.
                case video_flexfec(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h261`.
                case video_h261(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h263`.
                case video_h263(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h263-1998`.
                case video_h263_hyphen_1998(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h263-2000`.
                case video_h263_hyphen_2000(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h264`.
                case video_h264(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h264-rcdo`.
                case video_h264_hyphen_rcdo(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h264-svc`.
                case video_h264_hyphen_svc(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/h265`.
                case video_h265(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/iso.segment`.
                case video_iso_period_segment(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/jpeg`.
                case video_jpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/jpeg2000`.
                case video_jpeg2000(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/jpm`.
                case video_jpm(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/jxsv`.
                case video_jxsv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mj2`.
                case video_mj2(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mp1s`.
                case video_mp1s(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mp2p`.
                case video_mp2p(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mp2t`.
                case video_mp2t(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mp4`.
                case video_mp4(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mp4v-es`.
                case video_mp4v_hyphen_es(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mpeg`.
                case video_mpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mpeg4-generic`.
                case video_mpeg4_hyphen_generic(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/mpv`.
                case video_mpv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/nv`.
                case video_nv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/ogg`.
                case video_ogg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/parityfec`.
                case video_parityfec(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/pointer`.
                case video_pointer(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/quicktime`.
                case video_quicktime(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/raptorfec`.
                case video_raptorfec(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/raw`.
                case video_raw(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/rtp-enc-aescm128`.
                case video_rtp_hyphen_enc_hyphen_aescm128(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/rtploopback`.
                case video_rtploopback(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/rtx`.
                case video_rtx(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/scip`.
                case video_scip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/smpte291`.
                case video_smpte291(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/smpte292m`.
                case video_smpte292m(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/ulpfec`.
                case video_ulpfec(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vc1`.
                case video_vc1(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vc2`.
                case video_vc2(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.cctv`.
                case video_vnd_period_cctv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.hd`.
                case video_vnd_period_dece_period_hd(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.mobile`.
                case video_vnd_period_dece_period_mobile(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.mp4`.
                case video_vnd_period_dece_period_mp4(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.pd`.
                case video_vnd_period_dece_period_pd(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.sd`.
                case video_vnd_period_dece_period_sd(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dece.video`.
                case video_vnd_period_dece_period_video(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.directv.mpeg`.
                case video_vnd_period_directv_period_mpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.directv.mpeg-tts`.
                case video_vnd_period_directv_period_mpeg_hyphen_tts(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dlna.mpeg-tts`.
                case video_vnd_period_dlna_period_mpeg_hyphen_tts(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.dvb.file`.
                case video_vnd_period_dvb_period_file(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.fvt`.
                case video_vnd_period_fvt(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.hns.video`.
                case video_vnd_period_hns_period_video(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.1dparityfec-1010`.
                case video_vnd_period_iptvforum_period_1dparityfec_hyphen_1010(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.1dparityfec-2005`.
                case video_vnd_period_iptvforum_period_1dparityfec_hyphen_2005(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.2dparityfec-1010`.
                case video_vnd_period_iptvforum_period_2dparityfec_hyphen_1010(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.2dparityfec-2005`.
                case video_vnd_period_iptvforum_period_2dparityfec_hyphen_2005(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.ttsavc`.
                case video_vnd_period_iptvforum_period_ttsavc(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.iptvforum.ttsmpeg2`.
                case video_vnd_period_iptvforum_period_ttsmpeg2(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.motorola.video`.
                case video_vnd_period_motorola_period_video(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.motorola.videop`.
                case video_vnd_period_motorola_period_videop(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.mpegurl`.
                case video_vnd_period_mpegurl(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.ms-playready.media.pyv`.
                case video_vnd_period_ms_hyphen_playready_period_media_period_pyv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.nokia.interleaved-multimedia`.
                case video_vnd_period_nokia_period_interleaved_hyphen_multimedia(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.nokia.mp4vr`.
                case video_vnd_period_nokia_period_mp4vr(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.nokia.videovoip`.
                case video_vnd_period_nokia_period_videovoip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.objectvideo`.
                case video_vnd_period_objectvideo(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.radgamettools.bink`.
                case video_vnd_period_radgamettools_period_bink(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.radgamettools.smacker`.
                case video_vnd_period_radgamettools_period_smacker(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.sealed.mpeg1`.
                case video_vnd_period_sealed_period_mpeg1(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.sealed.mpeg4`.
                case video_vnd_period_sealed_period_mpeg4(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.sealed.swf`.
                case video_vnd_period_sealed_period_swf(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.sealedmedia.softseal.mov`.
                case video_vnd_period_sealedmedia_period_softseal_period_mov(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.uvvu.mp4`.
                case video_vnd_period_uvvu_period_mp4(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.vivo`.
                case video_vnd_period_vivo(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vnd.youtube.yt`.
                case video_vnd_period_youtube_period_yt(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vp8`.
                case video_vp8(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/vp9`.
                case video_vp9(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/webm`.
                case video_webm(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-f4v`.
                case video_x_hyphen_f4v(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-fli`.
                case video_x_hyphen_fli(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-flv`.
                case video_x_hyphen_flv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-m4v`.
                case video_x_hyphen_m4v(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-matroska`.
                case video_x_hyphen_matroska(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-mng`.
                case video_x_hyphen_mng(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-asf`.
                case video_x_hyphen_ms_hyphen_asf(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-vob`.
                case video_x_hyphen_ms_hyphen_vob(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-wm`.
                case video_x_hyphen_ms_hyphen_wm(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-wmv`.
                case video_x_hyphen_ms_hyphen_wmv(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-wmx`.
                case video_x_hyphen_ms_hyphen_wmx(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-ms-wvx`.
                case video_x_hyphen_ms_hyphen_wvx(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-msvideo`.
                case video_x_hyphen_msvideo(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-sgi-movie`.
                case video_x_hyphen_sgi_hyphen_movie(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/requestBody/content/video\/x-smv`.
                case video_x_hyphen_smv(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_videos_period_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_videos_period_insert.Input.Query,
                headers: Operations.youtube_period_videos_period_insert.Input.Headers = .init(),
                body: Operations.youtube_period_videos_period_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videos/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Video)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Video {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videos_period_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videos_period_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/post(youtube.videos.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing resource.
    ///
    /// - Remark: HTTP `PUT /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/put(youtube.videos.update)`.
    public enum youtube_period_videos_period_update {
        public static let id: Swift.String = "youtube.videos.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/part`.
                public var part: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - part: The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    part: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.part = part
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_videos_period_update.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videos_period_update.Input.Headers
            /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Video)
            }
            public var body: Operations.youtube_period_videos_period_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.youtube_period_videos_period_update.Input.Query,
                headers: Operations.youtube_period_videos_period_update.Input.Headers = .init(),
                body: Operations.youtube_period_videos_period_update.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videos/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Video)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Video {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videos_period_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videos_period_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/put(youtube.videos.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a resource.
    ///
    /// - Remark: HTTP `DELETE /youtube/v3/videos`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/delete(youtube.videos.delete)`.
    public enum youtube_period_videos_period_delete {
        public static let id: Swift.String = "youtube.videos.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/id`.
                public var id: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/DELETE/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_videos_period_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_videos_period_delete.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/delete(youtube.videos.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/delete(youtube.videos.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Retrieves the ratings that the authorized user gave to a list of specified videos.
    ///
    /// - Remark: HTTP `GET /youtube/v3/videos/getRating`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/getRating/get(youtube.videos.getRating)`.
    public enum youtube_period_videos_period_getRating {
        public static let id: Swift.String = "youtube.videos.getRating"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/id`.
                public var id: [Swift.String]
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: [Swift.String],
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_videos_period_getRating.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_getRating.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.youtube_period_videos_period_getRating.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.youtube_period_videos_period_getRating.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.youtube_period_videos_period_getRating.Input.Query,
                headers: Operations.youtube_period_videos_period_getRating.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/youtube/v3/videos/getRating/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VideoGetRatingResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VideoGetRatingResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.youtube_period_videos_period_getRating.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.youtube_period_videos_period_getRating.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/getRating/get(youtube.videos.getRating)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_getRating.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_getRating.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a like or dislike rating to a video or removes a rating from a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/rate`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/rate/post(youtube.videos.rate)`.
    public enum youtube_period_videos_period_rate {
        public static let id: Swift.String = "youtube.videos.rate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/rating`.
                @frozen public enum ratingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case none = "none"
                    case like = "like"
                    case dislike = "dislike"
                }
                /// - Remark: Generated from `#/paths/youtube/v3/videos/rate/POST/query/rating`.
                public var rating: Operations.youtube_period_videos_period_rate.Input.Query.ratingPayload
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - id:
                ///   - rating:
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    id: Swift.String,
                    rating: Operations.youtube_period_videos_period_rate.Input.Query.ratingPayload
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.id = id
                    self.rating = rating
                }
            }
            public var query: Operations.youtube_period_videos_period_rate.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_videos_period_rate.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/rate/post(youtube.videos.rate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_rate.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/rate/post(youtube.videos.rate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_rate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Report abuse for a video.
    ///
    /// - Remark: HTTP `POST /youtube/v3/videos/reportAbuse`.
    /// - Remark: Generated from `#/paths//youtube/v3/videos/reportAbuse/post(youtube.videos.reportAbuse)`.
    public enum youtube_period_videos_period_reportAbuse {
        public static let id: Swift.String = "youtube.videos.reportAbuse"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_videos_period_reportAbuse.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/videos/reportAbuse/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.VideoAbuseReport)
            }
            public var body: Operations.youtube_period_videos_period_reportAbuse.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - body:
            public init(
                query: Operations.youtube_period_videos_period_reportAbuse.Input.Query = .init(),
                body: Operations.youtube_period_videos_period_reportAbuse.Input.Body? = nil
            ) {
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/reportAbuse/post(youtube.videos.reportAbuse)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_videos_period_reportAbuse.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/videos/reportAbuse/post(youtube.videos.reportAbuse)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_videos_period_reportAbuse.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Allows upload of watermark image and setting it for a channel.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/set`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/set/post(youtube.watermarks.set)`.
    public enum youtube_period_watermarks_period_set {
        public static let id: Swift.String = "youtube.watermarks.set"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/channelId`.
                public var channelId: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - channelId:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    channelId: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.channelId = channelId
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_watermarks_period_set.Input.Query
            /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/requestBody/content/application\/octet-stream`.
                case binary(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/requestBody/content/image\/jpeg`.
                case jpeg(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/set/POST/requestBody/content/image\/png`.
                case png(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.youtube_period_watermarks_period_set.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - body:
            public init(
                query: Operations.youtube_period_watermarks_period_set.Input.Query,
                body: Operations.youtube_period_watermarks_period_set.Input.Body? = nil
            ) {
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/watermarks/set/post(youtube.watermarks.set)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_watermarks_period_set.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/watermarks/set/post(youtube.watermarks.set)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_watermarks_period_set.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Allows removal of channel watermark.
    ///
    /// - Remark: HTTP `POST /youtube/v3/watermarks/unset`.
    /// - Remark: Generated from `#/paths//youtube/v3/watermarks/unset/post(youtube.watermarks.unset)`.
    public enum youtube_period_watermarks_period_unset {
        public static let id: Swift.String = "youtube.watermarks.unset"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/$.xgafv`.
                public var _dollar__period_xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/access_token`.
                public var access_token: Components.Parameters.access_token?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/alt`.
                public var alt: Components.Parameters.alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/callback`.
                public var callback: Components.Parameters.callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/fields`.
                public var fields: Components.Parameters.fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/key`.
                public var key: Components.Parameters.key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/oauth_token`.
                public var oauth_token: Components.Parameters.oauth_token?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.prettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.quotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/upload_protocol`.
                public var upload_protocol: Components.Parameters.upload_protocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/uploadType`.
                public var uploadType: Components.Parameters.uploadType?
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/channelId`.
                public var channelId: Swift.String
                /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                ///
                /// - Remark: Generated from `#/paths/youtube/v3/watermarks/unset/POST/query/onBehalfOfContentOwner`.
                public var onBehalfOfContentOwner: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__period_xgafv: V1 error format.
                ///   - access_token: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauth_token: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - channelId:
                ///   - onBehalfOfContentOwner: *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
                public init(
                    _dollar__period_xgafv: Components.Parameters.__period_xgafv? = nil,
                    access_token: Components.Parameters.access_token? = nil,
                    alt: Components.Parameters.alt? = nil,
                    callback: Components.Parameters.callback? = nil,
                    fields: Components.Parameters.fields? = nil,
                    key: Components.Parameters.key? = nil,
                    oauth_token: Components.Parameters.oauth_token? = nil,
                    prettyPrint: Components.Parameters.prettyPrint? = nil,
                    quotaUser: Components.Parameters.quotaUser? = nil,
                    upload_protocol: Components.Parameters.upload_protocol? = nil,
                    uploadType: Components.Parameters.uploadType? = nil,
                    channelId: Swift.String,
                    onBehalfOfContentOwner: Swift.String? = nil
                ) {
                    self._dollar__period_xgafv = _dollar__period_xgafv
                    self.access_token = access_token
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauth_token = oauth_token
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.upload_protocol = upload_protocol
                    self.uploadType = uploadType
                    self.channelId = channelId
                    self.onBehalfOfContentOwner = onBehalfOfContentOwner
                }
            }
            public var query: Operations.youtube_period_watermarks_period_unset.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.youtube_period_watermarks_period_unset.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/watermarks/unset/post(youtube.watermarks.unset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.youtube_period_watermarks_period_unset.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//youtube/v3/watermarks/unset/post(youtube.watermarks.unset)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.youtube_period_watermarks_period_unset.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
